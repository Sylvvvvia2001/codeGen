{"type":"file","encoding":"base64","size":12795,"name":"LightChaserList.tsx","path":"src/list/LightChaserList.tsx","content":"","sha":"2a4d0257eb0f471d212f4bc232455272aa88838b","url":"https://gitee.com/api/v5/repos/xiaopujun/light-chaser/contents/src/list/LightChaserList.tsx","html_url":"https://gitee.com/xiaopujun/light-chaser/blob/master/src/list/LightChaserList.tsx","download_url":"https://gitee.com/xiaopujun/light-chaser/raw/master/src/list/LightChaserList.tsx","_links":{"self":"https://gitee.com/api/v5/repos/xiaopujun/light-chaser/contents/src/list/LightChaserList.tsx","html":"https://gitee.com/xiaopujun/light-chaser/blob/master/src/list/LightChaserList.tsx"}}