config_flow.py:
  schemas: []
  sets:
  - "{'00000000', '11111111', '22222222', '33333333', '44444444', '55555555',\n  \
    \  '66666666', '77777777', '88888888', '99999999', '12345678', '87654321'}"
  - '{''00:40:8c'', ''ac:cc:8e'', ''b8:a4:4f''}'
  - '{''png'', ''jpeg'', ''gif'', ''svg+xml'', ''webp''}'
  - '{(DOMAIN, self.unique_id)}'
  - '{(dr.CONNECTION_NETWORK_MAC, dr.format_mac(hkid))}'
  - '{(dr.CONNECTION_NETWORK_MAC, mac)}'
  - '{FORMATION_UPLOAD_MANUAL_BACKUP, FORMATION_FORM_INITIAL_NETWORK}'
  - '{MG_DL, MMOL_L}'
  - '{NON_SECURE_PORT, SECURE_PORT}'
  - '{Protocol.AirPlay, Protocol.Companion, Protocol.DMAP}'
  - '{SERVER_US, SERVER_OUS}'
  - '{ST_IGD_V1, ST_IGD_V2}'
  - "{config_entries.ConfigEntryState.SETUP_ERROR, config_entries.\n    ConfigEntryState.SETUP_RETRY}"
  - '{entry.data[CONF_TOPIC_IN_PREFIX], entry.data[CONF_TOPIC_OUT_PREFIX]}'
  - '{errno.EINVAL, socket.EAI_NONAME}'
  - '{services.get(''serviceId'')}'
  - '{unique_id}'
  tuples:
  - ('', TUYA_SMART_APP, SMARTLIFE_APP)
  - ('.json', '.pickle')
  - ('cannot_connect', None)
  - ('http://', 'https://')
  - ('http://www.philips.com', 'http://www.philips-hue.com')
  - ('invalid_auth', None)
  - ('irobot-', 'roomba-')
  - ('local', 'haio')
  - ('supervisor', 'container')
  - ('unknown', None)
  - ('ws://', 'wss://')
  - "((CONF_ALLOW_CLIP_SENSOR, DEFAULT_ALLOW_CLIP_SENSOR), (\n    CONF_ALLOW_DECONZ_GROUPS,\
    \ DEFAULT_ALLOW_DECONZ_GROUPS), (\n    CONF_ALLOW_NEW_DEVICES, DEFAULT_ALLOW_NEW_DEVICES))"
  - (..., FlowResult)
  - (AbortFlow, CannotConnect)
  - (AddonError, KeyError)
  - (AddonState.NOT_INSTALLED, AddonState.NOT_RUNNING)
  - (AirzoneCloudError, LoginError)
  - (Any, Any)
  - (Any, Any, _T)
  - (Any, type)
  - (ApiError, AuthFailedError, ClientConnectorError, asyncio.TimeoutError)
  - (ApiError, ClientConnectorError, asyncio.TimeoutError)
  - (ApiError, ClientConnectorError, asyncio.TimeoutError, ClientError)
  - (AqualinkServiceException, httpx.HTTPError)
  - (AvrNetworkError, AvrTimoutError)
  - (AwairLocalDevice | None, str | None)
  - (AwairUser | None, str | None)
  - (CLOUD, LOCAL)
  - (CONF_ALLOW_CLIP_SENSOR, DEFAULT_ALLOW_CLIP_SENSOR)
  - (CONF_ALLOW_DECONZ_GROUPS, DEFAULT_ALLOW_DECONZ_GROUPS)
  - (CONF_ALLOW_NEW_DEVICES, DEFAULT_ALLOW_NEW_DEVICES)
  - (CONF_BAUDRATE, CONF_FLOWCONTROL)
  - (CONF_DOMAINS, CONF_ENTITIES)
  - (CONF_KNX_ROUTING, CONF_KNX_ROUTING_SECURE)
  - (CONF_LAT_NE, CONF_LAT_SW, CONF_LON_NE, CONF_LON_SW)
  - (CONF_MJPEG_URL, CONF_STILL_IMAGE_URL)
  - (CONF_USERNAME, CONF_SERVER, CONF_FOLDER, CONF_SEARCH)
  - (CONF_ZONE_LOOP, CONF_RELAY_ADDR, CONF_RELAY_CHAN)
  - (CONF_ZONE_NUMBER, CONF_ZONE_LOOP, CONF_RELAY_ADDR, CONF_RELAY_CHAN)
  - (CannotConnect, AddonError, AbortFlow)
  - (CannotConnect, ConnectionClosed)
  - (CannotConnect, KeyError)
  - (CannotConnect, UnknownError)
  - (CannotConnect, asyncio.TimeoutError)
  - (CharacteristicNotFound, CommunicationFailure)
  - (ClientConnectorError, FullyKioskError, asyncio.TimeoutError)
  - (ClientConnectorError, exceptions.ArrConnectionException)
  - (ClientConnectorError, nextcord.HTTPException, nextcord.NotFound)
  - (ClientError, AsyncIOTimeoutError, OSError)
  - (ClientError, asyncio.TimeoutError)
  - (ClientError, asyncio.TimeoutError, Aladdin.ConnectionError)
  - (ConfigEntryState.SETUP_RETRY, ConfigEntryState.LOADED)
  - (ConnectTimeout, HTTPError)
  - (ConnectTimeout, HTTPError, JSONDecodeError)
  - (ConnectionClosedException, ConnectionErrorException)
  - (ConnectionError, ClientConnectionError)
  - (ConnectionError, DiscoveryError)
  - (ConnectionError, SchemaError)
  - (ConnectionError, SerialException)
  - (ConnectionError, SnmpError)
  - (ConnectionRefusedError, socket.timeout, SSLError)
  - (ContentTypeError, ConnectTimeout, HTTPError)
  - (DEVICE_TYPE_GOGOGATE2, DEVICE_TYPE_ISMARTGATE)
  - (DOMAIN, self.unique_id)
  - (DOMAIN, str(sensor_index))
  - (DeviceConnectionError, InvalidAuthError, FirmwareUnsupported)
  - (DisconnectedError, AuthError, ValueError)
  - (FailedConnect, AddonError, AbortFlow)
  - (FlowResult | None, dict[str, str])
  - (GatewayDescriptor, None)
  - (GetResponseType, GetResponseType)
  - "(GogoGate2ApiErrorCode.CREDENTIALS_NOT_SET, GogoGate2ApiErrorCode.\n    CREDENTIALS_INCORRECT)"
  - (HERERoutingError, HERETransitError)
  - (HTTPError, URLError)
  - (HTTPStatus.UNAUTHORIZED, HTTPStatus.FORBIDDEN)
  - (HomeAssistantError, KeyError)
  - (IPPConnectionError, IPPResponseError)
  - "(ISmartGateApiErrorCode.CREDENTIALS_NOT_SET, ISmartGateApiErrorCode.\n    CREDENTIALS_INCORRECT)"
  - (InvalidHost, InvalidURL)
  - (InvalidKeyError, KeyExpiredError, UnauthorizedError)
  - (InvalidXMLError, ResponseError)
  - (ListenerError, EndpointError, CancelledError)
  - (LoginError, TokenRefreshFailed)
  - (MusicCastConnectionException, ClientConnectorError)
  - (MyBMWAPIError, RequestError)
  - (NVR | None, dict[str, str])
  - (NextcloudMonitorConnectionError, NextcloudMonitorRequestError)
  - (None, 'cannot_connect')
  - (None, 'invalid_access_token')
  - (None, 'invalid_auth')
  - (None, 'invalid_host')
  - (None, 'no_devices_found')
  - (None, 'unknown')
  - (None, 'unreachable')
  - (None, None)
  - (None, dict[str, str])
  - (None, errors)
  - (None, info)
  - (None, self.async_abort(reason='address_already_configured'))
  - (None, self.async_create_entry(title=info['title'], data=user_input))
  - "(None, self.async_create_entry(title=info['title'], data={CONF_HOST: info[\n\
    \    CONF_HOST], CONF_USERNAME: user_input[CONF_USERNAME], CONF_PASSWORD:\n  \
    \  user_input[CONF_PASSWORD], CONF_AUTO_CONFIGURE: True, CONF_PREFIX: info\n \
    \   [CONF_PREFIX]}))"
  - (None, unique_id)
  - (None, {})
  - (OSError, HTTPError, Timeout)
  - (OSError, RequestError)
  - (ProductType.PUMP, ProductType.VALVE, ProductType.WATER_COMPUTER)
  - (PyEzvizError, AuthTestResultFailed)
  - (PyViCareInvalidConfigurationError, PyViCareInvalidCredentialsError)
  - (PyiCloudServiceNotActivatedException, PyiCloudNoDevicesException)
  - (RESULT_AUTH_MISSING, RESULT_CANNOT_CONNECT)
  - (RESULT_CONN_ERROR, None)
  - (RESULT_SUCCESS, unique_id)
  - (RESULT_UNKNOWN, None)
  - (ReadSendException, CoilWriteSendException)
  - (ReolinkError, ReolinkException)
  - (ResponseError, RequestError, asyncio.TimeoutError)
  - (SiteInfo, str)
  - (State.PROVISIONING, State.PROVISIONED)
  - (Timeout, ConnectionError)
  - (TimeoutError, ClientError)
  - (TimeoutError, RequestError, HTTPStatusError, TimeoutException)
  - (True, False)
  - (TypeError, ValueError)
  - (UPNP_SVC_RENDERING_CONTROL, UPNP_SVC_MAIN_TV_AGENT)
  - (URLError, OSError)
  - (URLError, SOAPError, OSError)
  - (Unauthorized, ClientError, asyncioTimeoutError)
  - (Unauthorized, NotFound)
  - (User, dict[str, str])
  - (ValueError, TemplateError, TypeError)
  - (VerisureError, VerisureResponseError)
  - (VerisureLoginError, VerisureError, VerisureResponseError)
  - (WAQIAirQuality | None, dict[str, str])
  - (ZamgApiError, ZamgNoDataError)
  - ([Any], Any)
  - ([SchemaCommonFlowHandler | None], Coroutine[Any, Any, vol.Schema])
  - "([SchemaCommonFlowHandler, dict[str, Any]], Coroutine[Any, Any, dict[str, Any]]\n\
    \    )"
  - ([], None)
  - ([str], FlowResult)
  - (_, error)
  - (_, errors)
  - (_, hub_name)
  - (_, lastfm_errors)
  - (_get_starred_repositories(), _get_personal_repositories())
  - (_id, name)
  - (adapter, details)
  - (addon_key, addon_val)
  - (addr, dev)
  - (address, discovery)
  - (address, parsed)
  - (adv.readings.name if adv.readings else discovery_info.name, adv)
  - (aftv, error_message)
  - (agency, route, stop)
  - (aiohttp.ClientError, NoUsableService)
  - (aiohttp.ClientError, TimeoutError, HassioAPIError)
  - (aiohttp.ClientError, asyncio.TimeoutError)
  - (aiohttp.ClientError, tibber.RetryableHttpException, tibber.FatalHttpException)
  - (aiohttp.client_exceptions.ClientConnectorError, asyncio.TimeoutError)
  - "(aiosomecomfort.ConnectionError, aiosomecomfort.ConnectionTimeout, asyncio.\n\
    \    TimeoutError)"
  - (api.info['hid'], None)
  - (app, client)
  - (asset_key, conf_key)
  - (asyncio.TimeoutError, AioImapException, ConnectionRefusedError)
  - (asyncio.TimeoutError, ClientError)
  - (asyncio.TimeoutError, ClientError, SmartMeterTexasAPIError)
  - (asyncio.TimeoutError, OSError)
  - (asyncio.TimeoutError, ResponseError)
  - (asyncio.TimeoutError, aiohttp.ClientError)
  - (asyncio.TimeoutError, aiohttp.ClientError, TypeError)
  - (asyncio.TimeoutError, serial.serialutil.SerialException)
  - (asyncio.TimeoutError, yeelight.BulbException)
  - (auth, contracts)
  - (auth_token, info)
  - (auth_token, user_data)
  - '(auth_token, {''title'': address, ''unique_id'': user_data[''user_id'']})'
  - (bad_cec, ignore_cec)
  - (bad_hosts, known_hosts)
  - (bad_uuid, wanted_uuid)
  - (bond_id, hub_name)
  - (client_id, nickname)
  - (com_ports_list, com_ports_list[0])
  - (config_entries.ConfigEntry | None, bool)
  - "(config_entries.ConfigEntryState.SETUP_ERROR, config_entries.\n    ConfigEntryState.NOT_LOADED)"
  - "(config_entries.ConfigEntryState.SETUP_ERROR, config_entries.\n    ConfigEntryState.SETUP_RETRY)"
  - "(config_entries.ConfigEntryState.SETUP_IN_PROGRESS, config_entries.\n    ConfigEntryState.NOT_LOADED)"
  - (data.model, data.device_number)
  - (data[CONF_HOST], data[CONF_PORT])
  - (description, port)
  - (device.ready(), device.info())
  - (device_info, discovery_info.ip)
  - (device_info, host)
  - (device_info, wlan_settings)
  - (devices[0], None)
  - (dict[Any, Any], dict[str, Any])
  - (dict[str, Any] | None, dict[str, str] | None)
  - (dict[str, Any], dict[str, Any])
  - (dict[str, Any], dict[str, str])
  - (dict[str, Any], str)
  - (dict[str, list[Any]], dict[str, str])
  - (dict[str, str] | None, FlowResult | None)
  - (dict[str, str] | None, dict[str, str])
  - (dict[str, str], UptimeRobotAccount | None)
  - (dict[str, str], dict[str, str] | None)
  - (dict[str, str], dict[str, str])
  - (dict[str, str], str | None)
  - (dict[str, str], str | None, str | None)
  - (dict[str, str], str)
  - (direct_connect_domain, source_ip)
  - (discovergyError.HTTPError, discovergyError.DiscovergyClientError)
  - (discovery_info.host, discovery_info.port)
  - (discovery_info.ip, discovery_info.hostname)
  - (domain, name)
  - (dr.CONNECTION_NETWORK_MAC, dr.format_mac(hkid))
  - (dr.CONNECTION_NETWORK_MAC, mac)
  - (eagle_type, hardware_address)
  - (entity_id, entry)
  - (entry, True)
  - (entry, is_unique_match)
  - (entry_data[CONF_HOST], DEFAULT_PORT)
  - (error, info)
  - (error, unique_id)
  - (errors, None)
  - (errors, _)
  - (errors, _, _)
  - (errors, account)
  - (errors, authentication)
  - (errors, camera_location, camera_id)
  - (errors, description_placeholders)
  - (errors, info)
  - (errors, result)
  - (errors, still_format)
  - (et.ParseError, vol.MultipleInvalid, ec_exc.UnknownStationId)
  - (event_code, options)
  - "(f'{data[CONF_MODEL]} at {data[CONF_IP_ADDRESS]}', {**data, CONF_WORD_SWAP:\n\
    \    heatpump.word_swap, CONF_CONNECTION_TYPE: CONF_CONNECTION_TYPE_NIBEGW})"
  - "(f'{data[CONF_MODEL]} at {host}', {**data, CONF_CONNECTION_TYPE:\n    CONF_CONNECTION_TYPE_MODBUS})"
  - (field, _type)
  - (first_inverter_uid, FroniusConfigEntryData(host=host, is_logger=False))
  - (formatted_mac, device)
  - (friendly_name, onewire_id)
  - (group_type, form_step)
  - (hid, error)
  - (host, discovery)
  - (host, port)
  - (hub.bond_id, hub.name)
  - (i, departure_filter)
  - (i, device)
  - (i, f)
  - (idx, source)
  - (idx, video_source)
  - (index, config)
  - (index, name)
  - (index, sensor)
  - (info, None)
  - (info, error)
  - (info, errors)
  - (info, wlan_settings)
  - (invalid, items)
  - (ip, serial_prefix)
  - (ip_1, ip_2, ip_3, _)
  - (is_ready, is_login)
  - (k, v)
  - (key, departure_filter)
  - (key, discovery)
  - (key, hub)
  - (key, val)
  - (key, validator)
  - (key, value)
  - (lat, lon)
  - (list[str] | None, str | None)
  - (list[str], dict[str, str])
  - (logger_uid, FroniusConfigEntryData(host=host, is_logger=True))
  - (mac, device)
  - (mac, gateway)
  - (mac_address, error)
  - (main_user, _)
  - (matches[0], matches[0].all_identifiers)
  - (matching_host_entry, False)
  - (measuring_station, _)
  - (measuring_station, errors)
  - (model, device_number)
  - (name, _)
  - (name, server_id, owner)
  - (network_id, info)
  - (new_options, housecode, unitcode)
  - (nvr_data, errors)
  - (option, default)
  - (options, housecode, unitcode)
  - (packet_id, entity_info)
  - (param, value)
  - "(parsed_url.scheme, new_netloc, parsed_url.path, parsed_url.query,\n    parsed_url.fragment,\
    \ None)"
  - (picnic.session.auth_token, picnic.get_user())
  - (plexapi.exceptions.BadRequest, plexapi.exceptions.Unauthorized)
  - (plexapi.exceptions.NotFound, requests.exceptions.ConnectionError)
  - (power_wall.get_site_info(), power_wall.get_gateway_din())
  - (python_otbr_api.OTBRError, aiohttp.ClientError, asyncio.TimeoutError)
  - (region_name, grouping_letters)
  - (response, data)
  - (result, None, None)
  - (result, _, method, info)
  - (result, _method, info)
  - (result, errors)
  - (result, lines)
  - (result, method, _info)
  - (result, unique_id)
  - (ret, _)
  - (ret, response)
  - (self._com_ports_list, self._default_com_port)
  - (self._connect_result, self._method, self._device_info)
  - (self._device, _)
  - (self._device, error)
  - (self._slnet_token, self._slnet_token_expires, self._user_id)
  - (self.async_create_entry(title=info['title'], data=user_input), errors)
  - (self.atv, self.atv_identifiers)
  - (self.auth, self.contracts)
  - (self.current_device, onewire_id)
  - (self.name, self.mac)
  - (serial, device)
  - (serial.serialutil.SerialException, OSError)
  - (site_info, gateway_din)
  - (skybell.user_id, None)
  - (start, end)
  - (state, data)
  - (status, info)
  - (steam.api.HTTPError, steam.api.HTTPTimeoutError)
  - (str | None, nextcord.AppInfo | None)
  - (str | None, str | None)
  - (str | None, str)
  - (str(api.sysdata['macAddress']), None)
  - (str, AbstractDiscovery)
  - (str, AdapterDetails)
  - (str, Any)
  - (str, BluetoothServiceInfo)
  - (str, BluetoothServiceInfoBleak)
  - (str, Callable[[HomeAssistant, str, dict[str, Any]], TemplateEntity])
  - (str, Callable[[str, dict[str, Any]], GroupEntity | MediaPlayerGroup])
  - (str, CloudDevice)
  - (str, DSMRObject)
  - (str, Device30303)
  - (str, DiscoveredBulb)
  - (str, DiscoveredHueBridge)
  - (str, DiscoveredSnooz)
  - (str, Discovery)
  - (str, ElkSystem)
  - (str, FluxLEDDiscovery)
  - (str, FroniusConfigEntryData)
  - (str, Light)
  - (str, MicroBotAdvertisement)
  - (str, None)
  - (str, SmartDevice)
  - (str, SsdpServiceInfo)
  - (str, SwitchBotAdvertisement)
  - (str, aiopulse.Hub)
  - (str, bluetooth.BluetoothServiceInfoBleak)
  - (str, bool | set[str])
  - (str, bool)
  - (str, dict)
  - (str, dict[str, Any] | None)
  - (str, dict[str, Any])
  - (str, dict[str, str])
  - (str, int)
  - (str, list)
  - (str, list[int])
  - (str, list[str])
  - (str, ssdp.SsdpServiceInfo)
  - (str, str | None)
  - (str, str | None, dict[str, Any] | None)
  - (str, str | bool | float)
  - (str, str | bool)
  - (str, str | int | bool)
  - (str, str | int)
  - (str, str)
  - (str, str, str)
  - (str, tuple[str, Aranet4Advertisement])
  - (str, vol.Schema)
  - (tag, title)
  - (timeout, RadiothermTstatError, URLError, OSError)
  - (title, data)
  - (token, core_id, core_name)
  - (transport, protocol)
  - (tuple[bool, int], dict[str, Any])
  - (unique_id, info)
  - (unique_id, self.info)
  - '(upb.network_id, {''title'': ''UPB'', CONF_HOST: url, CONF_FILE_PATH: file_path})'
  - (user, None)
  - (user, error)
  - (user, errors)
  - (user_id, connect_result)
  - (user_id, error)
  - (user_input[CONF_LAT_NE], user_input[CONF_LAT_SW])
  - (user_input[CONF_LAT_SW], user_input[CONF_LAT_NE])
  - (user_input[CONF_LON_NE], user_input[CONF_LON_SW])
  - (user_input[CONF_LON_SW], user_input[CONF_LON_NE])
  - (username, password)
  - (users, errors)
  - (uuid, f'{NICKNAME_PREFIX} {uuid[:6]}')
  - (uuid, station)
  - (valid_users, errors)
  - (vol.Invalid, XKNXException)
  - (vol.Marker, Any)
  - (vol.Marker, type)
  - (vol.MultipleInvalid,)
  - (vol.Optional, type[str])
  - (vol.Required | vol.Optional, Any)
  - (vol.Required, type[str | int])
  - (vol.Required, type[str])
  - (webhook_id, webhook_url, cloudhook)
  - '({''base'': ''cannot_connect''}, None)'
  - '({''base'': ''onvif_error''}, description_placeholders)'
  - '({''base'': ''onvif_error''}, {''error'': stringify_onvif_error(err)})'
  - '({''base'': ''unknown''}, None)'
  - '({CONF_PASSWORD: ''auth_failed''}, description_placeholders)'
  - '({CONF_PASSWORD: ''invalid_auth''}, None)'
  - '({CONF_PORT: ''no_onvif_service''}, {})'
  - '({CONF_STILL_IMAGE_URL: ''invalid_still_image''}, None)'
  - '({CONF_STILL_IMAGE_URL: ''malformed_url''}, None)'
  - '({CONF_STILL_IMAGE_URL: ''relative_url''}, None)'
  - '({CONF_STILL_IMAGE_URL: ''template_error''}, None)'
  - '({CONF_STILL_IMAGE_URL: ''unable_still_load''}, None)'
  - ({}, f'image/{fmt}')
  - ({}, info.get(CONF_CONTENT_TYPE, 'image/jpeg'))
  - ({}, {})
  - Any, Any
  - Any, Any, dict[str, Any]
  - Any, Any, vol.Schema
  - '[HomeAssistant, str, dict[str, Any]], TemplateEntity'
  - '[str, dict[str, Any]], GroupEntity | MediaPlayerGroup'
  - bool, int
  - str, Any
  - str, Aranet4Advertisement
  - str, list[Any]
  - str, str
