sensor.py:
  schemas: []
  sets:
  - "{'1-0:96.50.1*1', '1-0:96.50.1*4', '1-0:96.50.4*4', '1-0:96.90.2*1',\n    '1-0:96.90.2*2',\
    \ '1-0:97.97.0*0', '129-129:199.130.3*255',\n    '129-129:199.130.5*255'}"
  - '{''2.2'', ''4'', ''5'', ''5B'', ''5L''}'
  - '{''2.2'', ''4'', ''5'', ''5L''}'
  - '{''2.2''}'
  - '{''4'', ''5'', ''5L''}'
  - '{''5B''}'
  - '{''5L'', ''5S'', ''Q3D''}'
  - '{''ONE'', ''TWO'', ''THREE_STAR'', ''THREE_DELTA''}'
  - '{''RM4PRO'', ''RM4MINI''}'
  - '{''THREE_STAR'', ''THREE_DELTA''}'
  - '{''THREE_STAR''}'
  - '{''TS011F'', ''ZLinky_TIC''}'
  - '{''TWO'', ''THREE_STAR'', ''THREE_DELTA''}'
  - '{''VZM31-SN'', ''SP 234'', ''outletv4''}'
  - '{''ZLinky_TIC''}'
  - '{''_TZE200_htnnfasr''}'
  - '{''_attr_native_value'', ''_attr_last_reset'', ''_expired''}'
  - '{''aqara.feeder.acn001''}'
  - '{''delivered''}'
  - '{''limit'', ''usage'', ''used_remaining''}'
  - '{''lumi.sensor_smoke.acn03''}'
  - '{''on'', ''state''}'
  - '{''sum''}'
  - '{''temperature'', ''pressure'', ''sum_rain_1''}'
  - '{''temperatureSensor'', ''humiditySensor'', ''lightSensor''}'
  - '{(CONNECTION_BLUETOOTH, address)}'
  - '{(CONNECTION_BLUETOOTH, airthings_device.address)}'
  - '{(CONNECTION_BLUETOOTH, medcom_device.address)}'
  - '{(CONNECTION_NETWORK_MAC, mac)}'
  - '{(DOMAIN, ''_''.join(self._device_name.split('' '')))}'
  - '{(DOMAIN, ''measure-id'', self.station_id)}'
  - '{(DOMAIN, DOMAIN)}'
  - '{(DOMAIN, _device_id)}'
  - '{(DOMAIN, airthings_device.device_id)}'
  - '{(DOMAIN, api.host, api.mac_address)}'
  - '{(DOMAIN, api_key)}'
  - '{(DOMAIN, cast(str, config_entry.unique_id))}'
  - '{(DOMAIN, cast(str, coordinator.data.user.reference_code))}'
  - '{(DOMAIN, component[ATTR_SERIAL])}'
  - '{(DOMAIN, config_entry.entry_id)}'
  - '{(DOMAIN, coordinator.cloud_id)}'
  - '{(DOMAIN, coordinator.config_entry.entry_id)}'
  - '{(DOMAIN, coordinator.data.device.n2g_id)}'
  - '{(DOMAIN, coordinator.data.serial)}'
  - '{(DOMAIN, coordinator.entry_id)}'
  - '{(DOMAIN, coordinator.repository)}'
  - '{(DOMAIN, coordinator.unique_id)}'
  - '{(DOMAIN, county)}'
  - '{(DOMAIN, data_service.site_id)}'
  - '{(DOMAIN, device.deviceid)}'
  - '{(DOMAIN, device.mac)}'
  - '{(DOMAIN, device.serial_number)}'
  - '{(DOMAIN, device.unique_id)}'
  - '{(DOMAIN, device[''uid''])}'
  - '{(DOMAIN, device_data[''serial''][''value''])}'
  - '{(DOMAIN, device_id)}'
  - '{(DOMAIN, device_serial)}'
  - '{(DOMAIN, disk[''id''])}'
  - '{(DOMAIN, domain)}'
  - '{(DOMAIN, enpower_data.serial_number)}'
  - '{(DOMAIN, entry.entry_id)}'
  - '{(DOMAIN, entry_id)}'
  - '{(DOMAIN, f''{coordinator.config_entry.entry_id}'')}'
  - '{(DOMAIN, f''{coordinator.config_entry.entry_id}_{description.service_type}'')}'
  - '{(DOMAIN, f''{coordinator.config_entry.entry_id}_{service}'')}'
  - '{(DOMAIN, f''{coordinator.host}:{coordinator.port}'')}'
  - '{(DOMAIN, f''{coordinator.latitude}-{coordinator.longitude}'')}'
  - '{(DOMAIN, f''{device}_{device_group}'')}'
  - '{(DOMAIN, f''{entry.entry_id}'')}'
  - '{(DOMAIN, f''{entry_id}_{self._attr_unique_id}'')}'
  - '{(DOMAIN, f''{license_plate}'')}'
  - '{(DOMAIN, f''{self._device_id}-{self._number}'')}'
  - '{(DOMAIN, f''{split_unique_id[0]}-{split_unique_id[1]}'')}'
  - '{(DOMAIN, f''{user_profile_id}_{device.id}'')}'
  - '{(DOMAIN, gateway_device_id)}'
  - '{(DOMAIN, gw_dev.gw_id)}'
  - '{(DOMAIN, hostname)}'
  - '{(DOMAIN, identifier)}'
  - '{(DOMAIN, meter.meter_id)}'
  - '{(DOMAIN, meter_uid)}'
  - '{(DOMAIN, mill_device.device_id)}'
  - '{(DOMAIN, pb_provider.pushbullet.user_info[''iden''])}'
  - '{(DOMAIN, pooldata[''ICO''][''serial_number''])}'
  - '{(DOMAIN, probe.device_id)}'
  - '{(DOMAIN, said)}'
  - '{(DOMAIN, self._coinbase_data.user_id)}'
  - '{(DOMAIN, self._device.uuid)}'
  - '{(DOMAIN, self._electricity_id)}'
  - '{(DOMAIN, self._server.machine_identifier)}'
  - '{(DOMAIN, self._server_id)}'
  - "{(DOMAIN, self.config_entry.entry_id, self.config_entry.data[CONF_STATION][\n\
    \    'id'], self.config_entry.data[CONF_STATION]['type'])}"
  - '{(DOMAIN, self.coordinator.config_entry.entry_id)}'
  - '{(DOMAIN, self.envoy_serial_num)}'
  - '{(DOMAIN, self.executor.get_gateway_id())}'
  - '{(DOMAIN, self.platform.config_entry.unique_id)}'
  - '{(DOMAIN, self.power_plug.id)}'
  - '{(DOMAIN, self.serial_number)}'
  - '{(DOMAIN, self.server_id)}'
  - '{(DOMAIN, sense_monitor_id)}'
  - '{(DOMAIN, sensor.sensor_id)}'
  - '{(DOMAIN, serial)}'
  - '{(DOMAIN, serial_number)}'
  - '{(DOMAIN, server_unique_id)}'
  - '{(DOMAIN, service[SERVICE_ID])}'
  - '{(DOMAIN, service_location.device_serial_number)}'
  - '{(DOMAIN, station_id)}'
  - '{(DOMAIN, storage_data[''serial''][''value''])}'
  - '{(DOMAIN, str(coordinator.data.station_id))}'
  - '{(DOMAIN, str(coordinator.gios.station_id))}'
  - '{(DOMAIN, str(device.device_id))}'
  - '{(DOMAIN, str(sensor_id))}'
  - '{(DOMAIN, str(system_id))}'
  - '{(DOMAIN, system_info.mac_addr)}'
  - '{(DOMAIN, unique_id)}'
  - '{(DOMAIN, unique_id_prefix)}'
  - '{(KONNECTED_DOMAIN, device_id)}'
  - '{(LOGI_CIRCLE_DOMAIN, camera.id)}'
  - '{(TIBBER_DOMAIN, home.home_id)}'
  - '{(TIBBER_DOMAIN, old_id)}'
  - '{(TIBBER_DOMAIN, self._tibber_home.home_id)}'
  - '{(dr.CONNECTION_BLUETOOTH, data.address)}'
  - '{(dr.CONNECTION_BLUETOOTH, device.address)}'
  - '{(dr.CONNECTION_NETWORK_MAC, coordinator.mac_address)}'
  - '{(dr.CONNECTION_NETWORK_MAC, mac_address)}'
  - '{(dr.CONNECTION_NETWORK_MAC, self._device.mac_address)}'
  - '{(dr.CONNECTION_NETWORK_MAC, self._sensor_data.hub_mac_address)}'
  - '{(ios.DOMAIN, self._device[ios.ATTR_DEVICE][ios.ATTR_DEVICE_PERMANENT_ID])}'
  - '{API_VOC, API_SCORE}'
  - '{ActivityType.LOCK_OPERATION}'
  - '{CLUSTER_HANDLER_THERMOSTAT}'
  - '{MachineState.Complete.value, MachineState.Standby.value}'
  - '{MinecraftServerType.BEDROCK_EDITION}'
  - '{MinecraftServerType.JAVA_EDITION, MinecraftServerType.BEDROCK_EDITION}'
  - '{ModelType.CAMERA}'
  - '{None, ''''}'
  - '{None, SensorDeviceClass.ENUM}'
  - "{PROP_COMMS_ERROR, PROP_ENERGY_MODE, PROP_HEAT_COOL_STATE, PROP_ON_LEVEL,\n \
    \   PROP_RAMP_RATE, PROP_STATUS}"
  - '{STATE_UNAVAILABLE, STATE_UNKNOWN}'
  - "{STAT_AVERAGE_LINEAR, STAT_AVERAGE_STEP, STAT_AVERAGE_TIMELESS,\n    STAT_CHANGE_SAMPLE,\
    \ STAT_CHANGE_SECOND, STAT_CHANGE, STAT_COUNT,\n    STAT_DATETIME_NEWEST, STAT_DATETIME_OLDEST,\
    \ STAT_DATETIME_VALUE_MAX,\n    STAT_DATETIME_VALUE_MIN, STAT_DISTANCE_95P, STAT_DISTANCE_99P,\n\
    \    STAT_DISTANCE_ABSOLUTE, STAT_MEAN, STAT_MEAN_CIRCULAR, STAT_MEDIAN,\n   \
    \ STAT_NOISINESS, STAT_PERCENTILE, STAT_STANDARD_DEVIATION, STAT_SUM,\n    STAT_SUM_DIFFERENCES,\
    \ STAT_SUM_DIFFERENCES_NONNEGATIVE, STAT_TOTAL,\n    STAT_VALUE_MAX, STAT_VALUE_MIN,\
    \ STAT_VARIANCE}"
  - "{STAT_AVERAGE_LINEAR, STAT_AVERAGE_STEP, STAT_AVERAGE_TIMELESS, STAT_CHANGE,\n\
    \    STAT_DISTANCE_95P, STAT_DISTANCE_99P, STAT_DISTANCE_ABSOLUTE, STAT_MEAN,\n\
    \    STAT_MEAN_CIRCULAR, STAT_MEDIAN, STAT_NOISINESS, STAT_PERCENTILE,\n    STAT_STANDARD_DEVIATION,\
    \ STAT_SUM, STAT_SUM_DIFFERENCES,\n    STAT_SUM_DIFFERENCES_NONNEGATIVE, STAT_TOTAL,\
    \ STAT_VALUE_MAX,\n    STAT_VALUE_MIN}"
  - "{STAT_AVERAGE_STEP, STAT_AVERAGE_TIMELESS, STAT_COUNT, STAT_COUNT_BINARY_ON,\n\
    \    STAT_COUNT_BINARY_OFF, STAT_DATETIME_NEWEST, STAT_DATETIME_OLDEST,\n    STAT_MEAN}"
  - '{STAT_AVERAGE_STEP, STAT_AVERAGE_TIMELESS, STAT_MEAN}'
  - "{STAT_DATETIME_NEWEST, STAT_DATETIME_OLDEST, STAT_DATETIME_VALUE_MAX,\n    STAT_DATETIME_VALUE_MIN}"
  - '{SensorDeviceClass.DATE, SensorDeviceClass.TIMESTAMP}'
  - "{SensorStateClass.MEASUREMENT, SensorStateClass.TOTAL, SensorStateClass.\n  \
    \  TOTAL_INCREASING}"
  - '{TYPE_FLOW_SENSOR_CONSUMED_LITERS, TYPE_FLOW_SENSOR_LEAK_VOLUME}'
  - '{TYPE_LAST_LEAK_DETECTED, TYPE_RAIN_SENSOR_RAIN_START}'
  - "{UnitOfEnergy.GIGA_JOULE, UnitOfEnergy.KILO_WATT_HOUR, UnitOfEnergy.\n    MEGA_JOULE,\
    \ UnitOfEnergy.MEGA_WATT_HOUR, UnitOfEnergy.WATT_HOUR}"
  - '{UnitOfEnergy.GIGA_JOULE, UnitOfEnergy.MEGA_WATT_HOUR}'
  - "{UnitOfVolume.CENTUM_CUBIC_FEET, UnitOfVolume.CUBIC_FEET, UnitOfVolume.\n   \
    \ CUBIC_METERS, *VALID_ENERGY_UNITS}"
  - "{UnitOfVolume.CENTUM_CUBIC_FEET, UnitOfVolume.CUBIC_FEET, UnitOfVolume.\n   \
    \ CUBIC_METERS, UnitOfVolume.GALLONS, UnitOfVolume.LITERS}"
  - '{Valve.remaining_open_time.uuid}'
  - '{description.key, *description.alternative_keys}'
  - "{self._indoor_temp_sensor, self._indoor_humidity_sensor, self.\n    _outdoor_temp_sensor}"
  - '{self.char.uuid}'
  - '{sensor.ATTR_LAST_RESET, sensor.ATTR_STATE_CLASS}'
  - '{station.station_id, station.station.external_url, station.station.name}'
  - '{statistic_id}'
  tuples:
  - "('SHUTTING_DOWN', 'ERROR', 'STANDBY', 'PAIRING', 'POWER_PRODUCTION',\n    'AC_CHARGING',\
    \ 'NOT_PAIRED', 'NIGHT_MODE', 'GRID_MONITORING', 'IDLE')"
  - ('accumulatedConsumption', 'accumulatedProduction')
  - ('accumulatedCost', 'accumulatedReward')
  - ('actual', 'target')
  - ('adc', 'adc')
  - ('air_quality', None, 'mdi:weather-windy', None, [CANARY_PRO])
  - "('battery', 'consumption', 'daylight_status', 'humidity', 'light_level',\n  \
    \  'power', 'pressure', 'status', 'temperature')"
  - ('battery', 'state')
  - ('battery', PERCENTAGE, None, SensorDeviceClass.BATTERY, [CANARY_FLEX])
  - ('battery_level', 'ble_strength')
  - ('cart_data', 'slot_data', 'next_delivery_data', 'last_order_data')
  - ('chimes', 'doorbots', 'authorized_doorbots', 'stickup_cams')
  - ('consumption', False, UnitOfEnergy.KILO_WATT_HOUR)
  - ('coordination', 'status')
  - ('cpu', 'cpu_use_percent')
  - ('current', 'total')
  - ('current_power', 'temperature')
  - ('destination', 'linename', 'time', 'direction', 'product')
  - ('device', 'battery')
  - ('device', 'deviceTemp')
  - ('device', 'energy')
  - ('device', 'neutralCurrent')
  - ('device', 'power')
  - ('device', 'voltage')
  - ('direction', 'departure_time', 'product', 'minutes')
  - ('docker', 'docker_active')
  - ('docker', 'docker_cpu_use')
  - ('docker', 'docker_memory_use')
  - ('emeter', 'current')
  - ('emeter', 'energy')
  - ('emeter', 'energyReturned')
  - ('emeter', 'power')
  - ('emeter', 'powerFactor')
  - ('emeter', 'voltage')
  - ('filter_type',)
  - ('flow_from', 'flow_to', None)
  - ('fs', 'disk_free')
  - ('fs', 'disk_use')
  - ('fs', 'disk_use_percent')
  - ('gateway', 'gateway.v3', 'acpartner.v3')
  - ('grid', 'gas', 'water')
  - ('hrain_piezomm', 'hrain_piezo')
  - ('humidity', PERCENTAGE, None, SensorDeviceClass.HUMIDITY, [CANARY_PRO])
  - "('id', 'trigger', 'created_at', 'message_to_speech_url', 'prio', 'type',\n  \
    \  'responder_mode', 'can_respond_until', 'task_ids')"
  - ('illumination', 'lux')
  - ('illumination',)
  - ('ipv4_address', 'ipv6_address')
  - ('kWh', 'Wh')
  - ('latitude', 'longitude', 'address_type', 'formatted_address')
  - "('lifetime_energy', 'energy_this_year', 'energy_this_month', 'energy_today',\n\
    \    'current_power')"
  - ('light', 'energy')
  - ('light', 'power')
  - "('line_number_public', 'line_transport_type', 'final_destination',\n    'due_at_schedule',\
    \ 'due_at_realtime', 'is_realtime')"
  - ('line_voltages_a', 'line_voltages_b', 'line_voltages_c')
  - ('load', 'processor_load')
  - ('load', 'sensor', 'switch')
  - "('mdi:signal-cellular-outline', 'mdi:signal-cellular-1',\n    'mdi:signal-cellular-2',\
    \ 'mdi:signal-cellular-3')"
  - ('mdi:speedometer-slow', 'mdi:speedometer-medium', 'mdi:speedometer')
  - ('mem', 'memory_free')
  - ('mem', 'memory_use')
  - ('mem', 'memory_use_percent')
  - ('memswap', 'swap_free')
  - ('memswap', 'swap_use')
  - ('memswap', 'swap_use_percent')
  - ('meters', 'sensors', 'gateways', 'batteries', 'inverters')
  - ('network_out', 'network_in')
  - ('on', 'off')
  - ('packets_out', 'packets_in')
  - ('phase_voltages_a', 'phase_voltages_b', 'phase_voltages_c')
  - ('power_consumption', 'solar_power', 'grid_power', 'storage_power')
  - "('power_today', 'power_current_hour', 'power_last_5_minutes', 'solar_today',\n\
    \    'solar_current_hour', 'alwayson_today')"
  - "('ppv', 'house_consumption', 'active_power', 'battery_soc', 'e_day',\n    'e_total',\
    \ 'meter_e_total_exp', 'meter_e_total_imp',\n    'e_bat_charge_total', 'e_bat_discharge_total')"
  - ('processcount', 'process_running')
  - ('processcount', 'process_sleeping')
  - ('processcount', 'process_thread')
  - ('processcount', 'process_total')
  - ('production', True, UnitOfEnergy.KILO_WATT_HOUR)
  - ('profit', True, home.currency)
  - "('purchased_energy', 'production_energy', 'feedin_energy',\n    'consumption_energy',\
    \ 'selfconsumption_energy')"
  - ('raid', 'available')
  - ('raid', 'used')
  - ('relay', 'energy')
  - ('relay', 'power')
  - ('relay', 'totalWorkTime')
  - ('roller', 'rollerEnergy')
  - ('roller', 'rollerPower')
  - ('sensor', 'concentration')
  - ('sensor', 'extTemp')
  - ('sensor', 'humidity')
  - ('sensor', 'load', 'switch')
  - ('sensor', 'luminosity')
  - ('sensor', 'sensorOp')
  - ('sensor', 'temp')
  - ('sensor', 'tilt')
  - ('sensors', 'battery')
  - ('sensors', 'fan_speed')
  - ('sensors', 'temperature_core')
  - ('sensors', 'temperature_hdd')
  - ('smartmeter', 'watermeter', 'phases', 'settings')
  - ('stat_cost', 'stat_compensation')
  - ('stat_energy_from', 'stat_energy_to')
  - ('storage_level',)
  - ('style', 'script', 'template')
  - ('temperature', 'humidity', 'pressure')
  - "('temperature', 'pressure', 'humidity', 'rain', 'wind_strength',\n    'gust_strength',\
    \ 'sum_rain_1', 'sum_rain_24', 'wind_angle', 'gust_angle')"
  - "('temperature', UnitOfTemperature.CELSIUS, None, SensorDeviceClass.\n    TEMPERATURE,\
    \ [CANARY_PRO])"
  - ('throughput_network_out', 'throughput_network_in')
  - ('totalCost', False, home.currency)
  - ('valve', 'valve')
  - ('vibration',)
  - ('wake up', 'sleep', 'dead', 'alive')
  - ('weather', 'weather.v1')
  - "('wifi', SIGNAL_STRENGTH_DECIBELS_MILLIWATT, None, SensorDeviceClass.\n    SIGNAL_STRENGTH,\
    \ [CANARY_FLEX])"
  - ('wind_speed', 'wind_gust')
  - "('\xB0C', '\xB0F', 'K')"
  - "(((21, 3), (20, 4), SIGN_ARIES, {ATTR_ELEMENT: ELEMENT_FIRE, ATTR_MODALITY:\n\
    \    MODALITY_CARDINAL}), ((21, 4), (20, 5), SIGN_TAURUS, {ATTR_ELEMENT:\n   \
    \ ELEMENT_EARTH, ATTR_MODALITY: MODALITY_FIXED}), ((21, 5), (21, 6),\n    SIGN_GEMINI,\
    \ {ATTR_ELEMENT: ELEMENT_AIR, ATTR_MODALITY:\n    MODALITY_MUTABLE}), ((22, 6),\
    \ (22, 7), SIGN_CANCER, {ATTR_ELEMENT:\n    ELEMENT_WATER, ATTR_MODALITY: MODALITY_CARDINAL}),\
    \ ((23, 7), (22, 8),\n    SIGN_LEO, {ATTR_ELEMENT: ELEMENT_FIRE, ATTR_MODALITY:\
    \ MODALITY_FIXED}),\n    ((23, 8), (21, 9), SIGN_VIRGO, {ATTR_ELEMENT: ELEMENT_EARTH,\n\
    \    ATTR_MODALITY: MODALITY_MUTABLE}), ((22, 9), (22, 10), SIGN_LIBRA, {\n  \
    \  ATTR_ELEMENT: ELEMENT_AIR, ATTR_MODALITY: MODALITY_CARDINAL}), ((23, 10\n \
    \   ), (22, 11), SIGN_SCORPIO, {ATTR_ELEMENT: ELEMENT_WATER, ATTR_MODALITY:\n\
    \    MODALITY_FIXED}), ((23, 11), (21, 12), SIGN_SAGITTARIUS, {ATTR_ELEMENT:\n\
    \    ELEMENT_FIRE, ATTR_MODALITY: MODALITY_MUTABLE}), ((22, 12), (20, 1),\n  \
    \  SIGN_CAPRICORN, {ATTR_ELEMENT: ELEMENT_EARTH, ATTR_MODALITY:\n    MODALITY_CARDINAL}),\
    \ ((21, 1), (19, 2), SIGN_AQUARIUS, {ATTR_ELEMENT:\n    ELEMENT_AIR, ATTR_MODALITY:\
    \ MODALITY_FIXED}), ((20, 2), (20, 3),\n    SIGN_PISCES, {ATTR_ELEMENT: ELEMENT_WATER,\
    \ ATTR_MODALITY:\n    MODALITY_MUTABLE}))"
  - "((20, 2), (20, 3), SIGN_PISCES, {ATTR_ELEMENT: ELEMENT_WATER, ATTR_MODALITY:\n\
    \    MODALITY_MUTABLE})"
  - "((21, 1), (19, 2), SIGN_AQUARIUS, {ATTR_ELEMENT: ELEMENT_AIR, ATTR_MODALITY:\n\
    \    MODALITY_FIXED})"
  - "((21, 3), (20, 4), SIGN_ARIES, {ATTR_ELEMENT: ELEMENT_FIRE, ATTR_MODALITY:\n\
    \    MODALITY_CARDINAL})"
  - "((21, 4), (20, 5), SIGN_TAURUS, {ATTR_ELEMENT: ELEMENT_EARTH, ATTR_MODALITY:\n\
    \    MODALITY_FIXED})"
  - "((21, 5), (21, 6), SIGN_GEMINI, {ATTR_ELEMENT: ELEMENT_AIR, ATTR_MODALITY:\n\
    \    MODALITY_MUTABLE})"
  - "((22, 12), (20, 1), SIGN_CAPRICORN, {ATTR_ELEMENT: ELEMENT_EARTH,\n    ATTR_MODALITY:\
    \ MODALITY_CARDINAL})"
  - "((22, 6), (22, 7), SIGN_CANCER, {ATTR_ELEMENT: ELEMENT_WATER, ATTR_MODALITY:\n\
    \    MODALITY_CARDINAL})"
  - "((22, 9), (22, 10), SIGN_LIBRA, {ATTR_ELEMENT: ELEMENT_AIR, ATTR_MODALITY:\n\
    \    MODALITY_CARDINAL})"
  - "((23, 10), (22, 11), SIGN_SCORPIO, {ATTR_ELEMENT: ELEMENT_WATER,\n    ATTR_MODALITY:\
    \ MODALITY_FIXED})"
  - "((23, 11), (21, 12), SIGN_SAGITTARIUS, {ATTR_ELEMENT: ELEMENT_FIRE,\n    ATTR_MODALITY:\
    \ MODALITY_MUTABLE})"
  - "((23, 7), (22, 8), SIGN_LEO, {ATTR_ELEMENT: ELEMENT_FIRE, ATTR_MODALITY:\n  \
    \  MODALITY_FIXED})"
  - "((23, 8), (21, 9), SIGN_VIRGO, {ATTR_ELEMENT: ELEMENT_EARTH, ATTR_MODALITY:\n\
    \    MODALITY_MUTABLE})"
  - "((ATTR_EXTERNAL_ID, self._external_id), (ATTR_ACTIVITY, self._activity), (\n\
    \    ATTR_HAZARDS, self._hazards), (ATTR_LONGITUDE, self._longitude), (\n    ATTR_LATITUDE,\
    \ self._latitude), (ATTR_DISTANCE, self._distance), (\n    ATTR_LAST_UPDATE, self._feed_last_update),\
    \ (ATTR_LAST_UPDATE_SUCCESSFUL,\n    self._feed_last_update_successful))"
  - "((ATTR_STATUS, self._status), (ATTR_LAST_UPDATE, self._last_update), (\n    ATTR_LAST_UPDATE_SUCCESSFUL,\
    \ self._last_update_successful), (\n    ATTR_LAST_TIMESTAMP, self._last_timestamp),\
    \ (ATTR_CREATED, self.\n    _created), (ATTR_UPDATED, self._updated), (ATTR_REMOVED,\
    \ self._removed))"
  - ((floor, ceiling), (name, icon))
  - ((type_, argument), data)
  - ()
  - "(*(AccuWeatherSensorDescription(key='AirQuality', icon='mdi:air-filter',\n  \
    \  value_fn=lambda data: cast(str, data[ATTR_CATEGORY]), device_class=\n    SensorDeviceClass.ENUM,\
    \ options=['good', 'hazardous', 'high', 'low',\n    'moderate', 'unhealthy'],\
    \ translation_key=f'air_quality_{day}d', day=\n    day) for day in range(MAX_FORECAST_DAYS\
    \ + 1)), *(\n    AccuWeatherSensorDescription(key='CloudCoverDay', icon=\n   \
    \ 'mdi:weather-cloudy', entity_registry_enabled_default=False,\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_fn=lambda data: cast(int,\n    data), translation_key=f'cloud_cover_day_{day}d',\
    \ day=day) for day in\n    range(MAX_FORECAST_DAYS + 1)), *(AccuWeatherSensorDescription(key=\n\
    \    'CloudCoverNight', icon='mdi:weather-cloudy',\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    PERCENTAGE, value_fn=lambda data: cast(int,\
    \ data), translation_key=\n    f'cloud_cover_night_{day}d', day=day) for day in\
    \ range(\n    MAX_FORECAST_DAYS + 1)), *(AccuWeatherSensorDescription(key='Grass',\n\
    \    icon='mdi:grass', entity_registry_enabled_default=False,\n    native_unit_of_measurement=CONCENTRATION_PARTS_PER_CUBIC_METER,\n\
    \    value_fn=lambda data: cast(int, data[ATTR_VALUE]), attr_fn=lambda data:\n\
    \    {ATTR_LEVEL: data[ATTR_CATEGORY]}, translation_key=\n    f'grass_pollen_{day}d',\
    \ day=day) for day in range(MAX_FORECAST_DAYS + 1\n    )), *(AccuWeatherSensorDescription(key='HoursOfSun',\
    \ icon=\n    'mdi:weather-partly-cloudy', native_unit_of_measurement=UnitOfTime.\n\
    \    HOURS, value_fn=lambda data: cast(float, data), translation_key=\n    f'hours_of_sun_{day}d',\
    \ day=day) for day in range(MAX_FORECAST_DAYS + 1\n    )), *(AccuWeatherSensorDescription(key='LongPhraseDay',\
    \ value_fn=lambda\n    data: cast(str, data), translation_key=f'condition_day_{day}d',\
    \ day=day\n    ) for day in range(MAX_FORECAST_DAYS + 1)), *(\n    AccuWeatherSensorDescription(key='LongPhraseNight',\
    \ value_fn=lambda\n    data: cast(str, data), translation_key=f'condition_night_{day}d',\
    \ day=\n    day) for day in range(MAX_FORECAST_DAYS + 1)), *(\n    AccuWeatherSensorDescription(key='Mold',\
    \ icon='mdi:blur',\n    entity_registry_enabled_default=False, native_unit_of_measurement=\n\
    \    CONCENTRATION_PARTS_PER_CUBIC_METER, value_fn=lambda data: cast(int,\n  \
    \  data[ATTR_VALUE]), attr_fn=lambda data: {ATTR_LEVEL: data[ATTR_CATEGORY\n \
    \   ]}, translation_key=f'mold_pollen_{day}d', day=day) for day in range(\n  \
    \  MAX_FORECAST_DAYS + 1)), *(AccuWeatherSensorDescription(key='Ragweed',\n  \
    \  icon='mdi:sprout', native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_CUBIC_METER,\
    \ entity_registry_enabled_default=\n    False, value_fn=lambda data: cast(int,\
    \ data[ATTR_VALUE]), attr_fn=lambda\n    data: {ATTR_LEVEL: data[ATTR_CATEGORY]},\
    \ translation_key=\n    f'ragweed_pollen_{day}d', day=day) for day in range(MAX_FORECAST_DAYS\
    \ +\n    1)), *(AccuWeatherSensorDescription(key='RealFeelTemperatureMax',\n \
    \   device_class=SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_fn=lambda data: cast(float, data[\n    ATTR_VALUE]),\
    \ translation_key=f'realfeel_temperature_max_{day}d', day=\n    day) for day in\
    \ range(MAX_FORECAST_DAYS + 1)), *(\n    AccuWeatherSensorDescription(key='RealFeelTemperatureMin',\
    \ device_class\n    =SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_fn=lambda data: cast(float, data[\n    ATTR_VALUE]),\
    \ translation_key=f'realfeel_temperature_min_{day}d', day=\n    day) for day in\
    \ range(MAX_FORECAST_DAYS + 1)), *(\n    AccuWeatherSensorDescription(key='RealFeelTemperatureShadeMax',\n\
    \    device_class=SensorDeviceClass.TEMPERATURE,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, value_fn=lambda\
    \ data: cast(float, data[\n    ATTR_VALUE]), translation_key=f'realfeel_temperature_shade_max_{day}d',\n\
    \    day=day) for day in range(MAX_FORECAST_DAYS + 1)), *(\n    AccuWeatherSensorDescription(key='RealFeelTemperatureShadeMin',\n\
    \    device_class=SensorDeviceClass.TEMPERATURE,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, value_fn=lambda\
    \ data: cast(float, data[\n    ATTR_VALUE]), translation_key=f'realfeel_temperature_shade_min_{day}d',\n\
    \    day=day) for day in range(MAX_FORECAST_DAYS + 1)), *(\n    AccuWeatherSensorDescription(key='SolarIrradianceDay',\
    \ icon=\n    'mdi:weather-sunny', entity_registry_enabled_default=False,\n   \
    \ native_unit_of_measurement=UnitOfIrradiance.WATTS_PER_SQUARE_METER,\n    value_fn=lambda\
    \ data: cast(float, data[ATTR_VALUE]), translation_key=\n    f'solar_irradiance_day_{day}d',\
    \ day=day) for day in range(\n    MAX_FORECAST_DAYS + 1)), *(AccuWeatherSensorDescription(key=\n\
    \    'SolarIrradianceNight', icon='mdi:weather-sunny',\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    UnitOfIrradiance.WATTS_PER_SQUARE_METER, value_fn=lambda\
    \ data: cast(\n    float, data[ATTR_VALUE]), translation_key=\n    f'solar_irradiance_night_{day}d',\
    \ day=day) for day in range(\n    MAX_FORECAST_DAYS + 1)), *(AccuWeatherSensorDescription(key=\n\
    \    'ThunderstormProbabilityDay', icon='mdi:weather-lightning',\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_fn=lambda data: cast(int,\n    data), translation_key=f'thunderstorm_probability_day_{day}d',\
    \ day=day) for\n    day in range(MAX_FORECAST_DAYS + 1)), *(AccuWeatherSensorDescription(\n\
    \    key='ThunderstormProbabilityNight', icon='mdi:weather-lightning',\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_fn=lambda data: cast(int,\n    data), translation_key=f'thunderstorm_probability_night_{day}d',\
    \ day=\n    day) for day in range(MAX_FORECAST_DAYS + 1)), *(\n    AccuWeatherSensorDescription(key='Tree',\
    \ icon='mdi:tree-outline',\n    native_unit_of_measurement=CONCENTRATION_PARTS_PER_CUBIC_METER,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda data: cast(int,\n\
    \    data[ATTR_VALUE]), attr_fn=lambda data: {ATTR_LEVEL: data[ATTR_CATEGORY\n\
    \    ]}, translation_key=f'tree_pollen_{day}d', day=day) for day in range(\n \
    \   MAX_FORECAST_DAYS + 1)), *(AccuWeatherSensorDescription(key='UVIndex',\n \
    \   icon='mdi:weather-sunny', native_unit_of_measurement=UV_INDEX, value_fn\n\
    \    =lambda data: cast(int, data[ATTR_VALUE]), attr_fn=lambda data: {\n    ATTR_LEVEL:\
    \ data[ATTR_CATEGORY]}, translation_key=f'uv_index_{day}d',\n    day=day) for\
    \ day in range(MAX_FORECAST_DAYS + 1)), *(\n    AccuWeatherSensorDescription(key='WindGustDay',\
    \ device_class=\n    SensorDeviceClass.WIND_SPEED, entity_registry_enabled_default=False,\n\
    \    native_unit_of_measurement=UnitOfSpeed.KILOMETERS_PER_HOUR, value_fn=lambda\n\
    \    data: cast(float, data[ATTR_SPEED][ATTR_VALUE]), attr_fn=lambda data: {\n\
    \    'direction': data[ATTR_DIRECTION][ATTR_ENGLISH]}, translation_key=\n    f'wind_gust_speed_day_{day}d',\
    \ day=day) for day in range(\n    MAX_FORECAST_DAYS + 1)), *(AccuWeatherSensorDescription(key=\n\
    \    'WindGustNight', device_class=SensorDeviceClass.WIND_SPEED,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    UnitOfSpeed.KILOMETERS_PER_HOUR, value_fn=lambda\
    \ data: cast(float, data\n    [ATTR_SPEED][ATTR_VALUE]), attr_fn=lambda data:\
    \ {'direction': data[\n    ATTR_DIRECTION][ATTR_ENGLISH]}, translation_key=\n\
    \    f'wind_gust_speed_night_{day}d', day=day) for day in range(\n    MAX_FORECAST_DAYS\
    \ + 1)), *(AccuWeatherSensorDescription(key='WindDay',\n    device_class=SensorDeviceClass.WIND_SPEED,\
    \ native_unit_of_measurement=\n    UnitOfSpeed.KILOMETERS_PER_HOUR, value_fn=lambda\
    \ data: cast(float, data\n    [ATTR_SPEED][ATTR_VALUE]), attr_fn=lambda data:\
    \ {'direction': data[\n    ATTR_DIRECTION][ATTR_ENGLISH]}, translation_key=\n\
    \    f'wind_speed_day_{day}d', day=day) for day in range(MAX_FORECAST_DAYS +\n\
    \    1)), *(AccuWeatherSensorDescription(key='WindNight', device_class=\n    SensorDeviceClass.WIND_SPEED,\
    \ native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR, value_fn=lambda\
    \ data: cast(float, data[ATTR_SPEED]\n    [ATTR_VALUE]), attr_fn=lambda data:\
    \ {'direction': data[ATTR_DIRECTION][\n    ATTR_ENGLISH]}, translation_key=f'wind_speed_night_{day}d',\
    \ day=day) for\n    day in range(MAX_FORECAST_DAYS + 1)))"
  - (*FITBIT_RESOURCES_LIST, FITBIT_RESOURCE_BATTERY, SLEEP_START_TIME)
  - (*SENSOR_TYPES, *SENSOR_TYPES_DUST)
  - (*SENSOR_TYPES, *SENSOR_TYPES_UPTIME)
  - (*SENSOR_TYPES, inverter_temp_description)
  - "(*_SYSTEM_MON_COND, *_CPU_MON_COND, *_MEMORY_MON_COND, *_NETWORK_MON_COND,\n\
    \    *_DRIVE_MON_COND, *_VOLUME_MON_COND)"
  - (*chem_sensor_description.data_root, chem_sensor_description.key)
  - (*device_id, entity_description.key)
  - (*scg_sensor_description.data_root, scg_sensor_description.key)
  - (-11, -8, -5)
  - (-110, -95, -80)
  - (-20, -10, -6)
  - (-80, -70, -60)
  - (-95, -85, -75)
  - (..., None)
  - (0, 5, 10)
  - (0, 50)
  - (101, 150)
  - (151, 200)
  - (19, 2)
  - (2, 'Backyard')
  - (20, 1)
  - (20, 2)
  - (20, 3)
  - (20, 4)
  - (20, 5)
  - (201, 300)
  - (21, 1)
  - (21, 12)
  - (21, 3)
  - (21, 4)
  - (21, 5)
  - (21, 6)
  - (21, 9)
  - (22, 10)
  - (22, 11)
  - (22, 12)
  - (22, 6)
  - (22, 7)
  - (22, 8)
  - (22, 9)
  - (23, 10)
  - (23, 11)
  - (23, 7)
  - (23, 8)
  - (3, 12)
  - (301, 1000)
  - (4, 'BOWS')
  - (4, 6)
  - (51, 100)
  - (6, 'CSAD')
  - (6, 'Chlorinator')
  - (6, 'Filter')
  - (6, 'Pumps')
  - (8, 15)
  - (ATTR_ACTIVITY, self._activity)
  - "(ATTR_ACTUAL_SPEED, ATTR_HUMIDITY, ATTR_TEMPERATURE, ATTR_USE_TIME,\n    ATTR_WATER_LEVEL)"
  - (ATTR_ATCOCODE, ATTR_LOCALITY, ATTR_STOP_NAME, ATTR_REQUEST_TIME)
  - (ATTR_AVG_TIME, ATTR_NAME, ATTR_DESCRIPTION, ATTR_TRAVEL_TIME_ID)
  - (ATTR_BATTERY, ATTR_HUMIDITY, ATTR_TEMPERATURE)
  - "(ATTR_CARBON_DIOXIDE, ATTR_DUST_FILTER_LIFE_REMAINING,\n    ATTR_DUST_FILTER_LIFE_REMAINING_DAYS,\
    \ ATTR_PM25_2, ATTR_TEMPERATURE,\n    ATTR_CONTROL_SPEED, ATTR_FAVORITE_SPEED)"
  - "(ATTR_CARBON_DIOXIDE, ATTR_DUST_FILTER_LIFE_REMAINING,\n    ATTR_DUST_FILTER_LIFE_REMAINING_DAYS,\
    \ ATTR_UPPER_FILTER_LIFE_REMAINING,\n    ATTR_UPPER_FILTER_LIFE_REMAINING_DAYS,\
    \ ATTR_PM25_2, ATTR_TEMPERATURE,\n    ATTR_CONTROL_SPEED, ATTR_FAVORITE_SPEED)"
  - "(ATTR_CARBON_DIOXIDE, ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_USE,\n    ATTR_HUMIDITY,\
    \ ATTR_PM25, ATTR_TEMPERATURE, ATTR_USE_TIME)"
  - (ATTR_CREATED, self._created)
  - (ATTR_DISTANCE, self._distance)
  - (ATTR_EXTERNAL_ID, self._external_id)
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_LEFT_TIME, ATTR_FILTER_USE,\n    ATTR_HUMIDITY,\
    \ ATTR_MOTOR_SPEED, ATTR_PM25, ATTR_PM10,\n    ATTR_PURIFY_VOLUME, ATTR_TEMPERATURE,\
    \ ATTR_USE_TIME)"
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_LEFT_TIME, ATTR_FILTER_USE,\n    ATTR_HUMIDITY,\
    \ ATTR_MOTOR_SPEED, ATTR_PM25, ATTR_PURIFY_VOLUME,\n    ATTR_TEMPERATURE, ATTR_USE_TIME)"
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_LEFT_TIME, ATTR_FILTER_USE,\n    ATTR_HUMIDITY,\
    \ ATTR_MOTOR_SPEED, ATTR_PM25, ATTR_TEMPERATURE, ATTR_USE_TIME\n    )"
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_USE, ATTR_HUMIDITY,\n    ATTR_ILLUMINANCE_LUX,\
    \ ATTR_MOTOR2_SPEED, ATTR_MOTOR_SPEED, ATTR_PM25,\n    ATTR_PURIFY_VOLUME, ATTR_TEMPERATURE,\
    \ ATTR_USE_TIME)"
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_USE, ATTR_HUMIDITY,\n    ATTR_ILLUMINANCE_LUX,\
    \ ATTR_MOTOR2_SPEED, ATTR_MOTOR_SPEED, ATTR_PM25,\n    ATTR_TEMPERATURE, ATTR_USE_TIME)"
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_USE, ATTR_HUMIDITY,\n    ATTR_MOTOR_SPEED,\
    \ ATTR_PM25, ATTR_PURIFY_VOLUME, ATTR_TEMPERATURE,\n    ATTR_USE_TIME)"
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_USE, ATTR_HUMIDITY,\n    ATTR_MOTOR_SPEED,\
    \ ATTR_PM25, ATTR_TEMPERATURE, ATTR_USE_TIME)"
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_USE, ATTR_HUMIDITY,\n    ATTR_MOTOR_SPEED,\
    \ ATTR_PM25, ATTR_TEMPERATURE, ATTR_USE_TIME,\n    ATTR_ILLUMINANCE)"
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_USE, ATTR_ILLUMINANCE_LUX,\n    ATTR_MOTOR2_SPEED,\
    \ ATTR_MOTOR_SPEED, ATTR_PM25, ATTR_PURIFY_VOLUME,\n    ATTR_USE_TIME)"
  - (ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_USE, ATTR_MOTOR_SPEED, ATTR_PM25)
  - "(ATTR_FILTER_LIFE_REMAINING, ATTR_FILTER_USE, ATTR_MOTOR_SPEED, ATTR_PM25,\n\
    \    ATTR_TVOC, ATTR_HUMIDITY, ATTR_TEMPERATURE)"
  - (ATTR_HAZARDS, self._hazards)
  - (ATTR_HUMIDITY, ATTR_TEMPERATURE)
  - "(ATTR_HUMIDITY, ATTR_TEMPERATURE, ATTR_MOTOR_SPEED, ATTR_USE_TIME,\n    ATTR_WATER_LEVEL)"
  - (ATTR_HUMIDITY, ATTR_TEMPERATURE, ATTR_USE_TIME, ATTR_WATER_LEVEL)
  - (ATTR_LAST_TIMESTAMP, self._last_timestamp)
  - (ATTR_LAST_UPDATE, self._feed_last_update)
  - (ATTR_LAST_UPDATE, self._last_update)
  - (ATTR_LAST_UPDATE_SUCCESSFUL, self._feed_last_update_successful)
  - (ATTR_LAST_UPDATE_SUCCESSFUL, self._last_update_successful)
  - (ATTR_LATITUDE, self._latitude)
  - (ATTR_LONGITUDE, self._longitude)
  - (ATTR_REMOVED, self._removed)
  - (ATTR_STATUS, self._status)
  - (ATTR_UPDATED, self._updated)
  - "(AbodeSensorDescription(key=CONST.TEMP_STATUS_KEY, device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement_fn=lambda\n    device: ABODE_TEMPERATURE_UNIT_HA_UNIT[device.temp_unit],\
    \ value_fn=lambda\n    device: cast(float, device.temp)), AbodeSensorDescription(key=CONST.\n\
    \    HUMI_STATUS_KEY, device_class=SensorDeviceClass.HUMIDITY,\n    native_unit_of_measurement_fn=lambda\
    \ _: PERCENTAGE, value_fn=lambda\n    device: cast(float, device.humidity)), AbodeSensorDescription(key=CONST\n\
    \    .LUX_STATUS_KEY, device_class=SensorDeviceClass.ILLUMINANCE,\n    native_unit_of_measurement_fn=lambda\
    \ _: LIGHT_LUX, value_fn=lambda\n    device: cast(float, device.lux)))"
  - (AbodeSensorDescription, ...)
  - "(AccSensorEntityDescription(key='battery_level', device_class=\n    SensorDeviceClass.BATTERY,\
    \ entity_registry_enabled_default=False,\n    native_unit_of_measurement=PERCENTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, value_fn=AladdinConnectClient.get_battery_status),\n\
    \    AccSensorEntityDescription(key='rssi', translation_key='wifi_strength',\n\
    \    device_class=SensorDeviceClass.SIGNAL_STRENGTH,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=AladdinConnectClient.get_rssi_status),\n    AccSensorEntityDescription(key='ble_strength',\
    \ translation_key=\n    'ble_strength', device_class=SensorDeviceClass.SIGNAL_STRENGTH,\n\
    \    entity_registry_enabled_default=False, native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    value_fn=AladdinConnectClient.get_ble_strength))"
  - (AccSensorEntityDescription, ...)
  - "(AccuWeatherSensorDescription(key='ApparentTemperature', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, value_fn=lambda\
    \ data: cast(float, data[\n    API_METRIC][ATTR_VALUE]), translation_key='apparent_temperature'),\n\
    \    AccuWeatherSensorDescription(key='Ceiling', device_class=\n    SensorDeviceClass.DISTANCE,\
    \ icon='mdi:weather-fog', state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfLength.\n\
    \    METERS, value_fn=lambda data: cast(float, data[API_METRIC][ATTR_VALUE]),\n\
    \    suggested_display_precision=0, translation_key='cloud_ceiling'),\n    AccuWeatherSensorDescription(key='CloudCover',\
    \ icon=\n    'mdi:weather-cloudy', entity_registry_enabled_default=False,\n  \
    \  state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n   \
    \ PERCENTAGE, value_fn=lambda data: cast(int, data), translation_key=\n    'cloud_cover'),\
    \ AccuWeatherSensorDescription(key='DewPoint',\n    device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    value_fn=lambda\
    \ data: cast(float, data[API_METRIC][ATTR_VALUE]),\n    translation_key='dew_point'),\
    \ AccuWeatherSensorDescription(key=\n    'RealFeelTemperature', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n \
    \   UnitOfTemperature.CELSIUS, value_fn=lambda data: cast(float, data[\n    API_METRIC][ATTR_VALUE]),\
    \ translation_key='realfeel_temperature'),\n    AccuWeatherSensorDescription(key='RealFeelTemperatureShade',\n\
    \    device_class=SensorDeviceClass.TEMPERATURE,\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    value_fn=lambda data: cast(float, data[API_METRIC][ATTR_VALUE]),\n    translation_key='realfeel_temperature_shade'),\n\
    \    AccuWeatherSensorDescription(key='Precipitation', device_class=\n    SensorDeviceClass.PRECIPITATION_INTENSITY,\
    \ state_class=SensorStateClass\n    .MEASUREMENT, native_unit_of_measurement=UnitOfVolumetricFlux.\n\
    \    MILLIMETERS_PER_HOUR, value_fn=lambda data: cast(float, data[API_METRIC\n\
    \    ][ATTR_VALUE]), attr_fn=lambda data: {'type': data['PrecipitationType']\n\
    \    }, translation_key='precipitation'), AccuWeatherSensorDescription(key=\n\
    \    'PressureTendency', device_class=SensorDeviceClass.ENUM, icon=\n    'mdi:gauge',\
    \ options=['falling', 'rising', 'steady'], value_fn=lambda\n    data: cast(str,\
    \ data['LocalizedText']).lower(), translation_key=\n    'pressure_tendency'),\
    \ AccuWeatherSensorDescription(key='UVIndex', icon=\n    'mdi:weather-sunny',\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UV_INDEX,\
    \ value_fn=lambda data: cast(int,\n    data), attr_fn=lambda data: {ATTR_LEVEL:\
    \ data['UVIndexText']},\n    translation_key='uv_index'), AccuWeatherSensorDescription(key=\n\
    \    'WetBulbTemperature', device_class=SensorDeviceClass.TEMPERATURE,\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    value_fn=lambda data: cast(float, data[API_METRIC][ATTR_VALUE]),\n    translation_key='wet_bulb_temperature'),\
    \ AccuWeatherSensorDescription(\n    key='WindChillTemperature', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    value_fn=lambda\
    \ data: cast(float, data[API_METRIC][ATTR_VALUE]),\n    translation_key='wind_chill_temperature'),\
    \ AccuWeatherSensorDescription\n    (key='Wind', device_class=SensorDeviceClass.WIND_SPEED,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfSpeed.\n\
    \    KILOMETERS_PER_HOUR, value_fn=lambda data: cast(float, data[ATTR_SPEED]\n\
    \    [API_METRIC][ATTR_VALUE]), translation_key='wind_speed'),\n    AccuWeatherSensorDescription(key='WindGust',\
    \ device_class=\n    SensorDeviceClass.WIND_SPEED, entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n \
    \   UnitOfSpeed.KILOMETERS_PER_HOUR, value_fn=lambda data: cast(float, data\n\
    \    [ATTR_SPEED][API_METRIC][ATTR_VALUE]), translation_key='wind_gust_speed'))"
  - (AccuWeatherSensorDescription, ...)
  - "(AdGuardHomeEntityDescription(key='dns_queries', translation_key=\n    'dns_queries',\
    \ icon='mdi:magnify', native_unit_of_measurement='queries',\n    value_fn=lambda\
    \ adguard: adguard.stats.dns_queries()),\n    AdGuardHomeEntityDescription(key='blocked_filtering',\
    \ translation_key=\n    'dns_queries_blocked', icon='mdi:magnify-close',\n   \
    \ native_unit_of_measurement='queries', value_fn=lambda adguard: adguard.\n  \
    \  stats.blocked_filtering()), AdGuardHomeEntityDescription(key=\n    'blocked_percentage',\
    \ translation_key='dns_queries_blocked_ratio', icon\n    ='mdi:magnify-close',\
    \ native_unit_of_measurement=PERCENTAGE, value_fn=\n    lambda adguard: adguard.stats.blocked_percentage()),\n\
    \    AdGuardHomeEntityDescription(key='blocked_parental', translation_key=\n \
    \   'parental_control_blocked', icon='mdi:human-male-girl',\n    native_unit_of_measurement='requests',\
    \ value_fn=lambda adguard: adguard\n    .stats.replaced_parental()), AdGuardHomeEntityDescription(key=\n\
    \    'blocked_safebrowsing', translation_key='safe_browsing_blocked', icon=\n\
    \    'mdi:shield-half-full', native_unit_of_measurement='requests', value_fn\n\
    \    =lambda adguard: adguard.stats.replaced_safebrowsing()),\n    AdGuardHomeEntityDescription(key='enforced_safesearch',\
    \ translation_key\n    ='safe_searches_enforced', icon='mdi:shield-search',\n\
    \    native_unit_of_measurement='requests', value_fn=lambda adguard: adguard\n\
    \    .stats.replaced_safesearch()), AdGuardHomeEntityDescription(key=\n    'average_speed',\
    \ translation_key='average_processing_speed', icon=\n    'mdi:speedometer', native_unit_of_measurement=UnitOfTime.MILLISECONDS,\n\
    \    value_fn=lambda adguard: adguard.stats.avg_processing_time()),\n    AdGuardHomeEntityDescription(key='rules_count',\
    \ translation_key=\n    'rules_count', icon='mdi:counter', native_unit_of_measurement='rules',\n\
    \    value_fn=lambda adguard: adguard.filtering.rules_count(allowlist=False),\n\
    \    entity_registry_enabled_default=False))"
  - (AdGuardHomeEntityDescription, ...)
  - "(AirNowEntityDescription(key=ATTR_API_AQI, icon='mdi:blur', state_class=\n  \
    \  SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.AQI,\n    value_fn=lambda\
    \ data: data.get(ATTR_API_AQI), extra_state_attributes_fn\n    =lambda data: {ATTR_DESCR:\
    \ data[ATTR_API_AQI_DESCRIPTION], ATTR_LEVEL:\n    data[ATTR_API_AQI_LEVEL], ATTR_TIME:\
    \ datetime.strptime(\n    f'{data[ATTR_API_REPORT_DATE]} {data[ATTR_API_REPORT_HOUR]}',\n\
    \    '%Y-%m-%d %H').replace(tzinfo=get_time_zone(data[ATTR_API_REPORT_TZ])).\n\
    \    isoformat()}), AirNowEntityDescription(key=ATTR_API_PM25, icon=\n    'mdi:blur',\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, device_class=SensorDeviceClass.PM25, value_fn=lambda data:\n\
    \    data.get(ATTR_API_PM25), extra_state_attributes_fn=None),\n    AirNowEntityDescription(key=ATTR_API_O3,\
    \ translation_key='o3', icon=\n    'mdi:blur', native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: data.\n \
    \   get(ATTR_API_O3), extra_state_attributes_fn=None),\n    AirNowEntityDescription(key=ATTR_API_STATION,\
    \ translation_key='station',\n    icon='mdi:blur', value_fn=lambda data: data.get(ATTR_API_STATION),\n\
    \    extra_state_attributes_fn=station_extra_attrs))"
  - (AirNowEntityDescription, ...)
  - "(AirVisualProMeasurementDescription(key='air_quality_index', device_class=\n\
    \    SensorDeviceClass.AQI, state_class=SensorStateClass.MEASUREMENT,\n    value_fn=lambda\
    \ settings, status, measurements, history: measurements[\n    async_get_aqi_locale(settings)]),\
    \ AirVisualProMeasurementDescription(\n    key='outdoor_air_quality_index', device_class=SensorDeviceClass.AQI,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda settings,\n   \
    \ status, measurements, history: int(history.get(\n    f\"Outdoor {'AQI(US)' if\
    \ settings['is_aqi_usa'] else 'AQI(CN)'}\", -1)),\n    translation_key='outdoor_air_quality_index'),\n\
    \    AirVisualProMeasurementDescription(key='battery_level', device_class=\n \
    \   SensorDeviceClass.BATTERY, entity_category=EntityCategory.DIAGNOSTIC,\n  \
    \  native_unit_of_measurement=PERCENTAGE, value_fn=lambda settings, status,\n\
    \    measurements, history: status['battery']),\n    AirVisualProMeasurementDescription(key='carbon_dioxide',\
    \ device_class=\n    SensorDeviceClass.CO2, native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, value_fn=lambda settings, status,\
    \ measurements, history:\n    measurements['co2']), AirVisualProMeasurementDescription(key='humidity',\n\
    \    device_class=SensorDeviceClass.HUMIDITY, native_unit_of_measurement=\n  \
    \  PERCENTAGE, value_fn=lambda settings, status, measurements, history:\n    measurements['humidity']),\
    \ AirVisualProMeasurementDescription(key=\n    'particulate_matter_0_1', translation_key='pm01',\n\
    \    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n  \
    \  state_class=SensorStateClass.MEASUREMENT, value_fn=lambda settings,\n    status,\
    \ measurements, history: measurements['pm0_1']),\n    AirVisualProMeasurementDescription(key='particulate_matter_1_0',\n\
    \    device_class=SensorDeviceClass.PM1, native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, value_fn=lambda settings, status,\
    \ measurements, history:\n    measurements['pm1_0']), AirVisualProMeasurementDescription(key=\n\
    \    'particulate_matter_2_5', device_class=SensorDeviceClass.PM25,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda settings,\n   \
    \ status, measurements, history: measurements['pm2_5']),\n    AirVisualProMeasurementDescription(key='temperature',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  value_fn=lambda settings, status, measurements, history: measurements[\n  \
    \  'temperature_C']), AirVisualProMeasurementDescription(key='voc',\n    device_class=SensorDeviceClass.VOLATILE_ORGANIC_COMPOUNDS,\n\
    \    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n  \
    \  state_class=SensorStateClass.MEASUREMENT, value_fn=lambda settings,\n    status,\
    \ measurements, history: measurements['voc']))"
  - "(AirlySensorEntityDescription(key=ATTR_API_CAQI, icon='mdi:air-filter',\n   \
    \ translation_key='caqi', native_unit_of_measurement='CAQI',\n    suggested_display_precision=0,\
    \ attrs=lambda data: {ATTR_LEVEL: data[\n    ATTR_API_CAQI_LEVEL], ATTR_ADVICE:\
    \ data[ATTR_API_ADVICE],\n    ATTR_DESCRIPTION: data[ATTR_API_CAQI_DESCRIPTION]}),\n\
    \    AirlySensorEntityDescription(key=ATTR_API_PM1, device_class=\n    SensorDeviceClass.PM1,\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, suggested_display_precision=0),\n    AirlySensorEntityDescription(key=ATTR_API_PM25,\
    \ device_class=\n    SensorDeviceClass.PM25, native_unit_of_measurement=\n   \
    \ CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, suggested_display_precision=0, attrs=lambda data: {\n    ATTR_LIMIT:\
    \ data[f'{ATTR_API_PM25}_{SUFFIX_LIMIT}'], ATTR_PERCENT:\n    round(data[f'{ATTR_API_PM25}_{SUFFIX_PERCENT}'])}),\n\
    \    AirlySensorEntityDescription(key=ATTR_API_PM10, device_class=\n    SensorDeviceClass.PM10,\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, suggested_display_precision=0, attrs=lambda data: {\n    ATTR_LIMIT:\
    \ data[f'{ATTR_API_PM10}_{SUFFIX_LIMIT}'], ATTR_PERCENT:\n    round(data[f'{ATTR_API_PM10}_{SUFFIX_PERCENT}'])}),\n\
    \    AirlySensorEntityDescription(key=ATTR_API_HUMIDITY, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ suggested_display_precision=1\n    ), AirlySensorEntityDescription(key=ATTR_API_PRESSURE,\
    \ device_class=\n    SensorDeviceClass.PRESSURE, native_unit_of_measurement=UnitOfPressure.\n\
    \    HPA, state_class=SensorStateClass.MEASUREMENT,\n    suggested_display_precision=0),\
    \ AirlySensorEntityDescription(key=\n    ATTR_API_TEMPERATURE, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ suggested_display_precision=1),\n    AirlySensorEntityDescription(key=ATTR_API_CO,\
    \ translation_key='co',\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    state_class=SensorStateClass.MEASUREMENT, suggested_display_precision=0,\n\
    \    attrs=lambda data: {ATTR_LIMIT: data[f'{ATTR_API_CO}_{SUFFIX_LIMIT}'],\n\
    \    ATTR_PERCENT: round(data[f'{ATTR_API_CO}_{SUFFIX_PERCENT}'])}),\n    AirlySensorEntityDescription(key=ATTR_API_NO2,\
    \ device_class=\n    SensorDeviceClass.NITROGEN_DIOXIDE, native_unit_of_measurement=\n\
    \    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, suggested_display_precision=0, attrs=lambda data: {\n    ATTR_LIMIT:\
    \ data[f'{ATTR_API_NO2}_{SUFFIX_LIMIT}'], ATTR_PERCENT: round\n    (data[f'{ATTR_API_NO2}_{SUFFIX_PERCENT}'])}),\n\
    \    AirlySensorEntityDescription(key=ATTR_API_SO2, device_class=\n    SensorDeviceClass.SULPHUR_DIOXIDE,\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, suggested_display_precision=0, attrs=lambda data: {\n    ATTR_LIMIT:\
    \ data[f'{ATTR_API_SO2}_{SUFFIX_LIMIT}'], ATTR_PERCENT: round\n    (data[f'{ATTR_API_SO2}_{SUFFIX_PERCENT}'])}),\n\
    \    AirlySensorEntityDescription(key=ATTR_API_O3, device_class=\n    SensorDeviceClass.OZONE,\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, suggested_display_precision=0, attrs=lambda data: {\n    ATTR_LIMIT:\
    \ data[f'{ATTR_API_O3}_{SUFFIX_LIMIT}'], ATTR_PERCENT: round(\n    data[f'{ATTR_API_O3}_{SUFFIX_PERCENT}'])}))"
  - (AirlySensorEntityDescription, ...)
  - "(AndroidIPWebcamSensorEntityDescription(key='audio_connections', name=\n    'Audio\
    \ connections', icon='mdi:speaker', state_class=SensorStateClass.\n    TOTAL,\
    \ entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda ipcam:\n    ipcam.status_data.get('audio_connections')),\n\
    \    AndroidIPWebcamSensorEntityDescription(key='battery_level', name=\n    'Battery\
    \ level', device_class=SensorDeviceClass.BATTERY, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value_fn=lambda ipcam: ipcam.get_sensor_value('battery_level'),\
    \ unit_fn\n    =lambda ipcam: ipcam.get_sensor_unit('battery_level')),\n    AndroidIPWebcamSensorEntityDescription(key='battery_temp',\
    \ name=\n    'Battery temperature', icon='mdi:thermometer', state_class=\n   \
    \ SensorStateClass.MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n \
    \   value_fn=lambda ipcam: ipcam.get_sensor_value('battery_temp'), unit_fn=\n\
    \    lambda ipcam: ipcam.get_sensor_unit('battery_temp')),\n    AndroidIPWebcamSensorEntityDescription(key='battery_voltage',\
    \ name=\n    'Battery voltage', state_class=SensorStateClass.MEASUREMENT,\n  \
    \  entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda ipcam: ipcam\n \
    \   .get_sensor_value('battery_voltage'), unit_fn=lambda ipcam: ipcam.\n    get_sensor_unit('battery_voltage')),\n\
    \    AndroidIPWebcamSensorEntityDescription(key='light', name='Light level',\n\
    \    icon='mdi:flashlight', state_class=SensorStateClass.MEASUREMENT,\n    value_fn=lambda\
    \ ipcam: ipcam.get_sensor_value('light'), unit_fn=lambda\n    ipcam: ipcam.get_sensor_unit('light')),\n\
    \    AndroidIPWebcamSensorEntityDescription(key='motion', name='Motion',\n   \
    \ icon='mdi:run', state_class=SensorStateClass.MEASUREMENT, value_fn=lambda\n\
    \    ipcam: ipcam.get_sensor_value('motion'), unit_fn=lambda ipcam: ipcam.\n \
    \   get_sensor_unit('motion')), AndroidIPWebcamSensorEntityDescription(key=\n\
    \    'pressure', name='Pressure', icon='mdi:gauge', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda ipcam: ipcam.\n    get_sensor_value('pressure'), unit_fn=lambda\
    \ ipcam: ipcam.\n    get_sensor_unit('pressure')), AndroidIPWebcamSensorEntityDescription(\n\
    \    key='proximity', name='Proximity', icon='mdi:map-marker-radius',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda ipcam: ipcam.\n    get_sensor_value('proximity'), unit_fn=lambda\
    \ ipcam: ipcam.\n    get_sensor_unit('proximity')), AndroidIPWebcamSensorEntityDescription(\n\
    \    key='sound', name='Sound', icon='mdi:speaker', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda ipcam: ipcam.\n    get_sensor_value('sound'), unit_fn=lambda\
    \ ipcam: ipcam.get_sensor_unit(\n    'sound')), AndroidIPWebcamSensorEntityDescription(key=\n\
    \    'video_connections', name='Video connections', icon='mdi:eye',\n    state_class=SensorStateClass.TOTAL,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, value_fn=lambda ipcam: ipcam.status_data.get(\n\
    \    'video_connections')))"
  - (AndroidIPWebcamSensorEntityDescription, ...)
  - (Any, Any)
  - "(AquaLogicSensorEntityDescription(key='air_temp', name='Air Temperature',\n \
    \   unit_metric=UnitOfTemperature.CELSIUS, unit_imperial=UnitOfTemperature.\n\
    \    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE),\n    AquaLogicSensorEntityDescription(key='pool_temp',\
    \ name=\n    'Pool Temperature', unit_metric=UnitOfTemperature.CELSIUS,\n    unit_imperial=UnitOfTemperature.FAHRENHEIT,\
    \ icon='mdi:oil-temperature',\n    device_class=SensorDeviceClass.TEMPERATURE),\n\
    \    AquaLogicSensorEntityDescription(key='spa_temp', name='Spa Temperature',\n\
    \    unit_metric=UnitOfTemperature.CELSIUS, unit_imperial=UnitOfTemperature.\n\
    \    FAHRENHEIT, icon='mdi:oil-temperature', device_class=SensorDeviceClass.\n\
    \    TEMPERATURE), AquaLogicSensorEntityDescription(key='pool_chlorinator',\n\
    \    name='Pool Chlorinator', unit_metric=PERCENTAGE, unit_imperial=\n    PERCENTAGE,\
    \ icon='mdi:gauge'), AquaLogicSensorEntityDescription(key=\n    'spa_chlorinator',\
    \ name='Spa Chlorinator', unit_metric=PERCENTAGE,\n    unit_imperial=PERCENTAGE,\
    \ icon='mdi:gauge'),\n    AquaLogicSensorEntityDescription(key='salt_level', name='Salt\
    \ Level',\n    unit_metric='g/L', unit_imperial='PPM', icon='mdi:gauge'),\n  \
    \  AquaLogicSensorEntityDescription(key='pump_speed', name='Pump Speed',\n   \
    \ unit_metric=PERCENTAGE, unit_imperial=PERCENTAGE, icon=\n    'mdi:speedometer'),\
    \ AquaLogicSensorEntityDescription(key='pump_power',\n    name='Pump Power', unit_metric=UnitOfPower.WATT,\
    \ unit_imperial=\n    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER),\n\
    \    AquaLogicSensorEntityDescription(key='status', name='Status', icon=\n   \
    \ 'mdi:alert'))"
  - (AquaLogicSensorEntityDescription, ...)
  - "(ArwnSensor(topic + '/speed', 'Wind Speed', 'speed', unit, device_class=\n  \
    \  SensorDeviceClass.WIND_SPEED), ArwnSensor(topic + '/gust', 'Wind Gust',\n \
    \   'gust', unit, device_class=SensorDeviceClass.WIND_SPEED), ArwnSensor(\n  \
    \  topic + '/dir', 'Wind Direction', 'direction', DEGREE, 'mdi:compass'))"
  - "(ArwnSensor(topic + '/total', 'Total Rainfall', 'total', unit, device_class\n\
    \    =SensorDeviceClass.PRECIPITATION), ArwnSensor(topic + '/rate',\n    'Rainfall\
    \ Rate', 'rate', unit, device_class=SensorDeviceClass.\n    PRECIPITATION))"
  - "(AsusWrtSensorEntityDescription(key=SENSORS_CONNECTED_DEVICE[0],\n    translation_key='devices_connected',\
    \ icon='mdi:router-network',\n    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    UNIT_DEVICES), AsusWrtSensorEntityDescription(key=SENSORS_RATES[0],\n   \
    \ translation_key='download_speed', icon='mdi:download-network',\n    device_class=SensorDeviceClass.DATA_RATE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, native_unit_of_measurement=UnitOfDataRate.\n\
    \    MEGABITS_PER_SECOND, entity_registry_enabled_default=False,\n    suggested_display_precision=2,\
    \ factor=125000),\n    AsusWrtSensorEntityDescription(key=SENSORS_RATES[1], translation_key=\n\
    \    'upload_speed', icon='mdi:upload-network', device_class=\n    SensorDeviceClass.DATA_RATE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfDataRate.MEGABITS_PER_SECOND,\n\
    \    entity_registry_enabled_default=False, suggested_display_precision=2,\n \
    \   factor=125000), AsusWrtSensorEntityDescription(key=SENSORS_BYTES[0],\n   \
    \ translation_key='download', icon='mdi:download', state_class=\n    SensorStateClass.TOTAL_INCREASING,\
    \ native_unit_of_measurement=\n    UnitOfInformation.GIGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    entity_registry_enabled_default=False, suggested_display_precision=2,\n \
    \   factor=1000000000), AsusWrtSensorEntityDescription(key=SENSORS_BYTES[1],\n\
    \    translation_key='upload', icon='mdi:upload', state_class=\n    SensorStateClass.TOTAL_INCREASING,\
    \ native_unit_of_measurement=\n    UnitOfInformation.GIGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    entity_registry_enabled_default=False, suggested_display_precision=2,\n \
    \   factor=1000000000), AsusWrtSensorEntityDescription(key=SENSORS_LOAD_AVG\n\
    \    [0], translation_key='load_avg_1m', icon='mdi:cpu-32-bit', state_class=\n\
    \    SensorStateClass.MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, suggested_display_precision=1),\n\
    \    AsusWrtSensorEntityDescription(key=SENSORS_LOAD_AVG[1], translation_key\n\
    \    ='load_avg_5m', icon='mdi:cpu-32-bit', state_class=SensorStateClass.\n  \
    \  MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ suggested_display_precision=1),\n    AsusWrtSensorEntityDescription(key=SENSORS_LOAD_AVG[2],\
    \ translation_key\n    ='load_avg_15m', icon='mdi:cpu-32-bit', state_class=SensorStateClass.\n\
    \    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ suggested_display_precision=1),\n    AsusWrtSensorEntityDescription(key=SENSORS_TEMPERATURES[0],\n\
    \    translation_key='24ghz_temperature', state_class=SensorStateClass.\n    MEASUREMENT,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n\
    \    suggested_display_precision=1), AsusWrtSensorEntityDescription(key=\n   \
    \ SENSORS_TEMPERATURES[1], translation_key='5ghz_temperature',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, entity_category=EntityCategory.DIAGNOSTIC,\n \
    \   entity_registry_enabled_default=False, suggested_display_precision=1),\n \
    \   AsusWrtSensorEntityDescription(key=SENSORS_TEMPERATURES[2],\n    translation_key='cpu_temperature',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n    suggested_display_precision=1))"
  - (AsusWrtSensorEntityDescription, ...)
  - "(AsyncHeatingThermostat, AsyncHeatingThermostatCompact,\n    AsyncHeatingThermostatEvo)"
  - "(AsyncLightSensor, AsyncMotionDetectorIndoor, AsyncMotionDetectorOutdoor,\n \
    \   AsyncMotionDetectorPushButton, AsyncPresenceDetectorIndoor,\n    AsyncWeatherSensor,\
    \ AsyncWeatherSensorPlus, AsyncWeatherSensorPro)"
  - "(AsyncPlugableSwitchMeasuring, AsyncBrandSwitchMeasuring,\n    AsyncFullFlushSwitchMeasuring)"
  - (AsyncRoomControlDeviceAnalog,)
  - "(AsyncTemperatureHumiditySensorDisplay,\n    AsyncTemperatureHumiditySensorWithoutDisplay,\n\
    \    AsyncTemperatureHumiditySensorOutdoor, AsyncWeatherSensor,\n    AsyncWeatherSensorPlus,\
    \ AsyncWeatherSensorPro)"
  - (AsyncWeatherSensor, AsyncWeatherSensorPlus, AsyncWeatherSensorPro)
  - (AsyncWeatherSensorPlus, AsyncWeatherSensorPro)
  - "(AttributeSensorDescription(name='Current Power', device_class=\n    SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ key='current_power_watts',\n    unique_id_suffix='currentpower', state_conversion=lambda\
    \ state: round(\n    cast(float, state), 2)), AttributeSensorDescription(name='Today\
    \ Energy',\n    device_class=SensorDeviceClass.ENERGY, state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR,\
    \ key='today_kwh', unique_id_suffix='todaymw',\n    state_conversion=lambda state:\
    \ round(cast(float, state), 2)))"
  - "(AwairSensorEntityDescription(key=API_HUMID, device_class=SensorDeviceClass\n\
    \    .HUMIDITY, native_unit_of_measurement=PERCENTAGE, unique_id_tag='HUMID',\n\
    \    state_class=SensorStateClass.MEASUREMENT), AwairSensorEntityDescription\n\
    \    (key=API_LUX, device_class=SensorDeviceClass.ILLUMINANCE,\n    native_unit_of_measurement=LIGHT_LUX,\
    \ unique_id_tag='illuminance',\n    state_class=SensorStateClass.MEASUREMENT),\
    \ AwairSensorEntityDescription\n    (key=API_SPL_A, device_class=SensorDeviceClass.SOUND_PRESSURE,\n\
    \    native_unit_of_measurement=UnitOfSoundPressure.WEIGHTED_DECIBEL_A,\n    translation_key='sound_level',\
    \ unique_id_tag='sound_level', state_class\n    =SensorStateClass.MEASUREMENT),\
    \ AwairSensorEntityDescription(key=\n    API_VOC, icon='mdi:molecule', device_class=SensorDeviceClass.\n\
    \    VOLATILE_ORGANIC_COMPOUNDS_PARTS, native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_BILLION,\
    \ unique_id_tag='VOC', state_class=\n    SensorStateClass.MEASUREMENT), AwairSensorEntityDescription(key=\n\
    \    API_TEMP, device_class=SensorDeviceClass.TEMPERATURE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ unique_id_tag=\n    'TEMP', state_class=SensorStateClass.MEASUREMENT),\n   \
    \ AwairSensorEntityDescription(key=API_CO2, device_class=\n    SensorDeviceClass.CO2,\
    \ native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION, unique_id_tag='CO2',\
    \ state_class=\n    SensorStateClass.MEASUREMENT))"
  - "(AwairSensorEntityDescription(key=API_PM25, device_class=SensorDeviceClass.\n\
    \    PM25, native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\
    \ unique_id_tag='PM25',\n    state_class=SensorStateClass.MEASUREMENT), AwairSensorEntityDescription\n\
    \    (key=API_PM10, device_class=SensorDeviceClass.PM10,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    unique_id_tag='PM10', state_class=SensorStateClass.MEASUREMENT))"
  - (AwairSensorEntityDescription, ...)
  - "(BAFSensorDescription(key='current_rpm', translation_key='current_rpm',\n   \
    \ native_unit_of_measurement=REVOLUTIONS_PER_MINUTE,\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, value_fn=lambda device: cast(int\
    \ | None, device.current_rpm\n    )), BAFSensorDescription(key='target_rpm', translation_key='target_rpm',\n\
    \    native_unit_of_measurement=REVOLUTIONS_PER_MINUTE,\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, value_fn=lambda device: cast(int\
    \ | None, device.target_rpm)\n    ), BAFSensorDescription(key='wifi_ssid', translation_key='wifi_ssid',\n\
    \    entity_registry_enabled_default=False, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, value_fn=lambda device: cast(int | None, device.wifi_ssid)),\n\
    \    BAFSensorDescription(key='ip_address', translation_key='ip_address',\n  \
    \  entity_registry_enabled_default=False, entity_category=EntityCategory.\n  \
    \  DIAGNOSTIC, value_fn=lambda device: cast(str | None, device.ip_address)))"
  - "(BAFSensorDescription(key='humidity', native_unit_of_measurement=PERCENTAGE,\n\
    \    device_class=SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.\n\
    \    MEASUREMENT, value_fn=lambda device: cast(float | None, device.humidity)),)"
  - "(BAFSensorDescription(key='temperature', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda device: cast(\n    float | None, device.temperature)),)"
  - (BLEError, NotConnectedError, NotificationTimeout)
  - (BTHomeExtendedSensorDeviceClass.RAW, None)
  - (BTHomeExtendedSensorDeviceClass.TEXT, None)
  - "(BTHomeSensorDeviceClass.ACCELERATION, Units.\n    ACCELERATION_METERS_PER_SQUARE_SECOND)"
  - (BTHomeSensorDeviceClass.BATTERY, Units.PERCENTAGE)
  - (BTHomeSensorDeviceClass.CO2, Units.CONCENTRATION_PARTS_PER_MILLION)
  - (BTHomeSensorDeviceClass.COUNT, None)
  - (BTHomeSensorDeviceClass.CURRENT, Units.ELECTRIC_CURRENT_AMPERE)
  - (BTHomeSensorDeviceClass.DEW_POINT, Units.TEMP_CELSIUS)
  - (BTHomeSensorDeviceClass.DISTANCE, Units.LENGTH_METERS)
  - (BTHomeSensorDeviceClass.DISTANCE, Units.LENGTH_MILLIMETERS)
  - (BTHomeSensorDeviceClass.DURATION, Units.TIME_SECONDS)
  - (BTHomeSensorDeviceClass.ENERGY, Units.ENERGY_KILO_WATT_HOUR)
  - (BTHomeSensorDeviceClass.GAS, Units.VOLUME_CUBIC_METERS)
  - (BTHomeSensorDeviceClass.GYROSCOPE, Units.GYROSCOPE_DEGREES_PER_SECOND)
  - (BTHomeSensorDeviceClass.HUMIDITY, Units.PERCENTAGE)
  - (BTHomeSensorDeviceClass.ILLUMINANCE, Units.LIGHT_LUX)
  - (BTHomeSensorDeviceClass.MASS, Units.MASS_KILOGRAMS)
  - (BTHomeSensorDeviceClass.MASS, Units.MASS_POUNDS)
  - (BTHomeSensorDeviceClass.MOISTURE, Units.PERCENTAGE)
  - (BTHomeSensorDeviceClass.PACKET_ID, None)
  - (BTHomeSensorDeviceClass.PM10, Units.CONCENTRATION_MICROGRAMS_PER_CUBIC_METER)
  - (BTHomeSensorDeviceClass.PM25, Units.CONCENTRATION_MICROGRAMS_PER_CUBIC_METER)
  - (BTHomeSensorDeviceClass.POWER, Units.POWER_WATT)
  - (BTHomeSensorDeviceClass.PRESSURE, Units.PRESSURE_MBAR)
  - (BTHomeSensorDeviceClass.ROTATION, Units.DEGREE)
  - "(BTHomeSensorDeviceClass.SIGNAL_STRENGTH, Units.\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT)"
  - (BTHomeSensorDeviceClass.SPEED, Units.SPEED_METERS_PER_SECOND)
  - (BTHomeSensorDeviceClass.TEMPERATURE, Units.TEMP_CELSIUS)
  - (BTHomeSensorDeviceClass.TIMESTAMP, None)
  - (BTHomeSensorDeviceClass.UV_INDEX, None)
  - "(BTHomeSensorDeviceClass.VOLATILE_ORGANIC_COMPOUNDS, Units.\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER)"
  - (BTHomeSensorDeviceClass.VOLTAGE, Units.ELECTRIC_POTENTIAL_VOLT)
  - (BTHomeSensorDeviceClass.VOLUME, Units.VOLUME_LITERS)
  - (BTHomeSensorDeviceClass.VOLUME, Units.VOLUME_MILLILITERS)
  - "(BTHomeSensorDeviceClass.VOLUME_FLOW_RATE, Units.\n    VOLUME_FLOW_RATE_CUBIC_METERS_PER_HOUR)"
  - (BTHomeSensorDeviceClass.WATER, Units.VOLUME_LITERS)
  - (BlueMaestroSensorDeviceClass.BATTERY, Units.PERCENTAGE)
  - (BlueMaestroSensorDeviceClass.DEW_POINT, Units.TEMP_CELSIUS)
  - (BlueMaestroSensorDeviceClass.HUMIDITY, Units.PERCENTAGE)
  - (BlueMaestroSensorDeviceClass.PRESSURE, Units.PRESSURE_MBAR)
  - "(BlueMaestroSensorDeviceClass.SIGNAL_STRENGTH, Units.\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT)"
  - (BlueMaestroSensorDeviceClass.TEMPERATURE, Units.TEMP_CELSIUS)
  - "(BrotherSensorEntityDescription(key='status', icon='mdi:printer',\n    translation_key='status',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value=lambda data: data.status),\
    \ BrotherSensorEntityDescription(key=\n    'page_counter', icon='mdi:file-document-outline',\
    \ translation_key=\n    'page_counter', native_unit_of_measurement=UNIT_PAGES,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    value=lambda data: data.page_counter), BrotherSensorEntityDescription(\n\
    \    key='bw_counter', icon='mdi:file-document-outline', translation_key=\n  \
    \  'bw_pages', native_unit_of_measurement=UNIT_PAGES, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value=lambda data: data.bw_counter),\
    \ BrotherSensorEntityDescription(key\n    ='color_counter', icon='mdi:file-document-outline',\
    \ translation_key=\n    'color_pages', native_unit_of_measurement=UNIT_PAGES,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    value=lambda data: data.color_counter), BrotherSensorEntityDescription(\n\
    \    key='duplex_unit_pages_counter', icon='mdi:file-document-outline',\n    translation_key='duplex_unit_page_counter',\
    \ native_unit_of_measurement=\n    UNIT_PAGES, state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value=lambda data: data.\n\
    \    duplex_unit_pages_counter), BrotherSensorEntityDescription(key=\n    'drum_remaining_life',\
    \ icon='mdi:chart-donut', translation_key=\n    'drum_remaining_life', native_unit_of_measurement=PERCENTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value=lambda data: data.drum_remaining_life),\n    BrotherSensorEntityDescription(key='drum_remaining_pages',\
    \ icon=\n    'mdi:chart-donut', translation_key='drum_remaining_pages',\n    native_unit_of_measurement=UNIT_PAGES,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\
    \ value=lambda\n    data: data.drum_remaining_pages), BrotherSensorEntityDescription(key=\n\
    \    'drum_counter', icon='mdi:chart-donut', translation_key=\n    'drum_page_counter',\
    \ native_unit_of_measurement=UNIT_PAGES, state_class\n    =SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, value=lambda data: data.drum_counter),\n\
    \    BrotherSensorEntityDescription(key='black_drum_remaining_life', icon=\n \
    \   'mdi:chart-donut', translation_key='black_drum_remaining_life',\n    native_unit_of_measurement=PERCENTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\
    \ value=lambda\n    data: data.black_drum_remaining_life), BrotherSensorEntityDescription(\n\
    \    key='black_drum_remaining_pages', icon='mdi:chart-donut',\n    translation_key='black_drum_remaining_pages',\n\
    \    native_unit_of_measurement=UNIT_PAGES, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    data:\
    \ data.black_drum_remaining_pages), BrotherSensorEntityDescription(\n    key='black_drum_counter',\
    \ icon='mdi:chart-donut', translation_key=\n    'black_drum_page_counter', native_unit_of_measurement=UNIT_PAGES,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value=lambda data: data.black_drum_counter),\n    BrotherSensorEntityDescription(key='cyan_drum_remaining_life',\
    \ icon=\n    'mdi:chart-donut', translation_key='cyan_drum_remaining_life',\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    data:\
    \ data.cyan_drum_remaining_life), BrotherSensorEntityDescription(\n    key='cyan_drum_remaining_pages',\
    \ icon='mdi:chart-donut',\n    translation_key='cyan_drum_remaining_pages', native_unit_of_measurement\n\
    \    =UNIT_PAGES, state_class=SensorStateClass.MEASUREMENT, entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, value=lambda data: data.\n    cyan_drum_remaining_pages),\
    \ BrotherSensorEntityDescription(key=\n    'cyan_drum_counter', icon='mdi:chart-donut',\
    \ translation_key=\n    'cyan_drum_page_counter', native_unit_of_measurement=UNIT_PAGES,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value=lambda data: data.cyan_drum_counter),\n    BrotherSensorEntityDescription(key='magenta_drum_remaining_life',\
    \ icon=\n    'mdi:chart-donut', translation_key='magenta_drum_remaining_life',\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    data:\
    \ data.magenta_drum_remaining_life), BrotherSensorEntityDescription\n    (key='magenta_drum_remaining_pages',\
    \ icon='mdi:chart-donut',\n    translation_key='magenta_drum_remaining_pages',\n\
    \    native_unit_of_measurement=UNIT_PAGES, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    data:\
    \ data.magenta_drum_remaining_pages),\n    BrotherSensorEntityDescription(key='magenta_drum_counter',\
    \ icon=\n    'mdi:chart-donut', translation_key='magenta_drum_page_counter',\n\
    \    native_unit_of_measurement=UNIT_PAGES, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    data:\
    \ data.magenta_drum_counter), BrotherSensorEntityDescription(key=\n    'yellow_drum_remaining_life',\
    \ icon='mdi:chart-donut', translation_key=\n    'yellow_drum_remaining_life',\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value=lambda data: data.\n\
    \    yellow_drum_remaining_life), BrotherSensorEntityDescription(key=\n    'yellow_drum_remaining_pages',\
    \ icon='mdi:chart-donut', translation_key=\n    'yellow_drum_remaining_pages',\
    \ native_unit_of_measurement=UNIT_PAGES,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value=lambda data: data.\n\
    \    yellow_drum_remaining_pages), BrotherSensorEntityDescription(key=\n    'yellow_drum_counter',\
    \ icon='mdi:chart-donut', translation_key=\n    'yellow_drum_page_counter', native_unit_of_measurement=UNIT_PAGES,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value=lambda data: data.yellow_drum_counter),\n    BrotherSensorEntityDescription(key='belt_unit_remaining_life',\
    \ icon=\n    'mdi:current-ac', translation_key='belt_unit_remaining_life',\n \
    \   native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n   \
    \ MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    data:\
    \ data.belt_unit_remaining_life), BrotherSensorEntityDescription(\n    key='fuser_remaining_life',\
    \ icon='mdi:water-outline', translation_key=\n    'fuser_remaining_life', native_unit_of_measurement=PERCENTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value=lambda data: data.fuser_remaining_life\n    ), BrotherSensorEntityDescription(key='laser_remaining_life',\
    \ icon=\n    'mdi:spotlight-beam', translation_key='laser_remaining_life',\n \
    \   native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n   \
    \ MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    data:\
    \ data.laser_remaining_life), BrotherSensorEntityDescription(key=\n    'pf_kit_1_remaining_life',\
    \ icon='mdi:printer-3d', translation_key=\n    'pf_kit_1_remaining_life', native_unit_of_measurement=PERCENTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value=lambda data: data.\n    pf_kit_1_remaining_life), BrotherSensorEntityDescription(key=\n\
    \    'pf_kit_mp_remaining_life', icon='mdi:printer-3d', translation_key=\n   \
    \ 'pf_kit_mp_remaining_life', native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value=lambda data: data.\n\
    \    pf_kit_mp_remaining_life), BrotherSensorEntityDescription(key=\n    'black_toner_remaining',\
    \ icon='mdi:printer-3d-nozzle', translation_key=\n    'black_toner_remaining',\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value=lambda data: data.\n\
    \    black_toner_remaining), BrotherSensorEntityDescription(key=\n    'cyan_toner_remaining',\
    \ icon='mdi:printer-3d-nozzle', translation_key=\n    'cyan_toner_remaining',\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value=lambda data: data.cyan_toner_remaining\n\
    \    ), BrotherSensorEntityDescription(key='magenta_toner_remaining', icon=\n\
    \    'mdi:printer-3d-nozzle', translation_key='magenta_toner_remaining',\n   \
    \ native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    data: data.magenta_toner_remaining),\
    \ BrotherSensorEntityDescription(key\n    ='yellow_toner_remaining', icon='mdi:printer-3d-nozzle',\n\
    \    translation_key='yellow_toner_remaining', native_unit_of_measurement=\n \
    \   PERCENTAGE, state_class=SensorStateClass.MEASUREMENT, entity_category=\n \
    \   EntityCategory.DIAGNOSTIC, value=lambda data: data.\n    yellow_toner_remaining),\
    \ BrotherSensorEntityDescription(key=\n    'black_ink_remaining', icon='mdi:printer-3d-nozzle',\
    \ translation_key=\n    'black_ink_remaining', native_unit_of_measurement=PERCENTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value=lambda data: data.black_ink_remaining),\n    BrotherSensorEntityDescription(key='cyan_ink_remaining',\
    \ icon=\n    'mdi:printer-3d-nozzle', translation_key='cyan_ink_remaining',\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    data:\
    \ data.cyan_ink_remaining), BrotherSensorEntityDescription(key=\n    'magenta_ink_remaining',\
    \ icon='mdi:printer-3d-nozzle', translation_key=\n    'magenta_ink_remaining',\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value=lambda data: data.\n\
    \    magenta_ink_remaining), BrotherSensorEntityDescription(key=\n    'yellow_ink_remaining',\
    \ icon='mdi:printer-3d-nozzle', translation_key=\n    'yellow_ink_remaining',\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value=lambda data: data.yellow_ink_remaining\n\
    \    ), BrotherSensorEntityDescription(key='uptime', translation_key=\n    'last_restart',\
    \ entity_registry_enabled_default=False, device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value=lambda data: data.uptime))"
  - (BrotherSensorEntityDescription, ...)
  - (CHARGER_ENERGY_PRICE_KEY, CHARGER_DEPOT_PRICE_KEY)
  - "(CO2SensorEntityDescription(key='carbonIntensity', translation_key=\n    'carbon_intensity',\
    \ unique_id='co2intensity'),\n    CO2SensorEntityDescription(key='fossilFuelPercentage',\
    \ translation_key=\n    'fossil_fuel_percentage', native_unit_of_measurement=PERCENTAGE))"
  - "(CONF_AVAILABILITY, CONF_DEVICE_CLASS, CONF_ICON, CONF_PICTURE,\n    CONF_UNIQUE_ID,\
    \ CONF_STATE_CLASS, CONF_UNIT_OF_MEASUREMENT)"
  - (CONF_FIVE_MINUTE, CONF_CURRENT_HOUR_AVERAGE)
  - (CONF_STATE,)
  - (CONNECTION_BLUETOOTH, address)
  - (CONNECTION_BLUETOOTH, airthings_device.address)
  - (CONNECTION_BLUETOOTH, medcom_device.address)
  - (CONNECTION_NETWORK_MAC, mac)
  - (CONSUMPTION_ID, CONSUMPTION_NAME)
  - (Capability.energy_meter, Capability.power_meter)
  - (ClientError, AsyncIOTimeoutError, OSError)
  - "(ComfoconnectSensorEntityDescription(key=ATTR_CURRENT_TEMPERATURE,\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, name='Inside temperature',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, sensor_id=\n    SENSOR_TEMPERATURE_EXTRACT,\
    \ multiplier=0.1),\n    ComfoconnectSensorEntityDescription(key=ATTR_CURRENT_HUMIDITY,\n\
    \    device_class=SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.\n\
    \    MEASUREMENT, name='Inside humidity', native_unit_of_measurement=\n    PERCENTAGE,\
    \ sensor_id=SENSOR_HUMIDITY_EXTRACT),\n    ComfoconnectSensorEntityDescription(key=ATTR_CURRENT_RMOT,\
    \ device_class\n    =SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.\n\
    \    MEASUREMENT, name='Current RMOT', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ sensor_id=SENSOR_CURRENT_RMOT, multiplier=\n    0.1), ComfoconnectSensorEntityDescription(key=ATTR_OUTSIDE_TEMPERATURE,\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ name='Outside temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ sensor_id=\n    SENSOR_TEMPERATURE_OUTDOOR, multiplier=0.1),\n    ComfoconnectSensorEntityDescription(key=ATTR_OUTSIDE_HUMIDITY,\n\
    \    device_class=SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.\n\
    \    MEASUREMENT, name='Outside humidity', native_unit_of_measurement=\n    PERCENTAGE,\
    \ sensor_id=SENSOR_HUMIDITY_OUTDOOR),\n    ComfoconnectSensorEntityDescription(key=ATTR_SUPPLY_TEMPERATURE,\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ name='Supply temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ sensor_id=\n    SENSOR_TEMPERATURE_SUPPLY, multiplier=0.1),\n    ComfoconnectSensorEntityDescription(key=ATTR_SUPPLY_HUMIDITY,\n\
    \    device_class=SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.\n\
    \    MEASUREMENT, name='Supply humidity', native_unit_of_measurement=\n    PERCENTAGE,\
    \ sensor_id=SENSOR_HUMIDITY_SUPPLY),\n    ComfoconnectSensorEntityDescription(key=ATTR_SUPPLY_FAN_SPEED,\n\
    \    state_class=SensorStateClass.MEASUREMENT, name='Supply fan speed',\n    native_unit_of_measurement=REVOLUTIONS_PER_MINUTE,\
    \ icon='mdi:fan-plus',\n    sensor_id=SENSOR_FAN_SUPPLY_SPEED), ComfoconnectSensorEntityDescription\n\
    \    (key=ATTR_SUPPLY_FAN_DUTY, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  name='Supply fan duty', native_unit_of_measurement=PERCENTAGE, icon=\n    'mdi:fan-plus',\
    \ sensor_id=SENSOR_FAN_SUPPLY_DUTY),\n    ComfoconnectSensorEntityDescription(key=ATTR_EXHAUST_FAN_SPEED,\n\
    \    state_class=SensorStateClass.MEASUREMENT, name='Exhaust fan speed',\n   \
    \ native_unit_of_measurement=REVOLUTIONS_PER_MINUTE, icon='mdi:fan-minus',\n \
    \   sensor_id=SENSOR_FAN_EXHAUST_SPEED),\n    ComfoconnectSensorEntityDescription(key=ATTR_EXHAUST_FAN_DUTY,\n\
    \    state_class=SensorStateClass.MEASUREMENT, name='Exhaust fan duty',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:fan-minus', sensor_id=\n    SENSOR_FAN_EXHAUST_DUTY), ComfoconnectSensorEntityDescription(key=\n\
    \    ATTR_EXHAUST_TEMPERATURE, device_class=SensorDeviceClass.TEMPERATURE,\n \
    \   state_class=SensorStateClass.MEASUREMENT, name='Exhaust temperature',\n  \
    \  native_unit_of_measurement=UnitOfTemperature.CELSIUS, sensor_id=\n    SENSOR_TEMPERATURE_EXHAUST,\
    \ multiplier=0.1),\n    ComfoconnectSensorEntityDescription(key=ATTR_EXHAUST_HUMIDITY,\n\
    \    device_class=SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.\n\
    \    MEASUREMENT, name='Exhaust humidity', native_unit_of_measurement=\n    PERCENTAGE,\
    \ sensor_id=SENSOR_HUMIDITY_EXHAUST),\n    ComfoconnectSensorEntityDescription(key=ATTR_AIR_FLOW_SUPPLY,\n\
    \    state_class=SensorStateClass.MEASUREMENT, name='Supply airflow',\n    native_unit_of_measurement=UnitOfVolumeFlowRate.CUBIC_METERS_PER_HOUR,\n\
    \    icon='mdi:fan-plus', sensor_id=SENSOR_FAN_SUPPLY_FLOW),\n    ComfoconnectSensorEntityDescription(key=ATTR_AIR_FLOW_EXHAUST,\n\
    \    state_class=SensorStateClass.MEASUREMENT, name='Exhaust airflow',\n    native_unit_of_measurement=UnitOfVolumeFlowRate.CUBIC_METERS_PER_HOUR,\n\
    \    icon='mdi:fan-minus', sensor_id=SENSOR_FAN_EXHAUST_FLOW),\n    ComfoconnectSensorEntityDescription(key=ATTR_BYPASS_STATE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, name='Bypass state',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:camera-iris',\n    sensor_id=SENSOR_BYPASS_STATE), ComfoconnectSensorEntityDescription(key\n\
    \    =ATTR_DAYS_TO_REPLACE_FILTER, name='Days to replace filter',\n    native_unit_of_measurement=UnitOfTime.DAYS,\
    \ icon='mdi:calendar',\n    sensor_id=SENSOR_DAYS_TO_REPLACE_FILTER),\n    ComfoconnectSensorEntityDescription(key=ATTR_POWER_CURRENT,\n\
    \    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n   \
    \ MEASUREMENT, name='Power usage', native_unit_of_measurement=UnitOfPower\n  \
    \  .WATT, sensor_id=SENSOR_POWER_CURRENT),\n    ComfoconnectSensorEntityDescription(key=ATTR_POWER_TOTAL,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    name='Energy total', native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR,\
    \ sensor_id=SENSOR_POWER_TOTAL),\n    ComfoconnectSensorEntityDescription(key=ATTR_PREHEATER_POWER_CURRENT,\n\
    \    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n   \
    \ MEASUREMENT, name='Preheater power usage', native_unit_of_measurement=\n   \
    \ UnitOfPower.WATT, sensor_id=SENSOR_PREHEATER_POWER_CURRENT),\n    ComfoconnectSensorEntityDescription(key=ATTR_PREHEATER_POWER_TOTAL,\n\
    \    device_class=SensorDeviceClass.ENERGY, state_class=SensorStateClass.\n  \
    \  TOTAL_INCREASING, name='Preheater energy total',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ sensor_id=\n    SENSOR_PREHEATER_POWER_TOTAL))"
  - (ConnectError, DataError, ServiceError)
  - (ConnectTimeout, HTTPError)
  - (ConnectionError, ValueError)
  - (ControlEvent, SensorEvent)
  - (ControllerStatus, str)
  - (DEVICE.CONTROLLER, GROUP.SENSOR)
  - (DEVICE.INTELLICHEM, GROUP.CONFIGURATION)
  - (DEVICE.INTELLICHEM, GROUP.DOSE_STATUS)
  - (DEVICE.INTELLICHEM, GROUP.SENSOR)
  - (DEVICE.PUMP, pump_index)
  - (DEVICE.PUMP,)
  - (DEVICE.SCG, GROUP.CONFIGURATION)
  - (DEVICE.SCG, GROUP.SENSOR)
  - (DOMAIN, '_'.join(self._device_name.split(' ')))
  - (DOMAIN, 'measure-id', self.station_id)
  - (DOMAIN, DOMAIN)
  - (DOMAIN, _device_id)
  - (DOMAIN, airthings_device.device_id)
  - (DOMAIN, api.host, api.mac_address)
  - (DOMAIN, api_key)
  - (DOMAIN, cast(str, config_entry.unique_id))
  - (DOMAIN, cast(str, coordinator.data.user.reference_code))
  - (DOMAIN, component[ATTR_SERIAL])
  - (DOMAIN, config_entry.entry_id)
  - (DOMAIN, coordinator.cloud_id)
  - (DOMAIN, coordinator.config_entry.entry_id)
  - (DOMAIN, coordinator.data.device.n2g_id)
  - (DOMAIN, coordinator.data.serial)
  - (DOMAIN, coordinator.entry_id)
  - (DOMAIN, coordinator.repository)
  - (DOMAIN, coordinator.solar_net.solar_net_device_id)
  - (DOMAIN, coordinator.unique_id)
  - (DOMAIN, county)
  - (DOMAIN, data_service.site_id)
  - (DOMAIN, device.deviceid)
  - (DOMAIN, device.mac)
  - (DOMAIN, device.serial_number)
  - (DOMAIN, device.unique_id)
  - (DOMAIN, device['uid'])
  - (DOMAIN, device_data['serial']['value'])
  - (DOMAIN, device_id)
  - (DOMAIN, device_serial)
  - (DOMAIN, disk['id'])
  - (DOMAIN, domain)
  - (DOMAIN, enpower_data.serial_number)
  - (DOMAIN, entry.entry_id)
  - (DOMAIN, entry_id)
  - (DOMAIN, f'{coordinator.config_entry.entry_id}')
  - (DOMAIN, f'{coordinator.config_entry.entry_id}_{description.service_type}')
  - (DOMAIN, f'{coordinator.config_entry.entry_id}_{service}')
  - (DOMAIN, f'{coordinator.host}:{coordinator.port}')
  - (DOMAIN, f'{coordinator.latitude}-{coordinator.longitude}')
  - (DOMAIN, f'{device}_{device_group}')
  - (DOMAIN, f'{entry.entry_id}')
  - (DOMAIN, f'{entry_id}_{self._attr_unique_id}')
  - (DOMAIN, f'{license_plate}')
  - (DOMAIN, f'{self._device_id}-{self._number}')
  - (DOMAIN, f'{split_unique_id[0]}-{split_unique_id[1]}')
  - (DOMAIN, f'{user_profile_id}_{device.id}')
  - (DOMAIN, gateway_device_id)
  - (DOMAIN, gw_dev.gw_id)
  - (DOMAIN, hostname)
  - (DOMAIN, hub.hub_info[ATTR_SERIAL])
  - (DOMAIN, identifier)
  - (DOMAIN, meter.meter_id)
  - (DOMAIN, meter_uid)
  - (DOMAIN, mill_device.device_id)
  - (DOMAIN, pb_provider.pushbullet.user_info['iden'])
  - (DOMAIN, pooldata['ICO']['serial_number'])
  - (DOMAIN, probe.device_id)
  - (DOMAIN, router.mac)
  - (DOMAIN, said)
  - (DOMAIN, self._coinbase_data.user_id)
  - (DOMAIN, self._device.uuid)
  - (DOMAIN, self._electricity_id)
  - (DOMAIN, self._server.machine_identifier)
  - (DOMAIN, self._server_id)
  - "(DOMAIN, self.config_entry.entry_id, self.config_entry.data[CONF_STATION][\n\
    \    'id'], self.config_entry.data[CONF_STATION]['type'])"
  - (DOMAIN, self.coordinator.config_entry.entry_id)
  - (DOMAIN, self.coordinator.entry.data[CONF_GIID])
  - (DOMAIN, self.envoy_serial_num)
  - (DOMAIN, self.executor.get_gateway_id())
  - (DOMAIN, self.platform.config_entry.unique_id)
  - (DOMAIN, self.power_plug.id)
  - (DOMAIN, self.serial_number)
  - (DOMAIN, self.server_id)
  - (DOMAIN, sense_monitor_id)
  - (DOMAIN, sensor.location.id)
  - (DOMAIN, sensor.sensor_id)
  - (DOMAIN, serial)
  - (DOMAIN, serial_number)
  - (DOMAIN, server_unique_id)
  - (DOMAIN, service[SERVICE_ID])
  - (DOMAIN, service_location.device_serial_number)
  - (DOMAIN, station_id)
  - (DOMAIN, storage_data['serial']['value'])
  - (DOMAIN, str(coordinator.data.station_id))
  - (DOMAIN, str(coordinator.gios.station_id))
  - (DOMAIN, str(device.device_id))
  - (DOMAIN, str(sensor_id))
  - (DOMAIN, str(system_id))
  - (DOMAIN, system_info.mac_addr)
  - (DOMAIN, unique_id)
  - (DOMAIN, unique_id_prefix)
  - (DPType.INTEGER, DPType.STRING, DPType.ENUM, DPType.JSON, DPType.RAW)
  - "(DSMRSensorEntityDescription(key='current_electricity_usage',\n    translation_key='current_electricity_usage',\
    \ obis_reference=\n    obis_references.CURRENT_ELECTRICITY_USAGE, device_class=\n\
    \    SensorDeviceClass.POWER, force_update=True, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ DSMRSensorEntityDescription(key=\n    'current_electricity_delivery', translation_key=\n\
    \    'current_electricity_delivery', obis_reference=obis_references.\n    CURRENT_ELECTRICITY_DELIVERY,\
    \ device_class=SensorDeviceClass.POWER,\n    force_update=True, state_class=SensorStateClass.MEASUREMENT),\n\
    \    DSMRSensorEntityDescription(key='electricity_active_tariff',\n    translation_key='electricity_active_tariff',\
    \ obis_reference=\n    obis_references.ELECTRICITY_ACTIVE_TARIFF, dsmr_versions={'2.2',\
    \ '4',\n    '5', '5B', '5L'}, device_class=SensorDeviceClass.ENUM, options=['low',\n\
    \    'normal'], icon='mdi:flash'), DSMRSensorEntityDescription(key=\n    'electricity_used_tariff_1',\
    \ translation_key=\n    'electricity_used_tariff_1', obis_reference=obis_references.\n\
    \    ELECTRICITY_USED_TARIFF_1, dsmr_versions={'2.2', '4', '5', '5B', '5L'},\n\
    \    device_class=SensorDeviceClass.ENERGY, force_update=True, state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING), DSMRSensorEntityDescription(key=\n  \
    \  'electricity_used_tariff_2', translation_key=\n    'electricity_used_tariff_2',\
    \ obis_reference=obis_references.\n    ELECTRICITY_USED_TARIFF_2, dsmr_versions={'2.2',\
    \ '4', '5', '5B', '5L'},\n    force_update=True, device_class=SensorDeviceClass.ENERGY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), DSMRSensorEntityDescription(key=\n\
    \    'electricity_delivered_tariff_1', translation_key=\n    'electricity_delivered_tariff_1',\
    \ obis_reference=obis_references.\n    ELECTRICITY_DELIVERED_TARIFF_1, dsmr_versions={'2.2',\
    \ '4', '5', '5B',\n    '5L'}, force_update=True, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING),\n    DSMRSensorEntityDescription(key='electricity_delivered_tariff_2',\n\
    \    translation_key='electricity_delivered_tariff_2', obis_reference=\n    obis_references.ELECTRICITY_DELIVERED_TARIFF_2,\
    \ dsmr_versions={'2.2',\n    '4', '5', '5B', '5L'}, force_update=True, device_class=\n\
    \    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING\n\
    \    ), DSMRSensorEntityDescription(key=\n    'instantaneous_active_power_l1_positive',\
    \ translation_key=\n    'instantaneous_active_power_l1_positive', obis_reference=\n\
    \    obis_references.INSTANTANEOUS_ACTIVE_POWER_L1_POSITIVE, device_class=\n \
    \   SensorDeviceClass.POWER, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ DSMRSensorEntityDescription(\n    key='instantaneous_active_power_l2_positive',\
    \ translation_key=\n    'instantaneous_active_power_l2_positive', obis_reference=\n\
    \    obis_references.INSTANTANEOUS_ACTIVE_POWER_L2_POSITIVE, device_class=\n \
    \   SensorDeviceClass.POWER, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ DSMRSensorEntityDescription(\n    key='instantaneous_active_power_l3_positive',\
    \ translation_key=\n    'instantaneous_active_power_l3_positive', obis_reference=\n\
    \    obis_references.INSTANTANEOUS_ACTIVE_POWER_L3_POSITIVE, device_class=\n \
    \   SensorDeviceClass.POWER, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ DSMRSensorEntityDescription(\n    key='instantaneous_active_power_l1_negative',\
    \ translation_key=\n    'instantaneous_active_power_l1_negative', obis_reference=\n\
    \    obis_references.INSTANTANEOUS_ACTIVE_POWER_L1_NEGATIVE, device_class=\n \
    \   SensorDeviceClass.POWER, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ DSMRSensorEntityDescription(\n    key='instantaneous_active_power_l2_negative',\
    \ translation_key=\n    'instantaneous_active_power_l2_negative', obis_reference=\n\
    \    obis_references.INSTANTANEOUS_ACTIVE_POWER_L2_NEGATIVE, device_class=\n \
    \   SensorDeviceClass.POWER, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ DSMRSensorEntityDescription(\n    key='instantaneous_active_power_l3_negative',\
    \ translation_key=\n    'instantaneous_active_power_l3_negative', obis_reference=\n\
    \    obis_references.INSTANTANEOUS_ACTIVE_POWER_L3_NEGATIVE, device_class=\n \
    \   SensorDeviceClass.POWER, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ DSMRSensorEntityDescription(\n    key='short_power_failure_count', translation_key=\n\
    \    'short_power_failure_count', obis_reference=obis_references.\n    SHORT_POWER_FAILURE_COUNT,\
    \ dsmr_versions={'2.2', '4', '5', '5L'},\n    entity_registry_enabled_default=False,\
    \ icon='mdi:flash-off',\n    entity_category=EntityCategory.DIAGNOSTIC), DSMRSensorEntityDescription\n\
    \    (key='long_power_failure_count', translation_key=\n    'long_power_failure_count',\
    \ obis_reference=obis_references.\n    LONG_POWER_FAILURE_COUNT, dsmr_versions={'2.2',\
    \ '4', '5', '5L'},\n    entity_registry_enabled_default=False, icon='mdi:flash-off',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC), DSMRSensorEntityDescription\n\
    \    (key='voltage_sag_l1_count', translation_key='voltage_sag_l1_count',\n  \
    \  obis_reference=obis_references.VOLTAGE_SAG_L1_COUNT, dsmr_versions={\n    '2.2',\
    \ '4', '5', '5L'}, entity_registry_enabled_default=False,\n    entity_category=EntityCategory.DIAGNOSTIC),\
    \ DSMRSensorEntityDescription\n    (key='voltage_sag_l2_count', translation_key='voltage_sag_l2_count',\n\
    \    obis_reference=obis_references.VOLTAGE_SAG_L2_COUNT, dsmr_versions={\n  \
    \  '2.2', '4', '5', '5L'}, entity_registry_enabled_default=False,\n    entity_category=EntityCategory.DIAGNOSTIC),\
    \ DSMRSensorEntityDescription\n    (key='voltage_sag_l3_count', translation_key='voltage_sag_l3_count',\n\
    \    obis_reference=obis_references.VOLTAGE_SAG_L3_COUNT, dsmr_versions={\n  \
    \  '2.2', '4', '5', '5L'}, entity_registry_enabled_default=False,\n    entity_category=EntityCategory.DIAGNOSTIC),\
    \ DSMRSensorEntityDescription\n    (key='voltage_swell_l1_count', translation_key='voltage_swell_l1_count',\n\
    \    obis_reference=obis_references.VOLTAGE_SWELL_L1_COUNT, dsmr_versions={\n\
    \    '2.2', '4', '5', '5L'}, entity_registry_enabled_default=False, icon=\n  \
    \  'mdi:pulse', entity_category=EntityCategory.DIAGNOSTIC),\n    DSMRSensorEntityDescription(key='voltage_swell_l2_count',\n\
    \    translation_key='voltage_swell_l2_count', obis_reference=\n    obis_references.VOLTAGE_SWELL_L2_COUNT,\
    \ dsmr_versions={'2.2', '4', '5',\n    '5L'}, entity_registry_enabled_default=False,\
    \ icon='mdi:pulse',\n    entity_category=EntityCategory.DIAGNOSTIC), DSMRSensorEntityDescription\n\
    \    (key='voltage_swell_l3_count', translation_key='voltage_swell_l3_count',\n\
    \    obis_reference=obis_references.VOLTAGE_SWELL_L3_COUNT, dsmr_versions={\n\
    \    '2.2', '4', '5', '5L'}, entity_registry_enabled_default=False, icon=\n  \
    \  'mdi:pulse', entity_category=EntityCategory.DIAGNOSTIC),\n    DSMRSensorEntityDescription(key='instantaneous_voltage_l1',\n\
    \    translation_key='instantaneous_voltage_l1', obis_reference=\n    obis_references.INSTANTANEOUS_VOLTAGE_L1,\
    \ device_class=\n    SensorDeviceClass.VOLTAGE, entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ DSMRSensorEntityDescription(key=\n    'instantaneous_voltage_l2', translation_key='instantaneous_voltage_l2',\n\
    \    obis_reference=obis_references.INSTANTANEOUS_VOLTAGE_L2, device_class=\n\
    \    SensorDeviceClass.VOLTAGE, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), DSMRSensorEntityDescription(key=\n\
    \    'instantaneous_voltage_l3', translation_key='instantaneous_voltage_l3',\n\
    \    obis_reference=obis_references.INSTANTANEOUS_VOLTAGE_L3, device_class=\n\
    \    SensorDeviceClass.VOLTAGE, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), DSMRSensorEntityDescription(key=\n\
    \    'instantaneous_current_l1', translation_key='instantaneous_current_l1',\n\
    \    obis_reference=obis_references.INSTANTANEOUS_CURRENT_L1, device_class=\n\
    \    SensorDeviceClass.CURRENT, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), DSMRSensorEntityDescription(key=\n\
    \    'instantaneous_current_l2', translation_key='instantaneous_current_l2',\n\
    \    obis_reference=obis_references.INSTANTANEOUS_CURRENT_L2, device_class=\n\
    \    SensorDeviceClass.CURRENT, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), DSMRSensorEntityDescription(key=\n\
    \    'instantaneous_current_l3', translation_key='instantaneous_current_l3',\n\
    \    obis_reference=obis_references.INSTANTANEOUS_CURRENT_L3, device_class=\n\
    \    SensorDeviceClass.CURRENT, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), DSMRSensorEntityDescription(key=\n\
    \    'belgium_max_power_per_phase', translation_key='max_power_per_phase',\n \
    \   obis_reference=obis_references.BELGIUM_MAX_POWER_PER_PHASE,\n    dsmr_versions={'5B'},\
    \ device_class=SensorDeviceClass.POWER,\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    DSMRSensorEntityDescription(key='belgium_max_current_per_phase',\n    translation_key='max_current_per_phase',\
    \ obis_reference=obis_references\n    .BELGIUM_MAX_CURRENT_PER_PHASE, dsmr_versions={'5B'},\
    \ device_class=\n    SensorDeviceClass.CURRENT, entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ DSMRSensorEntityDescription(key=\n    'electricity_imported_total', translation_key=\n\
    \    'electricity_imported_total', obis_reference=obis_references.\n    ELECTRICITY_IMPORTED_TOTAL,\
    \ dsmr_versions={'5L', '5S', 'Q3D'},\n    force_update=True, device_class=SensorDeviceClass.ENERGY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), DSMRSensorEntityDescription(key=\n\
    \    'electricity_exported_total', translation_key=\n    'electricity_exported_total',\
    \ obis_reference=obis_references.\n    ELECTRICITY_EXPORTED_TOTAL, dsmr_versions={'5L',\
    \ '5S', 'Q3D'},\n    force_update=True, device_class=SensorDeviceClass.ENERGY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), DSMRSensorEntityDescription(key=\n\
    \    'belgium_current_average_demand', translation_key=\n    'current_average_demand',\
    \ obis_reference=obis_references.\n    BELGIUM_CURRENT_AVERAGE_DEMAND, dsmr_versions={'5B'},\
    \ force_update=True,\n    device_class=SensorDeviceClass.POWER), DSMRSensorEntityDescription(key=\n\
    \    'belgium_maximum_demand_current_month', translation_key=\n    'maximum_demand_current_month',\
    \ obis_reference=obis_references.\n    BELGIUM_MAXIMUM_DEMAND_MONTH, dsmr_versions={'5B'},\
    \ force_update=True,\n    device_class=SensorDeviceClass.POWER), DSMRSensorEntityDescription(key=\n\
    \    'hourly_gas_meter_reading', translation_key='gas_meter_reading',\n    obis_reference=obis_references.HOURLY_GAS_METER_READING,\
    \ dsmr_versions=\n    {'4', '5', '5L'}, is_gas=True, force_update=True, device_class=\n\
    \    SensorDeviceClass.GAS, state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    DSMRSensorEntityDescription(key='gas_meter_reading', translation_key=\n \
    \   'gas_meter_reading', obis_reference=obis_references.GAS_METER_READING,\n \
    \   dsmr_versions={'2.2'}, is_gas=True, force_update=True, device_class=\n   \
    \ SensorDeviceClass.GAS, state_class=SensorStateClass.TOTAL_INCREASING))"
  - (DSMRSensorEntityDescription, ...)
  - "(DaikinSensorEntityDescription(key=ATTR_INSIDE_TEMPERATURE, translation_key\n\
    \    ='inside_temperature', device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, value_func=lambda\
    \ device: device.\n    inside_temperature), DaikinSensorEntityDescription(key=\n\
    \    ATTR_OUTSIDE_TEMPERATURE, translation_key='outside_temperature',\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_func=lambda device: device.\n    outside_temperature),\
    \ DaikinSensorEntityDescription(key=ATTR_HUMIDITY,\n    device_class=SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, native_unit_of_measurement=PERCENTAGE,\
    \ value_func=lambda\n    device: device.humidity), DaikinSensorEntityDescription(key=\n\
    \    ATTR_TARGET_HUMIDITY, translation_key='target_humidity', device_class=\n\
    \    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT,\n \
    \   native_unit_of_measurement=PERCENTAGE, value_func=lambda device: device\n\
    \    .humidity), DaikinSensorEntityDescription(key=ATTR_TOTAL_POWER,\n    translation_key='compressor_estimated_power_consumption',\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfPower.KILO_WATT, value_func=lambda\n   \
    \ device: round(device.current_total_power_consumption, 2)),\n    DaikinSensorEntityDescription(key=ATTR_COOL_ENERGY,\
    \ translation_key=\n    'cool_energy_consumption', icon='mdi:snowflake', device_class=\n\
    \    SensorDeviceClass.ENERGY, native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR,\
    \ entity_registry_enabled_default=False, value_func=lambda\n    device: round(device.last_hour_cool_energy_consumption,\
    \ 2)),\n    DaikinSensorEntityDescription(key=ATTR_HEAT_ENERGY, translation_key=\n\
    \    'heat_energy_consumption', icon='mdi:fire', device_class=\n    SensorDeviceClass.ENERGY,\
    \ native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR, entity_registry_enabled_default=False,\
    \ value_func=lambda\n    device: round(device.last_hour_heat_energy_consumption,\
    \ 2)),\n    DaikinSensorEntityDescription(key=ATTR_ENERGY_TODAY, translation_key=\n\
    \    'energy_consumption', device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, value_func=lambda\n\
    \    device: round(device.today_energy_consumption, 2)),\n    DaikinSensorEntityDescription(key=ATTR_COMPRESSOR_FREQUENCY,\n\
    \    translation_key='compressor_frequency', icon='mdi:fan', device_class=\n \
    \   SensorDeviceClass.FREQUENCY, state_class=SensorStateClass.MEASUREMENT,\n \
    \   native_unit_of_measurement=UnitOfFrequency.HERTZ,\n    entity_registry_enabled_default=False,\
    \ value_func=lambda device: device\n    .compressor_frequency), DaikinSensorEntityDescription(key=\n\
    \    ATTR_TOTAL_ENERGY_TODAY, translation_key=\n    'compressor_energy_consumption',\
    \ device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n    entity_registry_enabled_default=False,\
    \ value_func=lambda device: round(\n    device.today_total_energy_consumption,\
    \ 2)))"
  - (DaikinSensorEntityDescription, ...)
  - (DecimalException, ValueError)
  - (DeconzSensorDescription, ...)
  - "(DeconzSensorDescription[AirQuality](key='air_quality', supported_fn=lambda\n\
    \    device: device.supports_air_quality, update_key='airquality', value_fn=\n\
    \    lambda device: device.air_quality, instance_check=AirQuality),\n    DeconzSensorDescription[AirQuality](key='air_quality_ppb',\
    \ supported_fn\n    =lambda device: device.air_quality_ppb is not None, update_key=\n\
    \    'airqualityppb', value_fn=lambda device: device.air_quality_ppb,\n    instance_check=AirQuality,\
    \ name_suffix='PPB', old_unique_id_suffix=\n    'ppb', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=CONCENTRATION_PARTS_PER_BILLION),\n    DeconzSensorDescription[AirQuality](key='air_quality_formaldehyde',\n\
    \    supported_fn=lambda device: device.air_quality_formaldehyde is not None,\n\
    \    update_key='airquality_formaldehyde_density', value_fn=lambda device:\n \
    \   device.air_quality_formaldehyde, instance_check=AirQuality, name_suffix\n\
    \    ='CH2O', device_class=SensorDeviceClass.VOLATILE_ORGANIC_COMPOUNDS,\n   \
    \ state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER),\
    \ DeconzSensorDescription[\n    AirQuality](key='air_quality_co2', supported_fn=lambda\
    \ device: device.\n    air_quality_co2 is not None, update_key='airquality_co2_density',\n\
    \    value_fn=lambda device: device.air_quality_co2, instance_check=\n    AirQuality,\
    \ name_suffix='CO2', device_class=SensorDeviceClass.CO2,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION), DeconzSensorDescription[AirQuality](\n\
    \    key='air_quality_pm2_5', supported_fn=lambda device: device.pm_2_5 is not\n\
    \    None, update_key='pm2_5', value_fn=lambda device: device.pm_2_5,\n    instance_check=AirQuality,\
    \ name_suffix='PM25', device_class=\n    SensorDeviceClass.PM25, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER),\n \
    \   DeconzSensorDescription[Consumption](key='consumption', supported_fn=lambda\n\
    \    device: device.consumption is not None, update_key='consumption',\n    value_fn=lambda\
    \ device: device.scaled_consumption, instance_check=\n    Consumption, device_class=SensorDeviceClass.ENERGY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR), DeconzSensorDescription[Daylight](key=\n  \
    \  'daylight_status', supported_fn=lambda device: True, update_key=\n    'status',\
    \ value_fn=lambda device: DAYLIGHT_STATUS[device.\n    daylight_status], instance_check=Daylight,\
    \ icon=\n    'mdi:white-balance-sunny', entity_registry_enabled_default=False),\n\
    \    DeconzSensorDescription[GenericStatus](key='status', supported_fn=lambda\n\
    \    device: device.status is not None, update_key='status', value_fn=lambda\n\
    \    device: device.status, instance_check=GenericStatus),\n    DeconzSensorDescription[Humidity](key='humidity',\
    \ supported_fn=lambda\n    device: device.humidity is not None, update_key='humidity',\
    \ value_fn=lambda\n    device: device.scaled_humidity, instance_check=Humidity,\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=PERCENTAGE, suggested_display_precision=1),\n\
    \    DeconzSensorDescription[LightLevel](key='light_level', supported_fn=lambda\n\
    \    device: device.light_level is not None, update_key='lightlevel',\n    value_fn=lambda\
    \ device: device.scaled_light_level, instance_check=\n    LightLevel, device_class=SensorDeviceClass.ILLUMINANCE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=LIGHT_LUX),\n\
    \    DeconzSensorDescription[Moisture](key='moisture', supported_fn=lambda\n \
    \   device: device.moisture is not None, update_key='moisture', value_fn=lambda\n\
    \    device: device.scaled_moisture, instance_check=Moisture, device_class=\n\
    \    SensorDeviceClass.MOISTURE, state_class=SensorStateClass.MEASUREMENT,\n \
    \   native_unit_of_measurement=PERCENTAGE, suggested_display_precision=1),\n \
    \   DeconzSensorDescription[Power](key='power', supported_fn=lambda device:\n\
    \    device.power is not None, update_key='power', value_fn=lambda device:\n \
    \   device.power, instance_check=Power, device_class=SensorDeviceClass.\n    POWER,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfPower.WATT),\
    \ DeconzSensorDescription[\n    Pressure](key='pressure', supported_fn=lambda\
    \ device: device.pressure\n     is not None, update_key='pressure', value_fn=lambda\
    \ device: device.\n    pressure, instance_check=Pressure, device_class=SensorDeviceClass.\n\
    \    PRESSURE, state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfPressure.HPA),\
    \ DeconzSensorDescription\n    [Temperature](key='temperature', supported_fn=lambda\
    \ device: device.\n    temperature is not None, update_key='temperature', value_fn=lambda\n\
    \    device: device.scaled_temperature, instance_check=Temperature,\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, suggested_display_precision=1),\n    DeconzSensorDescription[Time](key='last_set',\
    \ supported_fn=lambda\n    device: device.last_set is not None, update_key='lastset',\
    \ value_fn=lambda\n    device: dt_util.parse_datetime(device.last_set), instance_check=Time,\n\
    \    device_class=SensorDeviceClass.TIMESTAMP), DeconzSensorDescription[\n   \
    \ SensorResources](key='battery', supported_fn=lambda device: device.\n    battery\
    \ is not None, update_key='battery', value_fn=lambda device:\n    device.battery,\
    \ name_suffix='Battery', old_unique_id_suffix='battery',\n    device_class=SensorDeviceClass.BATTERY,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, native_unit_of_measurement=PERCENTAGE,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), DeconzSensorDescription[SensorResources](\n\
    \    key='internal_temperature', supported_fn=lambda device: device.\n    internal_temperature\
    \ is not None, update_key='temperature', value_fn=lambda\n    device: device.internal_temperature,\
    \ name_suffix='Temperature',\n    old_unique_id_suffix='temperature', device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS))"
  - "(DelugeSensorEntityDescription(key=CURRENT_STATUS, translation_key='status',\n\
    \    value=lambda data: get_state(data, CURRENT_STATUS), device_class=\n    SensorDeviceClass.ENUM,\
    \ options=['seeding_and_downloading', 'seeding',\n    'downloading', 'idle']),\
    \ DelugeSensorEntityDescription(key=\n    DOWNLOAD_SPEED, translation_key='download_speed',\
    \ device_class=\n    SensorDeviceClass.DATA_RATE, native_unit_of_measurement=UnitOfDataRate.\n\
    \    KILOBYTES_PER_SECOND, state_class=SensorStateClass.MEASUREMENT, value=\n\
    \    lambda data: get_state(data, DOWNLOAD_SPEED)),\n    DelugeSensorEntityDescription(key=UPLOAD_SPEED,\
    \ translation_key=\n    'upload_speed', device_class=SensorDeviceClass.DATA_RATE,\n\
    \    native_unit_of_measurement=UnitOfDataRate.KILOBYTES_PER_SECOND,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value=lambda data: get_state(\n    data, UPLOAD_SPEED)))"
  - (DelugeSensorEntityDescription, ...)
  - (DeviceClass.BATTERY, Units.PERCENTAGE)
  - (DeviceClass.CONDUCTIVITY, Units.CONDUCTIVITY)
  - (DeviceClass.FORMALDEHYDE, Units.CONCENTRATION_MILLIGRAMS_PER_CUBIC_METER)
  - (DeviceClass.HUMIDITY, Units.PERCENTAGE)
  - (DeviceClass.ILLUMINANCE, Units.LIGHT_LUX)
  - (DeviceClass.IMPEDANCE, Units.OHM)
  - (DeviceClass.MASS, Units.MASS_KILOGRAMS)
  - (DeviceClass.MASS_NON_STABILIZED, Units.MASS_KILOGRAMS)
  - (DeviceClass.MOISTURE, Units.PERCENTAGE)
  - (DeviceClass.PRESSURE, Units.PRESSURE_MBAR)
  - (DeviceClass.SIGNAL_STRENGTH, Units.SIGNAL_STRENGTH_DECIBELS_MILLIWATT)
  - (DeviceClass.SPECIFIC_GRAVITY, Units.SPECIFIC_GRAVITY)
  - (DeviceClass.TEMPERATURE, Units.TEMP_CELSIUS)
  - (DeviceClass.TEMPERATURE, Units.TEMP_FAHRENHEIT)
  - (DeviceClass.VOLTAGE, Units.ELECTRIC_POTENTIAL_VOLT)
  - "(DiscovergySensorEntityDescription(key='last_transmitted', translation_key=\n\
    \    'last_transmitted', device_class=SensorDeviceClass.TIMESTAMP,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda reading, key,\n  \
    \  scale: reading.time_with_timezone),)"
  - "(DiscovergySensorEntityDescription(key='power', translation_key=\n    'total_power',\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    suggested_display_precision=3,\
    \ device_class=SensorDeviceClass.POWER,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    DiscovergySensorEntityDescription(key='power1', translation_key=\n    'phase_1_power',\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    suggested_display_precision=3,\
    \ device_class=SensorDeviceClass.POWER,\n    state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, alternative_keys=['phase1Power']\n\
    \    ), DiscovergySensorEntityDescription(key='power2', translation_key=\n   \
    \ 'phase_2_power', native_unit_of_measurement=UnitOfPower.WATT,\n    suggested_display_precision=3,\
    \ device_class=SensorDeviceClass.POWER,\n    state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, alternative_keys=['phase2Power']\n\
    \    ), DiscovergySensorEntityDescription(key='power3', translation_key=\n   \
    \ 'phase_3_power', native_unit_of_measurement=UnitOfPower.WATT,\n    suggested_display_precision=3,\
    \ device_class=SensorDeviceClass.POWER,\n    state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, alternative_keys=['phase3Power']\n\
    \    ), DiscovergySensorEntityDescription(key='phase1Voltage',\n    translation_key='phase_1_voltage',\
    \ native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT, suggested_display_precision=1,\n\
    \    device_class=SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.\n \
    \   MEASUREMENT, entity_registry_enabled_default=False, alternative_keys=[\n \
    \   'voltage1']), DiscovergySensorEntityDescription(key='phase2Voltage',\n   \
    \ translation_key='phase_2_voltage', native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT,\
    \ suggested_display_precision=1,\n    device_class=SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_registry_enabled_default=False,\
    \ alternative_keys=[\n    'voltage2']), DiscovergySensorEntityDescription(key='phase3Voltage',\n\
    \    translation_key='phase_3_voltage', native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT,\
    \ suggested_display_precision=1,\n    device_class=SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_registry_enabled_default=False,\
    \ alternative_keys=[\n    'voltage3']), DiscovergySensorEntityDescription(key='energy',\n\
    \    translation_key='total_consumption', native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ suggested_display_precision=4,\n    device_class=SensorDeviceClass.ENERGY, state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, scale=10000000000), DiscovergySensorEntityDescription\n\
    \    (key='energyOut', translation_key='total_production',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n\
    \    suggested_display_precision=4, device_class=SensorDeviceClass.ENERGY,\n \
    \   state_class=SensorStateClass.TOTAL_INCREASING, scale=10000000000))"
  - "(DiscovergySensorEntityDescription(key='volume', translation_key=\n    'total_gas_consumption',\
    \ suggested_display_precision=4,\n    native_unit_of_measurement=UnitOfVolume.CUBIC_METERS,\
    \ device_class=\n    SensorDeviceClass.GAS, state_class=SensorStateClass.TOTAL_INCREASING),)"
  - (DiscovergySensorEntityDescription, ...)
  - "(DovadoSensorEntityDescription(identifier=SENSOR_NETWORK, key=\n    'signal strength',\
    \ name='Network', icon='mdi:access-point-network'),\n    DovadoSensorEntityDescription(identifier=SENSOR_SIGNAL,\
    \ key=\n    'signal strength', name='Signal Strength', native_unit_of_measurement=\n\
    \    PERCENTAGE, icon='mdi:signal'), DovadoSensorEntityDescription(\n    identifier=SENSOR_SMS_UNREAD,\
    \ key='sms unread', name='SMS unread', icon\n    ='mdi:message-text-outline'),\
    \ DovadoSensorEntityDescription(identifier=\n    SENSOR_UPLOAD, key='traffic modem\
    \ tx', name='Sent',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:cloud-upload'),\n\
    \    DovadoSensorEntityDescription(identifier=SENSOR_DOWNLOAD, key=\n    'traffic\
    \ modem rx', name='Received', native_unit_of_measurement=\n    UnitOfInformation.GIGABYTES,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    icon='mdi:cloud-download'))"
  - (DovadoSensorEntityDescription, ...)
  - "(Dremel3DPrinterSensorEntityDescription(key='job_phase', translation_key=\n \
    \   'job_phase', icon='mdi:printer-3d', value_fn=lambda api, _: api.\n    get_printing_status()),\
    \ Dremel3DPrinterSensorEntityDescription(key=\n    'remaining_time', translation_key='completion_time',\
    \ device_class=\n    SensorDeviceClass.TIMESTAMP, available_fn=lambda api, key:\
    \ api.\n    get_job_status()[key] > 0, value_fn=ignore_variance(lambda api, key:\
    \ \n    utcnow() + timedelta(seconds=api.get_job_status()[key]), timedelta(\n\
    \    minutes=2))), Dremel3DPrinterSensorEntityDescription(key='progress',\n  \
    \  translation_key='progress', icon='mdi:printer-3d-nozzle',\n    native_unit_of_measurement=PERCENTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda api, _: api.\n   \
    \ get_printing_progress()), Dremel3DPrinterSensorEntityDescription(key=\n    'chamber',\
    \ translation_key='chamber', device_class=SensorDeviceClass.\n    TEMPERATURE,\
    \ native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n\
    \    value_fn=lambda api, key: api.get_temperature_type(key)),\n    Dremel3DPrinterSensorEntityDescription(key='platform_temperature',\n\
    \    translation_key='platform_temperature', device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n\
    \    value_fn=lambda api, _: api.get_temperature_type(ATTR_PLATFORM)),\n    Dremel3DPrinterSensorEntityDescription(key=\n\
    \    'target_platform_temperature', translation_key=\n    'target_platform_temperature',\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False,\n    value_fn=lambda api, _: api.get_temperature_attributes(ATTR_PLATFORM)[\n\
    \    'target_temp']), Dremel3DPrinterSensorEntityDescription(key=\n    'max_platform_temperature',\
    \ translation_key='max_platform_temperature',\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda api, _: api.\n    get_temperature_attributes(ATTR_PLATFORM)['max_temp']),\n\
    \    Dremel3DPrinterSensorEntityDescription(key=ATTR_EXTRUDER,\n    translation_key='extruder',\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda api, key: api.\n \
    \   get_temperature_type(key)), Dremel3DPrinterSensorEntityDescription(key=\n\
    \    'target_extruder_temperature', translation_key=\n    'target_extruder_temperature',\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False,\n    value_fn=lambda api, _: api.get_temperature_attributes(ATTR_EXTRUDER)[\n\
    \    'target_temp']), Dremel3DPrinterSensorEntityDescription(key=\n    'max_extruder_temperature',\
    \ translation_key='max_extruder_temperature',\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda api, _: api.\n    get_temperature_attributes(ATTR_EXTRUDER)['max_temp']),\n\
    \    Dremel3DPrinterSensorEntityDescription(key='network_build',\n    translation_key='network_build',\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, entity_registry_enabled_default=False,\
    \ value_fn=lambda api,\n    key: api.get_job_status()[key]), Dremel3DPrinterSensorEntityDescription\n\
    \    (key='filament', translation_key='filament', icon=\n    'mdi:printer-3d-nozzle',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda api, key: api.\n    get_job_status()[key]), Dremel3DPrinterSensorEntityDescription(key=\n\
    \    'elapsed_time', translation_key='elapsed_time',\n    native_unit_of_measurement=UnitOfTime.SECONDS,\
    \ device_class=\n    SensorDeviceClass.DURATION, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, available_fn=lambda api, _: api.\n\
    \    get_printing_status() == 'building', value_fn=lambda api, key: api.\n   \
    \ get_job_status()[key]), Dremel3DPrinterSensorEntityDescription(key=\n    'estimated_total_time',\
    \ translation_key='estimated_total_time',\n    native_unit_of_measurement=UnitOfTime.SECONDS,\
    \ device_class=\n    SensorDeviceClass.DURATION, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, available_fn=lambda api, key: \n \
    \   api.get_job_status()[key] > 0, value_fn=lambda api, key: api.\n    get_job_status()[key]),\
    \ Dremel3DPrinterSensorEntityDescription(key=\n    'job_status', translation_key='job_status',\
    \ icon='mdi:printer-3d',\n    entity_category=EntityCategory.DIAGNOSTIC,\n   \
    \ entity_registry_enabled_default=False, value_fn=lambda api, key: api.\n    get_job_status()[key]),\
    \ Dremel3DPrinterSensorEntityDescription(key=\n    'job_name', translation_key='job_name',\
    \ icon='mdi:file',\n    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda api, _: api.\n    get_job_name()), Dremel3DPrinterSensorEntityDescription(key=\n\
    \    'api_version', translation_key='api_version', icon='mdi:api',\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda api, key: api.\n \
    \   get_printer_info()[key]), Dremel3DPrinterSensorEntityDescription(key=\n  \
    \  'host', translation_key='host', icon='mdi:ip-network', entity_category=\n \
    \   EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n    value_fn=lambda\
    \ api, key: api.get_printer_info()[key]),\n    Dremel3DPrinterSensorEntityDescription(key='connection_type',\n\
    \    translation_key='connection_type', icon='mdi:network', entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n    value_fn=lambda\
    \ api, key: api.get_printer_info()[key]),\n    Dremel3DPrinterSensorEntityDescription(key='available_storage',\n\
    \    translation_key='available_storage', native_unit_of_measurement=\n    UnitOfInformation.MEGABYTES,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda api, key: api.\n \
    \   get_printer_info()[key] * 100), Dremel3DPrinterSensorEntityDescription(\n\
    \    key='hours_used', translation_key='hours_used', icon='mdi:clock',\n    native_unit_of_measurement=UnitOfTime.HOURS,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n\
    \    value_fn=lambda api, key: api.get_printer_info()[key]))"
  - (Dremel3DPrinterSensorEntityDescription, ...)
  - (ECOBEE_STATE_CALIBRATING, ECOBEE_STATE_UNKNOWN, 'unknown')
  - "(ECSensorEntityDescription(key='advisories', translation_key='advisories',\n\
    \    icon='mdi:bell-alert', value_fn=lambda data: data.alerts.get(\n    'advisories',\
    \ {}).get('value'), transform=len),\n    ECSensorEntityDescription(key='endings',\
    \ translation_key='endings',\n    icon='mdi:alert-circle-check', value_fn=lambda\
    \ data: data.alerts.get(\n    'endings', {}).get('value'), transform=len), ECSensorEntityDescription(\n\
    \    key='statements', translation_key='statements', icon='mdi:bell-alert',\n\
    \    value_fn=lambda data: data.alerts.get('statements', {}).get('value'),\n \
    \   transform=len), ECSensorEntityDescription(key='warnings',\n    translation_key='warnings',\
    \ icon='mdi:alert-octagon', value_fn=lambda\n    data: data.alerts.get('warnings',\
    \ {}).get('value'), transform=len),\n    ECSensorEntityDescription(key='watches',\
    \ translation_key='watches',\n    icon='mdi:alert', value_fn=lambda data: data.alerts.get('watches',\
    \ {}).\n    get('value'), transform=len))"
  - "(ECSensorEntityDescription(key='condition', translation_key='condition',\n  \
    \  value_fn=lambda data: data.conditions.get('condition', {}).get('value')\n \
    \   ), ECSensorEntityDescription(key='dewpoint', translation_key='dewpoint',\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  value_fn=lambda data: data.conditions.get('dewpoint', {}).get('value')),\n\
    \    ECSensorEntityDescription(key='high_temp', translation_key='high_temp',\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  value_fn=lambda data: data.conditions.get('high_temp', {}).get('value')\n \
    \   ), ECSensorEntityDescription(key='humidex', translation_key='humidex',\n \
    \   device_class=SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  value_fn=lambda data: data.conditions.get('humidex', {}).get('value')),\n \
    \   ECSensorEntityDescription(key='humidity', device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data.\n    conditions.get('humidity', {}).get('value')),\
    \ ECSensorEntityDescription\n    (key='icon_code', translation_key='icon_code',\
    \ name='Icon code',\n    value_fn=lambda data: data.conditions.get('icon_code',\
    \ {}).get('value')\n    ), ECSensorEntityDescription(key='low_temp', translation_key='low_temp',\n\
    \    name='Low temperature', device_class=SensorDeviceClass.TEMPERATURE,\n   \
    \ native_unit_of_measurement=UnitOfTemperature.CELSIUS, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data.conditions.get\n    ('low_temp', {}).get('value')),\
    \ ECSensorEntityDescription(key=\n    'normal_high', translation_key='normal_high',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_fn=lambda data: data.conditions.get(\n \
    \   'normal_high', {}).get('value')), ECSensorEntityDescription(key=\n    'normal_low',\
    \ translation_key='normal_low', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, value_fn=lambda\
    \ data: data.conditions.get(\n    'normal_low', {}).get('value')), ECSensorEntityDescription(key='pop',\n\
    \    translation_key='pop', native_unit_of_measurement=PERCENTAGE, value_fn=\n\
    \    lambda data: data.conditions.get('pop', {}).get('value')),\n    ECSensorEntityDescription(key='precip_yesterday',\
    \ translation_key=\n    'precip_yesterday', device_class=SensorDeviceClass.PRECIPITATION,\n\
    \    native_unit_of_measurement=UnitOfPrecipitationDepth.MILLIMETERS,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data.\n    conditions.get('precip_yesterday', {}).get('value')),\n\
    \    ECSensorEntityDescription(key='pressure', translation_key='pressure',\n \
    \   device_class=SensorDeviceClass.PRESSURE, native_unit_of_measurement=\n   \
    \ UnitOfPressure.KPA, state_class=SensorStateClass.MEASUREMENT, value_fn=\n  \
    \  lambda data: data.conditions.get('pressure', {}).get('value')),\n    ECSensorEntityDescription(key='temperature',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  value_fn=lambda data: data.conditions.get('temperature', {}).get(\n    'value')),\
    \ ECSensorEntityDescription(key='tendency', translation_key=\n    'tendency',\
    \ value_fn=lambda data: data.conditions.get('tendency', {}).\n    get('value'),\
    \ transform=lambda val: str(val).capitalize()),\n    ECSensorEntityDescription(key='text_summary',\
    \ translation_key=\n    'text_summary', value_fn=lambda data: data.conditions.get(\n\
    \    'text_summary', {}).get('value'), transform=lambda val: val[:255]),\n   \
    \ ECSensorEntityDescription(key='timestamp', translation_key='timestamp',\n  \
    \  device_class=SensorDeviceClass.TIMESTAMP, value_fn=lambda data: data.\n   \
    \ metadata.get('timestamp')), ECSensorEntityDescription(key='uv_index',\n    translation_key='uv_index',\
    \ native_unit_of_measurement=UV_INDEX,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data.\n    conditions.get('uv_index', {}).get('value')),\
    \ ECSensorEntityDescription\n    (key='visibility', translation_key='visibility',\n\
    \    native_unit_of_measurement=UnitOfLength.KILOMETERS, device_class=\n    SensorDeviceClass.DISTANCE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    value_fn=lambda data: data.conditions.get('visibility',\
    \ {}).get('value'\n    )), ECSensorEntityDescription(key='wind_bearing', translation_key=\n\
    \    'wind_bearing', native_unit_of_measurement=DEGREE, value_fn=lambda data:\n\
    \    data.conditions.get('wind_bearing', {}).get('value')),\n    ECSensorEntityDescription(key='wind_chill',\
    \ translation_key=\n    'wind_chill', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data.conditions.get\n    ('wind_chill', {}).get('value')),\
    \ ECSensorEntityDescription(key=\n    'wind_dir', translation_key='wind_dir',\
    \ value_fn=lambda data: data.\n    conditions.get('wind_dir', {}).get('value')),\
    \ ECSensorEntityDescription\n    (key='wind_gust', translation_key='wind_gust',\n\
    \    native_unit_of_measurement=UnitOfSpeed.KILOMETERS_PER_HOUR,\n    device_class=SensorDeviceClass.WIND_SPEED,\
    \ state_class=SensorStateClass\n    .MEASUREMENT, value_fn=lambda data: data.conditions.get('wind_gust',\
    \ {}\n    ).get('value')), ECSensorEntityDescription(key='wind_speed',\n    native_unit_of_measurement=UnitOfSpeed.KILOMETERS_PER_HOUR,\n\
    \    device_class=SensorDeviceClass.WIND_SPEED, state_class=SensorStateClass\n\
    \    .MEASUREMENT, value_fn=lambda data: data.conditions.get('wind_speed', {\n\
    \    }).get('value')))"
  - (ECSensorEntityDescription, ...)
  - (ENTITY_DESC_KEY_BATTERY, PERCENTAGE)
  - (ENTITY_DESC_KEY_CO, CONCENTRATION_PARTS_PER_MILLION)
  - (ENTITY_DESC_KEY_CO2, CONCENTRATION_PARTS_PER_MILLION)
  - (ENTITY_DESC_KEY_CURRENT, UnitOfElectricCurrent.AMPERE)
  - (ENTITY_DESC_KEY_ENERGY_PRODUCTION_POWER, UnitOfPower.WATT)
  - (ENTITY_DESC_KEY_ENERGY_PRODUCTION_TIME, UnitOfTime.HOURS)
  - (ENTITY_DESC_KEY_ENERGY_PRODUCTION_TIME, UnitOfTime.SECONDS)
  - (ENTITY_DESC_KEY_ENERGY_PRODUCTION_TODAY, UnitOfEnergy.WATT_HOUR)
  - (ENTITY_DESC_KEY_ENERGY_PRODUCTION_TOTAL, UnitOfEnergy.WATT_HOUR)
  - (ENTITY_DESC_KEY_ENERGY_TOTAL_INCREASING, UnitOfEnergy.KILO_WATT_HOUR)
  - (ENTITY_DESC_KEY_HUMIDITY, PERCENTAGE)
  - (ENTITY_DESC_KEY_ILLUMINANCE, LIGHT_LUX)
  - (ENTITY_DESC_KEY_POWER, UnitOfPower.WATT)
  - (ENTITY_DESC_KEY_POWER_FACTOR, PERCENTAGE)
  - (ENTITY_DESC_KEY_PRESSURE, UnitOfPressure.INHG)
  - (ENTITY_DESC_KEY_PRESSURE, UnitOfPressure.KPA)
  - (ENTITY_DESC_KEY_PRESSURE, UnitOfPressure.MMHG)
  - (ENTITY_DESC_KEY_PRESSURE, UnitOfPressure.PSI)
  - (ENTITY_DESC_KEY_SIGNAL_STRENGTH, SIGNAL_STRENGTH_DECIBELS_MILLIWATT)
  - (ENTITY_DESC_KEY_TARGET_TEMPERATURE, UnitOfTemperature.CELSIUS)
  - (ENTITY_DESC_KEY_TARGET_TEMPERATURE, UnitOfTemperature.FAHRENHEIT)
  - (ENTITY_DESC_KEY_TEMPERATURE, UnitOfTemperature.CELSIUS)
  - (ENTITY_DESC_KEY_TEMPERATURE, UnitOfTemperature.FAHRENHEIT)
  - (ENTITY_DESC_KEY_VOLTAGE, UnitOfElectricPotential.MILLIVOLT)
  - (ENTITY_DESC_KEY_VOLTAGE, UnitOfElectricPotential.VOLT)
  - "(EasyEnergySensorEntityDescription(key='current_hour_price',\n    translation_key='current_hour_price',\
    \ service_type='today_gas',\n    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfVolume.CUBIC_METERS}', value_fn=lambda data: \n\
    \    data.gas_today.current_price if data.gas_today else None),\n    EasyEnergySensorEntityDescription(key='next_hour_price',\n\
    \    translation_key='next_hour_price', service_type='today_gas',\n    native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfVolume.CUBIC_METERS}', value_fn=lambda data:\n \
    \   get_gas_price(data, 1)), EasyEnergySensorEntityDescription(key=\n    'current_hour_price',\
    \ translation_key='current_hour_price',\n    service_type='today_energy_usage',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}', value_fn=lambda data:\n\
    \    data.energy_today.current_usage_price),\n    EasyEnergySensorEntityDescription(key='next_hour_price',\n\
    \    translation_key='next_hour_price', service_type='today_energy_usage',\n \
    \   native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.price_at_time(data.energy_today.utcnow()\
    \ + timedelta(\n    hours=1))), EasyEnergySensorEntityDescription(key='average_price',\n\
    \    translation_key='average_price', service_type='today_energy_usage',\n   \
    \ native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.average_usage_price),\n    EasyEnergySensorEntityDescription(key='max_price',\
    \ translation_key=\n    'max_price', service_type='today_energy_usage',\n    native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}', value_fn=lambda data:\n\
    \    data.energy_today.extreme_usage_prices[1]),\n    EasyEnergySensorEntityDescription(key='min_price',\
    \ translation_key=\n    'min_price', service_type='today_energy_usage',\n    native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}', value_fn=lambda data:\n\
    \    data.energy_today.extreme_usage_prices[0]),\n    EasyEnergySensorEntityDescription(key='highest_price_time',\n\
    \    translation_key='highest_price_time', service_type='today_energy_usage',\n\
    \    device_class=SensorDeviceClass.TIMESTAMP, value_fn=lambda data: data.\n \
    \   energy_today.highest_usage_price_time),\n    EasyEnergySensorEntityDescription(key='lowest_price_time',\n\
    \    translation_key='lowest_price_time', service_type='today_energy_usage',\n\
    \    device_class=SensorDeviceClass.TIMESTAMP, value_fn=lambda data: data.\n \
    \   energy_today.lowest_usage_price_time),\n    EasyEnergySensorEntityDescription(key='percentage_of_max',\n\
    \    translation_key='percentage_of_max', service_type='today_energy_usage',\n\
    \    native_unit_of_measurement=PERCENTAGE, icon='mdi:percent', value_fn=lambda\n\
    \    data: data.energy_today.pct_of_max_usage),\n    EasyEnergySensorEntityDescription(key='current_hour_price',\n\
    \    translation_key='current_hour_price', service_type=\n    'today_energy_return',\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}', value_fn=lambda data:\n\
    \    data.energy_today.current_return_price),\n    EasyEnergySensorEntityDescription(key='next_hour_price',\n\
    \    translation_key='next_hour_price', service_type='today_energy_return',\n\
    \    native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.price_at_time(data.energy_today.utcnow()\
    \ + timedelta(\n    hours=1), 'return')), EasyEnergySensorEntityDescription(key=\n\
    \    'average_price', translation_key='average_price', service_type=\n    'today_energy_return',\
    \ native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.average_return_price),\n    EasyEnergySensorEntityDescription(key='max_price',\
    \ translation_key=\n    'max_price', service_type='today_energy_return',\n   \
    \ native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.extreme_return_prices[1]),\n  \
    \  EasyEnergySensorEntityDescription(key='min_price', translation_key=\n    'min_price',\
    \ service_type='today_energy_return',\n    native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.extreme_return_prices[0]),\n  \
    \  EasyEnergySensorEntityDescription(key='highest_price_time',\n    translation_key='highest_price_time',\
    \ service_type=\n    'today_energy_return', device_class=SensorDeviceClass.TIMESTAMP,\n\
    \    value_fn=lambda data: data.energy_today.highest_return_price_time),\n   \
    \ EasyEnergySensorEntityDescription(key='lowest_price_time',\n    translation_key='lowest_price_time',\
    \ service_type='today_energy_return',\n    device_class=SensorDeviceClass.TIMESTAMP,\
    \ value_fn=lambda data: data.\n    energy_today.lowest_return_price_time),\n \
    \   EasyEnergySensorEntityDescription(key='percentage_of_max',\n    translation_key='percentage_of_max',\
    \ service_type='today_energy_return',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:percent', value_fn=lambda\n    data: data.energy_today.pct_of_max_return),\n\
    \    EasyEnergySensorEntityDescription(key='hours_priced_equal_or_lower',\n  \
    \  translation_key='hours_priced_equal_or_lower', service_type=\n    'today_energy_usage',\
    \ native_unit_of_measurement=UnitOfTime.HOURS, icon\n    ='mdi:clock', value_fn=lambda\
    \ data: data.energy_today.\n    hours_priced_equal_or_lower_usage), EasyEnergySensorEntityDescription(\n\
    \    key='hours_priced_equal_or_higher', translation_key=\n    'hours_priced_equal_or_higher',\
    \ service_type='today_energy_return',\n    native_unit_of_measurement=UnitOfTime.HOURS,\
    \ icon='mdi:clock', value_fn\n    =lambda data: data.energy_today.hours_priced_equal_or_higher_return))"
  - (EasyEnergySensorEntityDescription, ...)
  - "(EcoWittSensorTypes.TEMPERATURE_C, EcoWittSensorTypes.RAIN_COUNT_MM,\n    EcoWittSensorTypes.RAIN_RATE_MM,\
    \ EcoWittSensorTypes.\n    LIGHTNING_DISTANCE_KM, EcoWittSensorTypes.SPEED_KPH,\
    \ EcoWittSensorTypes\n    .PRESSURE_HPA)"
  - "(EcoWittSensorTypes.TEMPERATURE_F, EcoWittSensorTypes.RAIN_COUNT_INCHES,\n  \
    \  EcoWittSensorTypes.RAIN_RATE_INCHES, EcoWittSensorTypes.\n    LIGHTNING_DISTANCE_MILES,\
    \ EcoWittSensorTypes.SPEED_MPH,\n    EcoWittSensorTypes.PRESSURE_INHG)"
  - "(EcobeeSensorEntityDescription(key='temperature',\n    native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    runtime_key=None), EcobeeSensorEntityDescription(key='humidity',\n    native_unit_of_measurement=PERCENTAGE,\
    \ device_class=SensorDeviceClass.\n    HUMIDITY, state_class=SensorStateClass.MEASUREMENT,\
    \ runtime_key=None),\n    EcobeeSensorEntityDescription(key='co2PPM', native_unit_of_measurement=\n\
    \    CONCENTRATION_PARTS_PER_MILLION, device_class=SensorDeviceClass.CO2,\n  \
    \  state_class=SensorStateClass.MEASUREMENT, runtime_key='actualCO2'),\n    EcobeeSensorEntityDescription(key='vocPPM',\
    \ device_class=\n    SensorDeviceClass.VOLATILE_ORGANIC_COMPOUNDS,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    state_class=SensorStateClass.MEASUREMENT, runtime_key='actualVOC'),\n   \
    \ EcobeeSensorEntityDescription(key='airQuality', device_class=\n    SensorDeviceClass.AQI,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    runtime_key='actualAQScore'))"
  - (EcobeeSensorEntityDescription, ...)
  - "(EcoforestSensorEntityDescription(key='temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, value_fn=lambda data: data.\n\
    \    environment_temperature), EcoforestSensorEntityDescription(key=\n    'cpu_temperature',\
    \ translation_key='cpu_temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, entity_registry_enabled_default=False,\n\
    \    value_fn=lambda data: data.cpu_temperature),\n    EcoforestSensorEntityDescription(key='gas_temperature',\
    \ translation_key\n    ='gas_temperature', native_unit_of_measurement=UnitOfTemperature.\n\
    \    CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda data: data.\n    gas_temperature), EcoforestSensorEntityDescription(key=\n\
    \    'ntc_temperature', translation_key='ntc_temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, entity_registry_enabled_default=False,\n\
    \    value_fn=lambda data: data.ntc_temperature),\n    EcoforestSensorEntityDescription(key='status',\
    \ translation_key='status',\n    device_class=SensorDeviceClass.ENUM, options=STATUS_TYPE,\
    \ value_fn=lambda\n    data: data.state.value), EcoforestSensorEntityDescription(key='alarm',\n\
    \    translation_key='alarm', device_class=SensorDeviceClass.ENUM, options=\n\
    \    ALARM_TYPE, icon='mdi:alert', value_fn=lambda data: data.alarm.value if\n\
    \    data.alarm else 'none'), EcoforestSensorEntityDescription(key=\n    'depression',\
    \ translation_key='depression', native_unit_of_measurement=\n    UnitOfPressure.PA,\
    \ device_class=SensorDeviceClass.ATMOSPHERIC_PRESSURE,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda data: data.\n    depression), EcoforestSensorEntityDescription(key='working_hours',\n\
    \    translation_key='working_hours', native_unit_of_measurement=UnitOfTime.\n\
    \    HOURS, device_class=SensorDeviceClass.DURATION,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda data: data.\n    working_hours), EcoforestSensorEntityDescription(key='ignitions',\n\
    \    translation_key='ignitions', native_unit_of_measurement='ignitions',\n  \
    \  entity_registry_enabled_default=False, value_fn=lambda data: data.\n    ignitions),\
    \ EcoforestSensorEntityDescription(key='live_pulse',\n    translation_key='live_pulse',\
    \ native_unit_of_measurement=UnitOfTime.\n    SECONDS, device_class=SensorDeviceClass.DURATION,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda data: data.\n    live_pulse),\
    \ EcoforestSensorEntityDescription(key='pulse_offset',\n    translation_key='pulse_offset',\
    \ native_unit_of_measurement=UnitOfTime.\n    SECONDS, device_class=SensorDeviceClass.DURATION,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda data: data.\n    pulse_offset),\
    \ EcoforestSensorEntityDescription(key='extractor',\n    translation_key='extractor',\
    \ native_unit_of_measurement=PERCENTAGE,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda data: data.\n    extractor), EcoforestSensorEntityDescription(key='convecto_air_flow',\n\
    \    translation_key='convecto_air_flow', native_unit_of_measurement=\n    PERCENTAGE,\
    \ entity_registry_enabled_default=False, value_fn=lambda data:\n    data.convecto_air_flow))"
  - (EcoforestSensorEntityDescription, ...)
  - "(ElectricKiwiHOPSensorEntityDescription(key=ATTR_EK_HOP_START,\n    translation_key='hopfreepowerstart',\
    \ device_class=SensorDeviceClass.\n    TIMESTAMP, value_func=lambda hop: _check_and_move_time(hop,\
    \ hop.start.\n    start_time)), ElectricKiwiHOPSensorEntityDescription(key=\n\
    \    ATTR_EK_HOP_END, translation_key='hopfreepowerend', device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ value_func=lambda hop:\n    _check_and_move_time(hop, hop.end.end_time)))"
  - (ElectricKiwiHOPSensorEntityDescription, ...)
  - "(EnergyZeroSensorEntityDescription(key='current_hour_price',\n    translation_key='current_hour_price',\
    \ service_type='today_gas',\n    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfVolume.CUBIC_METERS}', value_fn=lambda data: \n\
    \    data.gas_today.current_price if data.gas_today else None),\n    EnergyZeroSensorEntityDescription(key='next_hour_price',\n\
    \    translation_key='next_hour_price', service_type='today_gas',\n    native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfVolume.CUBIC_METERS}', value_fn=lambda data:\n \
    \   get_gas_price(data, 1)), EnergyZeroSensorEntityDescription(key=\n    'current_hour_price',\
    \ translation_key='current_hour_price',\n    service_type='today_energy', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.current_price), EnergyZeroSensorEntityDescription(key\n\
    \    ='next_hour_price', translation_key='next_hour_price', service_type=\n  \
    \  'today_energy', native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.price_at_time(data.energy_today.utcnow()\
    \ + timedelta(\n    hours=1))), EnergyZeroSensorEntityDescription(key='average_price',\n\
    \    translation_key='average_price', service_type='today_energy',\n    native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}', value_fn=lambda data:\n\
    \    data.energy_today.average_price), EnergyZeroSensorEntityDescription(key\n\
    \    ='max_price', translation_key='max_price', service_type='today_energy',\n\
    \    native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.extreme_prices[1]), EnergyZeroSensorEntityDescription\n\
    \    (key='min_price', translation_key='min_price', service_type=\n    'today_energy',\
    \ native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}',\
    \ value_fn=lambda data:\n    data.energy_today.extreme_prices[0]), EnergyZeroSensorEntityDescription\n\
    \    (key='highest_price_time', translation_key='highest_price_time',\n    service_type='today_energy',\
    \ device_class=SensorDeviceClass.TIMESTAMP,\n    value_fn=lambda data: data.energy_today.highest_price_time),\n\
    \    EnergyZeroSensorEntityDescription(key='lowest_price_time',\n    translation_key='lowest_price_time',\
    \ service_type='today_energy',\n    device_class=SensorDeviceClass.TIMESTAMP,\
    \ value_fn=lambda data: data.\n    energy_today.lowest_price_time), EnergyZeroSensorEntityDescription(key=\n\
    \    'percentage_of_max', translation_key='percentage_of_max', service_type=\n\
    \    'today_energy', native_unit_of_measurement=PERCENTAGE, icon=\n    'mdi:percent',\
    \ value_fn=lambda data: data.energy_today.pct_of_max_price\n    ), EnergyZeroSensorEntityDescription(key='hours_priced_equal_or_lower',\n\
    \    translation_key='hours_priced_equal_or_lower', service_type=\n    'today_energy',\
    \ native_unit_of_measurement=UnitOfTime.HOURS, icon=\n    'mdi:clock', value_fn=lambda\
    \ data: data.energy_today.\n    hours_priced_equal_or_lower))"
  - (EnergyZeroSensorEntityDescription, ...)
  - "(EntityDomainReplacementStrategy(SENSOR_DOMAIN,\n    f'{data.controller.mac}_freeze_protect_temp',\n\
    \    f'select.{data.controller.name.lower()}_freeze_protect_temperature',\n  \
    \  breaks_in_ha_version='2022.12.0', remove_old_entity=True),)"
  - "(EnvoyConsumptionSensorEntityDescription(key='consumption', translation_key\n\
    \    ='current_power_consumption', native_unit_of_measurement=UnitOfPower.\n \
    \   WATT, state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.POWER,\
    \ suggested_unit_of_measurement=UnitOfPower.\n    KILO_WATT, suggested_display_precision=3,\
    \ value_fn=lambda consumption:\n    consumption.watts_now), EnvoyConsumptionSensorEntityDescription(key=\n\
    \    'daily_consumption', translation_key='daily_consumption',\n    native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, device_class=SensorDeviceClass.\n\
    \    ENERGY, suggested_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n    suggested_display_precision=2,\
    \ value_fn=lambda consumption: consumption\n    .watt_hours_today), EnvoyConsumptionSensorEntityDescription(key=\n\
    \    'seven_days_consumption', translation_key='seven_days_consumption',\n   \
    \ native_unit_of_measurement=UnitOfEnergy.WATT_HOUR, device_class=\n    SensorDeviceClass.ENERGY,\
    \ suggested_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR, suggested_display_precision=1,\
    \ value_fn=lambda\n    consumption: consumption.watt_hours_last_7_days),\n   \
    \ EnvoyConsumptionSensorEntityDescription(key='lifetime_consumption',\n    translation_key='lifetime_consumption',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    device_class=SensorDeviceClass.ENERGY, suggested_unit_of_measurement=\n \
    \   UnitOfEnergy.MEGA_WATT_HOUR, suggested_display_precision=3, value_fn=lambda\n\
    \    consumption: consumption.watt_hours_lifetime))"
  - "(EnvoyEnchargeAggregateSensorEntityDescription(key='battery_level',\n    native_unit_of_measurement=PERCENTAGE,\
    \ device_class=SensorDeviceClass.\n    BATTERY, value_fn=lambda encharge: encharge.state_of_charge),\n\
    \    EnvoyEnchargeAggregateSensorEntityDescription(key='reserve_soc',\n    translation_key='reserve_soc',\
    \ native_unit_of_measurement=PERCENTAGE,\n    device_class=SensorDeviceClass.BATTERY,\
    \ value_fn=lambda encharge:\n    encharge.reserve_state_of_charge),\n    EnvoyEnchargeAggregateSensorEntityDescription(key='available_energy',\n\
    \    translation_key='available_energy', native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY, value_fn\n    =lambda encharge: encharge.available_energy),\n\
    \    EnvoyEnchargeAggregateSensorEntityDescription(key='reserve_energy',\n   \
    \ translation_key='reserve_energy', native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY, value_fn\n    =lambda encharge: encharge.backup_reserve),\n\
    \    EnvoyEnchargeAggregateSensorEntityDescription(key='max_capacity',\n    translation_key='max_capacity',\
    \ native_unit_of_measurement=UnitOfEnergy\n    .WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\
    \ value_fn=lambda\n    encharge: encharge.max_available_capacity))"
  - "(EnvoyEnchargePowerSensorEntityDescription(key='soc',\n    native_unit_of_measurement=PERCENTAGE,\
    \ device_class=SensorDeviceClass.\n    BATTERY, value_fn=lambda encharge: encharge.soc),\n\
    \    EnvoyEnchargePowerSensorEntityDescription(key='apparent_power_mva',\n   \
    \ native_unit_of_measurement=UnitOfApparentPower.VOLT_AMPERE,\n    device_class=SensorDeviceClass.APPARENT_POWER,\
    \ value_fn=lambda encharge:\n    encharge.apparent_power_mva * 0.001),\n    EnvoyEnchargePowerSensorEntityDescription(key='real_power_mw',\n\
    \    native_unit_of_measurement=UnitOfPower.WATT, device_class=\n    SensorDeviceClass.POWER,\
    \ value_fn=lambda encharge: encharge.\n    real_power_mw * 0.001))"
  - "(EnvoyEnchargeSensorEntityDescription(key='temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, value_fn=lambda encharge:\
    \ encharge.\n    temperature), EnvoyEnchargeSensorEntityDescription(key=\n   \
    \ LAST_REPORTED_KEY, translation_key=LAST_REPORTED_KEY,\n    native_unit_of_measurement=None,\
    \ device_class=SensorDeviceClass.\n    TIMESTAMP, value_fn=lambda encharge: dt_util.utc_from_timestamp(\n\
    \    encharge.last_report_date)))"
  - "(EnvoyEnpowerSensorEntityDescription(key='temperature',\n    native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, value_fn=lambda enpower: enpower.\n\
    \    temperature), EnvoyEnpowerSensorEntityDescription(key=LAST_REPORTED_KEY,\n\
    \    translation_key=LAST_REPORTED_KEY, device_class=SensorDeviceClass.\n    TIMESTAMP,\
    \ value_fn=lambda enpower: dt_util.utc_from_timestamp(enpower.\n    last_report_date)))"
  - "(EnvoyInverterSensorEntityDescription(key=INVERTERS_KEY, name=None,\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.POWER,\n\
    \    value_fn=lambda inverter: inverter.last_report_watts),\n    EnvoyInverterSensorEntityDescription(key=LAST_REPORTED_KEY,\n\
    \    translation_key=LAST_REPORTED_KEY, device_class=SensorDeviceClass.\n    TIMESTAMP,\
    \ entity_registry_enabled_default=False, value_fn=lambda\n    inverter: dt_util.utc_from_timestamp(inverter.last_report_date)))"
  - "(EnvoyProductionSensorEntityDescription(key='production', translation_key=\n\
    \    'current_power_production', native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.POWER,\
    \ suggested_unit_of_measurement=UnitOfPower.\n    KILO_WATT, suggested_display_precision=3,\
    \ value_fn=lambda production:\n    production.watts_now), EnvoyProductionSensorEntityDescription(key=\n\
    \    'daily_production', translation_key='daily_production',\n    native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, device_class=SensorDeviceClass.\n\
    \    ENERGY, suggested_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n    suggested_display_precision=2,\
    \ value_fn=lambda production: production.\n    watt_hours_today), EnvoyProductionSensorEntityDescription(key=\n\
    \    'seven_days_production', translation_key='seven_days_production',\n    native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, suggested_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR, suggested_display_precision=1, value_fn=lambda\n    production:\
    \ production.watt_hours_last_7_days),\n    EnvoyProductionSensorEntityDescription(key='lifetime_production',\n\
    \    translation_key='lifetime_production', native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR,\
    \ state_class=SensorStateClass.TOTAL_INCREASING,\n    device_class=SensorDeviceClass.ENERGY,\
    \ suggested_unit_of_measurement=\n    UnitOfEnergy.MEGA_WATT_HOUR, suggested_display_precision=3,\
    \ value_fn=lambda\n    production: production.watt_hours_lifetime))"
  - (EsphomeSensorStateClass, SensorStateClass | None)
  - (ExtendedSensorDeviceClass.CONSUMABLE, Units.PERCENTAGE)
  - (ExtendedSensorDeviceClass.COUNTER, Units.TIME_SECONDS)
  - (ExtendedSensorDeviceClass.SCORE, None)
  - (FROM_GRID_ID, FROM_GRID_NAME)
  - (FailedToLogin, requests.exceptions.ConnectionError)
  - (False, None, None)
  - "(FitbitSensorEntityDescription(key='activities/activityCalories', name=\n   \
    \ 'Activity Calories', native_unit_of_measurement='cal', icon='mdi:fire',\n  \
    \  scope=FitbitScope.ACTIVITY, state_class=SensorStateClass.\n    TOTAL_INCREASING,\
    \ entity_category=EntityCategory.DIAGNOSTIC),\n    FitbitSensorEntityDescription(key='activities/calories',\
    \ name=\n    'Calories', native_unit_of_measurement='cal', icon='mdi:fire', scope=\n\
    \    FitbitScope.ACTIVITY, state_class=SensorStateClass.TOTAL_INCREASING),\n \
    \   FitbitSensorEntityDescription(key='activities/caloriesBMR', name=\n    'Calories\
    \ BMR', native_unit_of_measurement='cal', icon='mdi:fire',\n    scope=FitbitScope.ACTIVITY,\
    \ entity_registry_enabled_default=False,\n    state_class=SensorStateClass.TOTAL_INCREASING,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), FitbitSensorEntityDescription(key=\n\
    \    'activities/distance', name='Distance', icon='mdi:map-marker',\n    device_class=SensorDeviceClass.DISTANCE,\
    \ value_fn=_distance_value_fn,\n    unit_fn=_distance_unit, scope=FitbitScope.ACTIVITY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), FitbitSensorEntityDescription(key=\n\
    \    'activities/elevation', name='Elevation', icon='mdi:walk', device_class\n\
    \    =SensorDeviceClass.DISTANCE, unit_fn=_elevation_unit, scope=FitbitScope\n\
    \    .ACTIVITY, state_class=SensorStateClass.MEASUREMENT, entity_category=\n \
    \   EntityCategory.DIAGNOSTIC), FitbitSensorEntityDescription(key=\n    'activities/floors',\
    \ name='Floors', native_unit_of_measurement='floors',\n    icon='mdi:walk', scope=FitbitScope.ACTIVITY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC), FitbitSensorEntityDescription(key='activities/heart', name\n\
    \    ='Resting Heart Rate', native_unit_of_measurement='bpm', icon=\n    'mdi:heart-pulse',\
    \ value_fn=lambda result: int(result['value'][\n    'restingHeartRate']), scope=FitbitScope.HEART_RATE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), FitbitSensorEntityDescription(key=\n\
    \    'activities/minutesFairlyActive', name='Minutes Fairly Active',\n    native_unit_of_measurement=UnitOfTime.MINUTES,\
    \ icon='mdi:walk',\n    device_class=SensorDeviceClass.DURATION, scope=FitbitScope.ACTIVITY,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ FitbitSensorEntityDescription(key=\n    'activities/minutesLightlyActive', name='Minutes\
    \ Lightly Active',\n    native_unit_of_measurement=UnitOfTime.MINUTES, icon='mdi:walk',\n\
    \    device_class=SensorDeviceClass.DURATION, scope=FitbitScope.ACTIVITY,\n  \
    \  state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ FitbitSensorEntityDescription(key=\n    'activities/minutesSedentary', name='Minutes\
    \ Sedentary',\n    native_unit_of_measurement=UnitOfTime.MINUTES, icon=\n    'mdi:seat-recline-normal',\
    \ device_class=SensorDeviceClass.DURATION,\n    scope=FitbitScope.ACTIVITY, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC),\n    FitbitSensorEntityDescription(key='activities/minutesVeryActive',\
    \ name=\n    'Minutes Very Active', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    icon='mdi:run', device_class=SensorDeviceClass.DURATION, scope=\n    FitbitScope.ACTIVITY,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    FitbitSensorEntityDescription(key='activities/steps', name='Steps',\n   \
    \ native_unit_of_measurement='steps', icon='mdi:walk', scope=FitbitScope.\n  \
    \  ACTIVITY, state_class=SensorStateClass.TOTAL_INCREASING),\n    FitbitSensorEntityDescription(key='activities/tracker/activityCalories',\n\
    \    name='Tracker Activity Calories', native_unit_of_measurement='cal',\n   \
    \ icon='mdi:fire', scope=FitbitScope.ACTIVITY,\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    TOTAL_INCREASING, entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    FitbitSensorEntityDescription(key='activities/tracker/calories', name=\n\
    \    'Tracker Calories', native_unit_of_measurement='cal', icon='mdi:fire',\n\
    \    scope=FitbitScope.ACTIVITY, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.TOTAL_INCREASING,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), FitbitSensorEntityDescription(key=\n\
    \    'activities/tracker/distance', name='Tracker Distance', icon=\n    'mdi:map-marker',\
    \ device_class=SensorDeviceClass.DISTANCE, value_fn=\n    _distance_value_fn,\
    \ unit_fn=_distance_unit, scope=FitbitScope.ACTIVITY,\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    TOTAL_INCREASING, entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    FitbitSensorEntityDescription(key='activities/tracker/elevation', name=\n\
    \    'Tracker Elevation', icon='mdi:walk', device_class=SensorDeviceClass.\n \
    \   DISTANCE, unit_fn=_elevation_unit, scope=FitbitScope.ACTIVITY,\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    FitbitSensorEntityDescription(key='activities/tracker/floors', name=\n  \
    \  'Tracker Floors', native_unit_of_measurement='floors', icon='mdi:walk',\n \
    \   scope=FitbitScope.ACTIVITY, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.TOTAL_INCREASING,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), FitbitSensorEntityDescription(key=\n\
    \    'activities/tracker/minutesFairlyActive', name=\n    'Tracker Minutes Fairly\
    \ Active', native_unit_of_measurement=UnitOfTime.\n    MINUTES, icon='mdi:walk',\
    \ device_class=SensorDeviceClass.DURATION,\n    scope=FitbitScope.ACTIVITY, entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ FitbitSensorEntityDescription(key=\n    'activities/tracker/minutesLightlyActive',\
    \ name=\n    'Tracker Minutes Lightly Active', native_unit_of_measurement=UnitOfTime\n\
    \    .MINUTES, icon='mdi:walk', device_class=SensorDeviceClass.DURATION,\n   \
    \ scope=FitbitScope.ACTIVITY, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.TOTAL_INCREASING,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), FitbitSensorEntityDescription(key=\n\
    \    'activities/tracker/minutesSedentary', name='Tracker Minutes Sedentary',\n\
    \    native_unit_of_measurement=UnitOfTime.MINUTES, icon=\n    'mdi:seat-recline-normal',\
    \ device_class=SensorDeviceClass.DURATION,\n    scope=FitbitScope.ACTIVITY, entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ FitbitSensorEntityDescription(key=\n    'activities/tracker/minutesVeryActive',\
    \ name=\n    'Tracker Minutes Very Active', native_unit_of_measurement=UnitOfTime.\n\
    \    MINUTES, icon='mdi:run', device_class=SensorDeviceClass.DURATION, scope\n\
    \    =FitbitScope.ACTIVITY, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.TOTAL_INCREASING,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), FitbitSensorEntityDescription(key=\n\
    \    'activities/tracker/steps', name='Tracker Steps',\n    native_unit_of_measurement='steps',\
    \ icon='mdi:walk', scope=FitbitScope.\n    ACTIVITY, entity_registry_enabled_default=False,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC), FitbitSensorEntityDescription(key='body/bmi', name='BMI',\n\
    \    native_unit_of_measurement='BMI', icon='mdi:human', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=_body_value_fn, scope=\n    FitbitScope.WEIGHT, entity_registry_enabled_default=False,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC),\n    FitbitSensorEntityDescription(key='body/fat',\
    \ name='Body Fat',\n    native_unit_of_measurement=PERCENTAGE, icon='mdi:human',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, value_fn=_body_value_fn, scope=\n\
    \    FitbitScope.WEIGHT, entity_registry_enabled_default=False,\n    entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    FitbitSensorEntityDescription(key='body/weight', name='Weight', icon=\n \
    \   'mdi:human', state_class=SensorStateClass.MEASUREMENT, device_class=\n   \
    \ SensorDeviceClass.WEIGHT, value_fn=_body_value_fn, unit_fn=_weight_unit,\n \
    \   scope=FitbitScope.WEIGHT), FitbitSensorEntityDescription(key=\n    'sleep/awakeningsCount',\
    \ name='Awakenings Count',\n    native_unit_of_measurement='times awaken', icon='mdi:sleep',\
    \ scope=\n    FitbitScope.SLEEP, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC),\n    FitbitSensorEntityDescription(key='sleep/efficiency',\
    \ name=\n    'Sleep Efficiency', native_unit_of_measurement=PERCENTAGE, icon=\n\
    \    'mdi:sleep', state_class=SensorStateClass.MEASUREMENT, scope=\n    FitbitScope.SLEEP,\
    \ entity_category=EntityCategory.DIAGNOSTIC),\n    FitbitSensorEntityDescription(key='sleep/minutesAfterWakeup',\
    \ name=\n    'Minutes After Wakeup', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    icon='mdi:sleep', device_class=SensorDeviceClass.DURATION, scope=\n    FitbitScope.SLEEP,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    FitbitSensorEntityDescription(key='sleep/minutesAsleep', name=\n    'Sleep\
    \ Minutes Asleep', native_unit_of_measurement=UnitOfTime.MINUTES,\n    icon='mdi:sleep',\
    \ device_class=SensorDeviceClass.DURATION, scope=\n    FitbitScope.SLEEP, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC),\n    FitbitSensorEntityDescription(key='sleep/minutesAwake',\
    \ name=\n    'Sleep Minutes Awake', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    icon='mdi:sleep', device_class=SensorDeviceClass.DURATION, scope=\n    FitbitScope.SLEEP,\
    \ state_class=SensorStateClass.TOTAL_INCREASING,\n    entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    FitbitSensorEntityDescription(key='sleep/minutesToFallAsleep', name=\n  \
    \  'Sleep Minutes to Fall Asleep', native_unit_of_measurement=UnitOfTime.\n  \
    \  MINUTES, icon='mdi:sleep', device_class=SensorDeviceClass.DURATION,\n    scope=FitbitScope.SLEEP,\
    \ state_class=SensorStateClass.TOTAL_INCREASING,\n    entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    FitbitSensorEntityDescription(key='sleep/timeInBed', name=\n    'Sleep Time\
    \ in Bed', native_unit_of_measurement=UnitOfTime.MINUTES,\n    icon='mdi:hotel',\
    \ device_class=SensorDeviceClass.DURATION, scope=\n    FitbitScope.SLEEP, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC),\n    FitbitSensorEntityDescription(key='foods/log/caloriesIn',\
    \ name=\n    'Calories In', native_unit_of_measurement='cal', icon='mdi:food-apple',\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, scope=FitbitScope.\n    NUTRITION,\
    \ entity_category=EntityCategory.DIAGNOSTIC),\n    FitbitSensorEntityDescription(key='foods/log/water',\
    \ name='Water', icon\n    ='mdi:cup-water', unit_fn=_water_unit, state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, scope=FitbitScope.NUTRITION, entity_category=\n    EntityCategory.DIAGNOSTIC))"
  - (FitbitSensorEntityDescription, ...)
  - "(FiveMSensorEntityDescription(key=NAME_PLAYERS_MAX, translation_key=\n    'max_players',\
    \ icon=ICON_PLAYERS_MAX, native_unit_of_measurement=\n    UNIT_PLAYERS_MAX), FiveMSensorEntityDescription(key=NAME_PLAYERS_ONLINE,\n\
    \    translation_key='online_players', icon=ICON_PLAYERS_ONLINE,\n    native_unit_of_measurement=UNIT_PLAYERS_ONLINE,\
    \ extra_attrs=[\n    ATTR_PLAYERS_LIST]), FiveMSensorEntityDescription(key=NAME_RESOURCES,\n\
    \    translation_key='resources', icon=ICON_RESOURCES,\n    native_unit_of_measurement=UNIT_RESOURCES,\
    \ extra_attrs=[\n    ATTR_RESOURCES_LIST]))"
  - (FiveMSensorEntityDescription, ...)
  - "(ForecastSolarSensorEntityDescription(key='energy_production_today',\n    translation_key='energy_production_today',\
    \ state=lambda estimate:\n    estimate.energy_production_today, device_class=SensorDeviceClass.ENERGY,\n\
    \    native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n    suggested_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n\
    \    suggested_display_precision=1), ForecastSolarSensorEntityDescription(\n \
    \   key='energy_production_today_remaining', translation_key=\n    'energy_production_today_remaining',\
    \ state=lambda estimate: estimate.\n    energy_production_today_remaining, device_class=SensorDeviceClass.\n\
    \    ENERGY, native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n    suggested_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n\
    \    suggested_display_precision=1), ForecastSolarSensorEntityDescription(\n \
    \   key='energy_production_tomorrow', translation_key=\n    'energy_production_tomorrow',\
    \ state=lambda estimate: estimate.\n    energy_production_tomorrow, device_class=SensorDeviceClass.ENERGY,\n\
    \    native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n    suggested_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n\
    \    suggested_display_precision=1), ForecastSolarSensorEntityDescription(\n \
    \   key='power_highest_peak_time_today', translation_key=\n    'power_highest_peak_time_today',\
    \ device_class=SensorDeviceClass.\n    TIMESTAMP), ForecastSolarSensorEntityDescription(key=\n\
    \    'power_highest_peak_time_tomorrow', translation_key=\n    'power_highest_peak_time_tomorrow',\
    \ device_class=SensorDeviceClass.\n    TIMESTAMP), ForecastSolarSensorEntityDescription(key=\n\
    \    'power_production_now', translation_key='power_production_now',\n    device_class=SensorDeviceClass.POWER,\
    \ state=lambda estimate: estimate.\n    power_production_now, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfPower.WATT),\n    ForecastSolarSensorEntityDescription(key='power_production_next_hour',\n\
    \    translation_key='power_production_next_hour', state=lambda estimate:\n  \
    \  estimate.power_production_at_time(estimate.now() + timedelta(hours=1)),\n \
    \   device_class=SensorDeviceClass.POWER, entity_registry_enabled_default=\n \
    \   False, native_unit_of_measurement=UnitOfPower.WATT),\n    ForecastSolarSensorEntityDescription(key=\n\
    \    'power_production_next_12hours', translation_key=\n    'power_production_next_12hours',\
    \ state=lambda estimate: estimate.\n    power_production_at_time(estimate.now()\
    \ + timedelta(hours=12)),\n    device_class=SensorDeviceClass.POWER, entity_registry_enabled_default=\n\
    \    False, native_unit_of_measurement=UnitOfPower.WATT),\n    ForecastSolarSensorEntityDescription(key=\n\
    \    'power_production_next_24hours', translation_key=\n    'power_production_next_24hours',\
    \ state=lambda estimate: estimate.\n    power_production_at_time(estimate.now()\
    \ + timedelta(hours=24)),\n    device_class=SensorDeviceClass.POWER, entity_registry_enabled_default=\n\
    \    False, native_unit_of_measurement=UnitOfPower.WATT),\n    ForecastSolarSensorEntityDescription(key='energy_current_hour',\n\
    \    translation_key='energy_current_hour', state=lambda estimate: estimate.\n\
    \    energy_current_hour, device_class=SensorDeviceClass.ENERGY,\n    native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n\
    \    suggested_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n    suggested_display_precision=1),\
    \ ForecastSolarSensorEntityDescription(\n    key='energy_next_hour', translation_key='energy_next_hour',\
    \ state=lambda\n    estimate: estimate.sum_energy_production(1), device_class=\n\
    \    SensorDeviceClass.ENERGY, native_unit_of_measurement=UnitOfEnergy.\n    WATT_HOUR,\
    \ suggested_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n    suggested_display_precision=1))"
  - (ForecastSolarSensorEntityDescription, ...)
  - "(FritzSensorEntityDescription(key='external_ip', translation_key=\n    'external_ip',\
    \ icon='mdi:earth', value_fn=_retrieve_external_ip_state),\n    FritzSensorEntityDescription(key='external_ipv6',\
    \ translation_key=\n    'external_ipv6', icon='mdi:earth', value_fn=\n    _retrieve_external_ipv6_state,\
    \ is_suitable=lambda info: info.\n    ipv6_active), FritzSensorEntityDescription(key='device_uptime',\n\
    \    translation_key='device_uptime', device_class=SensorDeviceClass.\n    TIMESTAMP,\
    \ entity_category=EntityCategory.DIAGNOSTIC, value_fn=\n    _retrieve_device_uptime_state,\
    \ is_suitable=lambda info: True),\n    FritzSensorEntityDescription(key='connection_uptime',\
    \ translation_key=\n    'connection_uptime', device_class=SensorDeviceClass.TIMESTAMP,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, value_fn=\n    _retrieve_connection_uptime_state),\
    \ FritzSensorEntityDescription(key=\n    'kb_s_sent', translation_key='kb_s_sent',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, native_unit_of_measurement=UnitOfDataRate.\n\
    \    KILOBYTES_PER_SECOND, device_class=SensorDeviceClass.DATA_RATE, icon=\n \
    \   'mdi:upload', value_fn=_retrieve_kb_s_sent_state),\n    FritzSensorEntityDescription(key='kb_s_received',\
    \ translation_key=\n    'kb_s_received', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfDataRate.KILOBYTES_PER_SECOND,\n    device_class=SensorDeviceClass.DATA_RATE,\
    \ icon='mdi:download', value_fn\n    =_retrieve_kb_s_received_state), FritzSensorEntityDescription(key=\n\
    \    'max_kb_s_sent', translation_key='max_kb_s_sent',\n    native_unit_of_measurement=UnitOfDataRate.KILOBITS_PER_SECOND,\n\
    \    device_class=SensorDeviceClass.DATA_RATE, icon='mdi:upload',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=\n    _retrieve_max_kb_s_sent_state), FritzSensorEntityDescription(key=\n\
    \    'max_kb_s_received', translation_key='max_kb_s_received',\n    native_unit_of_measurement=UnitOfDataRate.KILOBITS_PER_SECOND,\n\
    \    device_class=SensorDeviceClass.DATA_RATE, icon='mdi:download',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=\n    _retrieve_max_kb_s_received_state), FritzSensorEntityDescription(key=\n\
    \    'gb_sent', translation_key='gb_sent', state_class=SensorStateClass.\n   \
    \ TOTAL_INCREASING, native_unit_of_measurement=UnitOfInformation.\n    GIGABYTES,\
    \ device_class=SensorDeviceClass.DATA_SIZE, icon='mdi:upload',\n    value_fn=_retrieve_gb_sent_state),\
    \ FritzSensorEntityDescription(key=\n    'gb_received', translation_key='gb_received',\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, native_unit_of_measurement=\n\
    \    UnitOfInformation.GIGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    icon='mdi:download', value_fn=_retrieve_gb_received_state),\n    FritzSensorEntityDescription(key='link_kb_s_sent',\
    \ translation_key=\n    'link_kb_s_sent', native_unit_of_measurement=UnitOfDataRate.\n\
    \    KILOBITS_PER_SECOND, device_class=SensorDeviceClass.DATA_RATE, icon=\n  \
    \  'mdi:upload', value_fn=_retrieve_link_kb_s_sent_state),\n    FritzSensorEntityDescription(key='link_kb_s_received',\
    \ translation_key=\n    'link_kb_s_received', native_unit_of_measurement=UnitOfDataRate.\n\
    \    KILOBITS_PER_SECOND, device_class=SensorDeviceClass.DATA_RATE, icon=\n  \
    \  'mdi:download', value_fn=_retrieve_link_kb_s_received_state),\n    FritzSensorEntityDescription(key='link_noise_margin_sent',\n\
    \    translation_key='link_noise_margin_sent', native_unit_of_measurement=\n \
    \   SIGNAL_STRENGTH_DECIBELS, icon='mdi:upload', value_fn=\n    _retrieve_link_noise_margin_sent_state,\
    \ is_suitable=lambda info: info.\n    wan_enabled and info.connection == DSL_CONNECTION),\n\
    \    FritzSensorEntityDescription(key='link_noise_margin_received',\n    translation_key='link_noise_margin_received',\n\
    \    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS, icon=\n    'mdi:download',\
    \ value_fn=_retrieve_link_noise_margin_received_state,\n    is_suitable=lambda\
    \ info: info.wan_enabled and info.connection ==\n    DSL_CONNECTION), FritzSensorEntityDescription(key=\n\
    \    'link_attenuation_sent', translation_key='link_attenuation_sent',\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS,\
    \ icon='mdi:upload',\n    value_fn=_retrieve_link_attenuation_sent_state, is_suitable=lambda\
    \ info:\n    info.wan_enabled and info.connection == DSL_CONNECTION),\n    FritzSensorEntityDescription(key='link_attenuation_received',\n\
    \    translation_key='link_attenuation_received', native_unit_of_measurement\n\
    \    =SIGNAL_STRENGTH_DECIBELS, icon='mdi:download', value_fn=\n    _retrieve_link_attenuation_received_state,\
    \ is_suitable=lambda info: \n    info.wan_enabled and info.connection == DSL_CONNECTION))"
  - "(FritzSensorEntityDescription(key='temperature', native_unit_of_measurement\n\
    \    =UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category_fn=\n    entity_category_temperature,\
    \ suitable=suitable_temperature,\n    native_value=lambda device: device.temperature),\n\
    \    FritzSensorEntityDescription(key='humidity', native_unit_of_measurement\n\
    \    =PERCENTAGE, device_class=SensorDeviceClass.HUMIDITY, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ suitable=lambda device: device.\n    rel_humidity is not None, native_value=lambda\
    \ device: device.\n    rel_humidity), FritzSensorEntityDescription(key='battery',\n\
    \    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    BATTERY, entity_category=EntityCategory.DIAGNOSTIC, suitable=lambda\n   \
    \ device: device.battery_level is not None, native_value=lambda device:\n    device.battery_level),\
    \ FritzSensorEntityDescription(key=\n    'power_consumption', native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n   \
    \ MEASUREMENT, suitable=lambda device: device.has_powermeter,\n    native_value=lambda\
    \ device: round((device.power or 0.0) / 1000, 3)),\n    FritzSensorEntityDescription(key='voltage',\
    \ native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT, device_class=SensorDeviceClass.VOLTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, suitable=lambda device:\n    device.has_powermeter,\
    \ native_value=lambda device: round((device.\n    voltage or 0.0) / 1000, 2)),\
    \ FritzSensorEntityDescription(key=\n    'electric_current', native_unit_of_measurement=UnitOfElectricCurrent.\n\
    \    AMPERE, device_class=SensorDeviceClass.CURRENT, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ suitable=lambda device: device.\n    has_powermeter, native_value=lambda device:\
    \ round((device.current or \n    0.0) / 1000, 3)), FritzSensorEntityDescription(key='total_energy',\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, device_class=\n \
    \   SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    suitable=lambda device: device.has_powermeter, native_value=lambda\n    device:\
    \ (device.energy or 0.0) / 1000), FritzSensorEntityDescription(\n    key='comfort_temperature',\
    \ translation_key='comfort_temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, suitable=suitable_comfort_temperature, native_value=lambda\n\
    \    device: device.comfort_temperature), FritzSensorEntityDescription(key=\n\
    \    'eco_temperature', translation_key='eco_temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, suitable=suitable_eco_temperature, native_value=lambda\n    device:\
    \ device.eco_temperature), FritzSensorEntityDescription(key=\n    'nextchange_temperature',\
    \ translation_key='nextchange_temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, suitable=suitable_nextchange_temperature, native_value=lambda\n\
    \    device: device.nextchange_temperature), FritzSensorEntityDescription(\n \
    \   key='nextchange_time', translation_key='nextchange_time', device_class=\n\
    \    SensorDeviceClass.TIMESTAMP, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    suitable=suitable_nextchange_time, native_value=lambda device:\n    utc_from_timestamp(device.nextchange_endperiod)),\n\
    \    FritzSensorEntityDescription(key='nextchange_preset', translation_key=\n\
    \    'nextchange_preset', entity_category=EntityCategory.DIAGNOSTIC,\n    suitable=suitable_nextchange_temperature,\
    \ native_value=\n    value_nextchange_preset), FritzSensorEntityDescription(key=\n\
    \    'scheduled_preset', translation_key='scheduled_preset', entity_category\n\
    \    =EntityCategory.DIAGNOSTIC, suitable=suitable_nextchange_temperature,\n \
    \   native_value=value_scheduled_preset))"
  - (FritzSensorEntityDescription, ...)
  - "(FullySensorEntityDescription(key='batteryLevel', device_class=\n    SensorDeviceClass.BATTERY,\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), FullySensorEntityDescription(key=\n\
    \    'currentPage', translation_key='current_page', entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ state_fn=truncate_url),\n    FullySensorEntityDescription(key='screenOrientation',\
    \ translation_key=\n    'screen_orientation', entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    FullySensorEntityDescription(key='foregroundApp', translation_key=\n    'foreground_app',\
    \ entity_category=EntityCategory.DIAGNOSTIC),\n    FullySensorEntityDescription(key='internalStorageFreeSpace',\n\
    \    translation_key='internal_storage_free_space', entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ native_unit_of_measurement=UnitOfInformation\n    .MEGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, round_state_value=True),\n \
    \   FullySensorEntityDescription(key='internalStorageTotalSpace',\n    translation_key='internal_storage_total_space',\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, native_unit_of_measurement=UnitOfInformation\n\
    \    .MEGABYTES, device_class=SensorDeviceClass.DATA_SIZE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ round_state_value=True),\n    FullySensorEntityDescription(key='ramFreeMemory',\
    \ translation_key=\n    'ram_free_memory', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    native_unit_of_measurement=UnitOfInformation.MEGABYTES, device_class=\n \
    \   SensorDeviceClass.DATA_SIZE, state_class=SensorStateClass.MEASUREMENT,\n \
    \   round_state_value=True), FullySensorEntityDescription(key=\n    'ramTotalMemory',\
    \ translation_key='ram_total_memory', entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ native_unit_of_measurement=UnitOfInformation\n    .MEGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, round_state_value=True))"
  - (FullySensorEntityDescription, ...)
  - "(GardenaBluetoothSensorEntityDescription(key=Valve.activation_reason.uuid,\n\
    \    translation_key='activation_reason', state_class=SensorStateClass.\n    MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ char=Valve.activation_reason),\n    GardenaBluetoothSensorEntityDescription(key=Battery.battery_level.uuid,\n\
    \    state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.BATTERY,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=PERCENTAGE,\
    \ char=Battery.battery_level),\n    GardenaBluetoothSensorEntityDescription(key=Sensor.battery_level.uuid,\n\
    \    translation_key='sensor_battery_level', state_class=SensorStateClass.\n \
    \   MEASUREMENT, device_class=SensorDeviceClass.BATTERY, entity_category=\n  \
    \  EntityCategory.DIAGNOSTIC, native_unit_of_measurement=PERCENTAGE, char=\n \
    \   Sensor.battery_level, connected_state=Sensor.connected_state),\n    GardenaBluetoothSensorEntityDescription(key=Sensor.value.uuid,\n\
    \    state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.MOISTURE,\
    \ native_unit_of_measurement=PERCENTAGE, char\n    =Sensor.value, connected_state=Sensor.connected_state),\n\
    \    GardenaBluetoothSensorEntityDescription(key=Sensor.type.uuid,\n    translation_key='sensor_type',\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, char=Sensor.type, connected_state=Sensor.connected_state),\n\
    \    GardenaBluetoothSensorEntityDescription(key=Sensor.\n    measurement_timestamp.uuid,\
    \ translation_key=\n    'sensor_measurement_timestamp', device_class=SensorDeviceClass.\n\
    \    TIMESTAMP, entity_category=EntityCategory.DIAGNOSTIC, char=Sensor.\n    measurement_timestamp,\
    \ connected_state=Sensor.connected_state))"
  - "(GeocachingSensorEntityDescription(key='find_count', translation_key=\n    'find_count',\
    \ icon='mdi:notebook-edit-outline',\n    native_unit_of_measurement='caches',\
    \ value_fn=lambda status: status.\n    user.find_count), GeocachingSensorEntityDescription(key='hide_count',\n\
    \    translation_key='hide_count', icon='mdi:eye-off-outline',\n    native_unit_of_measurement='caches',\
    \ entity_registry_visible_default=\n    False, value_fn=lambda status: status.user.hide_count),\n\
    \    GeocachingSensorEntityDescription(key='favorite_points',\n    translation_key='favorite_points',\
    \ icon='mdi:heart-outline',\n    native_unit_of_measurement='points', entity_registry_visible_default=\n\
    \    False, value_fn=lambda status: status.user.favorite_points),\n    GeocachingSensorEntityDescription(key='souvenir_count',\
    \ translation_key\n    ='souvenir_count', icon='mdi:license', native_unit_of_measurement=\n\
    \    'souvenirs', value_fn=lambda status: status.user.souvenir_count),\n    GeocachingSensorEntityDescription(key='awarded_favorite_points',\n\
    \    translation_key='awarded_favorite_points', icon='mdi:heart',\n    native_unit_of_measurement='points',\
    \ entity_registry_visible_default=\n    False, value_fn=lambda status: status.user.awarded_favorite_points))"
  - (GeocachingSensorEntityDescription, ...)
  - "(GiosSensorEntityDescription(key=ATTR_AQI, value=lambda sensors: sensors.\n \
    \   aqi.value if sensors.aqi else None, icon='mdi:air-filter', device_class\n\
    \    =SensorDeviceClass.ENUM, options=['very_bad', 'bad', 'sufficient',\n    'moderate',\
    \ 'good', 'very_good'], translation_key='aqi'),\n    GiosSensorEntityDescription(key=ATTR_C6H6,\
    \ value=lambda sensors: \n    sensors.c6h6.value if sensors.c6h6 else None,\n\
    \    suggested_display_precision=0, icon='mdi:molecule',\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    state_class=SensorStateClass.MEASUREMENT, translation_key='c6h6'),\n    GiosSensorEntityDescription(key=ATTR_CO,\
    \ value=lambda sensors: sensors.\n    co.value if sensors.co else None, suggested_display_precision=0,\
    \ icon=\n    'mdi:molecule', native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, translation_key='co'), GiosSensorEntityDescription(key=\n\
    \    ATTR_NO2, value=lambda sensors: sensors.no2.value if sensors.no2 else\n \
    \   None, suggested_display_precision=0, device_class=SensorDeviceClass.\n   \
    \ NITROGEN_DIOXIDE, native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), GiosSensorEntityDescription(key=ATTR_NO2,\
    \ subkey='index',\n    value=lambda sensors: sensors.no2.index if sensors.no2\
    \ else None, icon=\n    'mdi:molecule', device_class=SensorDeviceClass.ENUM, options=[\n\
    \    'very_bad', 'bad', 'sufficient', 'moderate', 'good', 'very_good'],\n    translation_key='no2_index'),\
    \ GiosSensorEntityDescription(key=ATTR_O3,\n    value=lambda sensors: sensors.o3.value\
    \ if sensors.o3 else None,\n    suggested_display_precision=0, device_class=SensorDeviceClass.OZONE,\n\
    \    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n  \
    \  state_class=SensorStateClass.MEASUREMENT), GiosSensorEntityDescription(\n \
    \   key=ATTR_O3, subkey='index', value=lambda sensors: sensors.o3.index if\n \
    \   sensors.o3 else None, icon='mdi:molecule', device_class=\n    SensorDeviceClass.ENUM,\
    \ options=['very_bad', 'bad', 'sufficient',\n    'moderate', 'good', 'very_good'],\
    \ translation_key='o3_index'),\n    GiosSensorEntityDescription(key=ATTR_PM10,\
    \ value=lambda sensors: \n    sensors.pm10.value if sensors.pm10 else None,\n\
    \    suggested_display_precision=0, device_class=SensorDeviceClass.PM10,\n   \
    \ native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ GiosSensorEntityDescription(\n    key=ATTR_PM10, subkey='index', value=lambda\
    \ sensors: sensors.pm10.index if\n    sensors.pm10 else None, icon='mdi:molecule',\
    \ device_class=\n    SensorDeviceClass.ENUM, options=['very_bad', 'bad', 'sufficient',\n\
    \    'moderate', 'good', 'very_good'], translation_key='pm10_index'),\n    GiosSensorEntityDescription(key=ATTR_PM25,\
    \ value=lambda sensors: \n    sensors.pm25.value if sensors.pm25 else None,\n\
    \    suggested_display_precision=0, device_class=SensorDeviceClass.PM25,\n   \
    \ native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ GiosSensorEntityDescription(\n    key=ATTR_PM25, subkey='index', value=lambda\
    \ sensors: sensors.pm25.index if\n    sensors.pm25 else None, icon='mdi:molecule',\
    \ device_class=\n    SensorDeviceClass.ENUM, options=['very_bad', 'bad', 'sufficient',\n\
    \    'moderate', 'good', 'very_good'], translation_key='pm25_index'),\n    GiosSensorEntityDescription(key=ATTR_SO2,\
    \ value=lambda sensors: sensors\n    .so2.value if sensors.so2 else None, suggested_display_precision=0,\n\
    \    device_class=SensorDeviceClass.SULPHUR_DIOXIDE,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    state_class=SensorStateClass.MEASUREMENT), GiosSensorEntityDescription(\n\
    \    key=ATTR_SO2, subkey='index', value=lambda sensors: sensors.so2.index if\n\
    \    sensors.so2 else None, icon='mdi:molecule', device_class=\n    SensorDeviceClass.ENUM,\
    \ options=['very_bad', 'bad', 'sufficient',\n    'moderate', 'good', 'very_good'],\
    \ translation_key='so2_index'))"
  - (GiosSensorEntityDescription, ...)
  - "(GitHubSensorEntityDescription(key='discussions_count', translation_key=\n  \
    \  'discussions_count', native_unit_of_measurement='Discussions',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass\n    .MEASUREMENT, value_fn=lambda data: data['discussion']['total']),\n\
    \    GitHubSensorEntityDescription(key='stargazers_count', translation_key=\n\
    \    'stargazers_count', icon='mdi:star', native_unit_of_measurement='Stars',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass\n\
    \    .MEASUREMENT, value_fn=lambda data: data['stargazers_count']),\n    GitHubSensorEntityDescription(key='subscribers_count',\
    \ translation_key=\n    'subscribers_count', icon='mdi:glasses', native_unit_of_measurement=\n\
    \    'Watchers', entity_category=EntityCategory.DIAGNOSTIC, state_class=\n   \
    \ SensorStateClass.MEASUREMENT, value_fn=lambda data: data['watchers'][\n    'total']),\
    \ GitHubSensorEntityDescription(key='forks_count',\n    translation_key='forks_count',\
    \ icon='mdi:source-fork',\n    native_unit_of_measurement='Forks', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT, value_fn=lambda\n \
    \   data: data['forks_count']), GitHubSensorEntityDescription(key=\n    'issues_count',\
    \ translation_key='issues_count',\n    native_unit_of_measurement='Issues', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT, value_fn=lambda\n \
    \   data: data['issue']['total']), GitHubSensorEntityDescription(key=\n    'pulls_count',\
    \ translation_key='pulls_count',\n    native_unit_of_measurement='Pull Requests',\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda data: data['pull_request']['total']),\n    GitHubSensorEntityDescription(key='latest_commit',\
    \ translation_key=\n    'latest_commit', value_fn=lambda data: data['default_branch_ref'][\n\
    \    'commit']['message'][:255], attr_fn=lambda data: {'sha': data[\n    'default_branch_ref']['commit']['sha'],\
    \ 'url': data[\n    'default_branch_ref']['commit']['url']}), GitHubSensorEntityDescription\n\
    \    (key='latest_discussion', translation_key='latest_discussion', avabl_fn\n\
    \    =lambda data: data['discussion']['discussions'], value_fn=lambda data:\n\
    \    data['discussion']['discussions'][0]['title'][:255], attr_fn=lambda\n   \
    \ data: {'url': data['discussion']['discussions'][0]['url'], 'number':\n    data['discussion']['discussions'][0]['number']}),\n\
    \    GitHubSensorEntityDescription(key='latest_release', translation_key=\n  \
    \  'latest_release', avabl_fn=lambda data: data['release'] is not None,\n    value_fn=lambda\
    \ data: data['release']['name'][:255], attr_fn=lambda\n    data: {'url': data['release']['url'],\
    \ 'tag': data['release']['tag']}),\n    GitHubSensorEntityDescription(key='latest_issue',\
    \ translation_key=\n    'latest_issue', avabl_fn=lambda data: data['issue']['issues'],\
    \ value_fn\n    =lambda data: data['issue']['issues'][0]['title'][:255], attr_fn=lambda\n\
    \    data: {'url': data['issue']['issues'][0]['url'], 'number': data['issue'\n\
    \    ]['issues'][0]['number']}), GitHubSensorEntityDescription(key=\n    'latest_pull_request',\
    \ translation_key='latest_pull_request', avabl_fn=\n    lambda data: data['pull_request']['pull_requests'],\
    \ value_fn=lambda\n    data: data['pull_request']['pull_requests'][0]['title'][:255],\
    \ attr_fn=\n    lambda data: {'url': data['pull_request']['pull_requests'][0]['url'],\n\
    \    'number': data['pull_request']['pull_requests'][0]['number']}),\n    GitHubSensorEntityDescription(key='latest_tag',\
    \ translation_key=\n    'latest_tag', avabl_fn=lambda data: data['refs']['tags'],\
    \ value_fn=lambda\n    data: data['refs']['tags'][0]['name'][:255], attr_fn=lambda\
    \ data: {\n    'url': data['refs']['tags'][0]['target']['url']}))"
  - (GitHubSensorEntityDescription, ...)
  - "(GoogleWifiSensorEntityDescription(key=ATTR_CURRENT_VERSION, primary_key=\n \
    \   'software', sensor_key='softwareVersion', icon=\n    'mdi:checkbox-marked-circle-outline'),\n\
    \    GoogleWifiSensorEntityDescription(key=ATTR_NEW_VERSION, primary_key=\n  \
    \  'software', sensor_key='updateNewVersion', icon='mdi:update'),\n    GoogleWifiSensorEntityDescription(key=ATTR_UPTIME,\
    \ primary_key='system',\n    sensor_key='uptime', native_unit_of_measurement=UnitOfTime.DAYS,\
    \ icon=\n    'mdi:timelapse'), GoogleWifiSensorEntityDescription(key=\n    ATTR_LAST_RESTART,\
    \ primary_key='system', sensor_key='uptime', icon=\n    'mdi:restart'), GoogleWifiSensorEntityDescription(key=ATTR_LOCAL_IP,\n\
    \    primary_key='wan', sensor_key='localIpAddress', icon=\n    'mdi:access-point-network'),\
    \ GoogleWifiSensorEntityDescription(key=\n    ATTR_STATUS, primary_key='wan',\
    \ sensor_key='online', icon='mdi:google'))"
  - (GoogleWifiSensorEntityDescription, ...)
  - (GrowattSensorEntityDescription, ...)
  - (HandlerT, ApiItemT)
  - "(HeatMeterSensorEntityDescription(key='heat_usage_mwh', icon='mdi:fire',\n  \
    \  name='Heat usage MWh', native_unit_of_measurement=UnitOfEnergy.\n    MEGA_WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY, state_class=\n    SensorStateClass.TOTAL,\
    \ value_fn=lambda res: res.heat_usage_mwh),\n    HeatMeterSensorEntityDescription(key='volume_usage_m3',\
    \ icon='mdi:fire',\n    name='Volume usage', device_class=SensorDeviceClass.VOLUME,\n\
    \    native_unit_of_measurement=UnitOfVolume.CUBIC_METERS, state_class=\n    SensorStateClass.TOTAL,\
    \ value_fn=lambda res: res.volume_usage_m3),\n    HeatMeterSensorEntityDescription(key='heat_usage_gj',\
    \ icon='mdi:fire',\n    name='Heat usage GJ', native_unit_of_measurement=UnitOfEnergy.\n\
    \    GIGA_JOULE, device_class=SensorDeviceClass.ENERGY, state_class=\n    SensorStateClass.TOTAL,\
    \ value_fn=lambda res: res.heat_usage_gj),\n    HeatMeterSensorEntityDescription(key='heat_previous_year_mwh',\
    \ icon=\n    'mdi:fire', name='Heat previous year MWh', native_unit_of_measurement=\n\
    \    UnitOfEnergy.MEGA_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n   \
    \ entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda res: res.\n    heat_previous_year_mwh),\
    \ HeatMeterSensorEntityDescription(key=\n    'heat_previous_year_gj', icon='mdi:fire',\
    \ name='Heat previous year GJ',\n    native_unit_of_measurement=UnitOfEnergy.GIGA_JOULE,\
    \ device_class=\n    SensorDeviceClass.ENERGY, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    value_fn=lambda res: res.heat_previous_year_gj),\n    HeatMeterSensorEntityDescription(key='volume_previous_year_m3',\
    \ icon=\n    'mdi:fire', name='Volume usage previous year', device_class=\n  \
    \  SensorDeviceClass.VOLUME, native_unit_of_measurement=UnitOfVolume.\n    CUBIC_METERS,\
    \ entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda\n    res: res.volume_previous_year_m3),\
    \ HeatMeterSensorEntityDescription(key\n    ='ownership_number', name='Ownership\
    \ number', icon='mdi:identifier',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda res: res.\n    ownership_number), HeatMeterSensorEntityDescription(key='error_number',\n\
    \    name='Error number', icon='mdi:home-alert', entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda res: res.error_number),\n    HeatMeterSensorEntityDescription(key='device_number',\
    \ name=\n    'Device number', icon='mdi:identifier', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, value_fn=lambda res: res.device_number),\n    HeatMeterSensorEntityDescription(key='measurement_period_minutes',\
    \ name\n    ='Measurement period minutes', device_class=SensorDeviceClass.DURATION,\n\
    \    native_unit_of_measurement=UnitOfTime.MINUTES, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda res: res.\n    measurement_period_minutes), HeatMeterSensorEntityDescription(key=\n\
    \    'power_max_kw', name='Power max', native_unit_of_measurement=\n    UnitOfPower.KILO_WATT,\
    \ device_class=SensorDeviceClass.POWER,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda res: res.\n    power_max_kw), HeatMeterSensorEntityDescription(key=\n\
    \    'power_max_previous_year_kw', name='Power max previous year',\n    native_unit_of_measurement=UnitOfPower.KILO_WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    value_fn=lambda res: res.power_max_previous_year_kw),\n    HeatMeterSensorEntityDescription(key='flowrate_max_m3ph',\
    \ name=\n    'Flowrate max', native_unit_of_measurement=UnitOfVolumeFlowRate.\n\
    \    CUBIC_METERS_PER_HOUR, icon='mdi:water-outline', entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda res: res.flowrate_max_m3ph),\n    HeatMeterSensorEntityDescription(key='flowrate_max_previous_year_m3ph',\n\
    \    name='Flowrate max previous year', native_unit_of_measurement=\n    UnitOfVolumeFlowRate.CUBIC_METERS_PER_HOUR,\
    \ icon='mdi:water-outline',\n    entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda\
    \ res: res.\n    flowrate_max_previous_year_m3ph), HeatMeterSensorEntityDescription(key=\n\
    \    'return_temperature_max_c', name='Return temperature max',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, value_fn=lambda res: res.return_temperature_max_c),\n    HeatMeterSensorEntityDescription(key=\n\
    \    'return_temperature_max_previous_year_c', name=\n    'Return temperature\
    \ max previous year', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda res: res.\n    return_temperature_max_previous_year_c),\n  \
    \  HeatMeterSensorEntityDescription(key='flow_temperature_max_c', name=\n    'Flow\
    \ temperature max', native_unit_of_measurement=UnitOfTemperature.\n    CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda res: res.\n    flow_temperature_max_c), HeatMeterSensorEntityDescription(key=\n\
    \    'flow_temperature_max_previous_year_c', name=\n    'Flow temperature max\
    \ previous year', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda res: res.\n    flow_temperature_max_previous_year_c), HeatMeterSensorEntityDescription\n\
    \    (key='operating_hours', name='Operating hours', device_class=\n    SensorDeviceClass.DURATION,\
    \ native_unit_of_measurement=UnitOfTime.HOURS,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda res: res.\n    operating_hours), HeatMeterSensorEntityDescription(key='flow_hours',\n\
    \    name='Flow hours', device_class=SensorDeviceClass.DURATION,\n    native_unit_of_measurement=UnitOfTime.HOURS,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value_fn=lambda res: res.flow_hours),\n\
    \    HeatMeterSensorEntityDescription(key='fault_hours', name='Fault hours',\n\
    \    device_class=SensorDeviceClass.DURATION, native_unit_of_measurement=\n  \
    \  UnitOfTime.HOURS, entity_category=EntityCategory.DIAGNOSTIC, value_fn=\n  \
    \  lambda res: res.fault_hours), HeatMeterSensorEntityDescription(key=\n    'fault_hours_previous_year',\
    \ name='Fault hours previous year',\n    device_class=SensorDeviceClass.DURATION,\
    \ native_unit_of_measurement=\n    UnitOfTime.HOURS, entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=\n    lambda res: res.fault_hours_previous_year),\n    HeatMeterSensorEntityDescription(key='yearly_set_day',\
    \ name=\n    'Yearly set day', icon='mdi:clock-outline', entity_category=\n  \
    \  EntityCategory.DIAGNOSTIC, value_fn=lambda res: res.yearly_set_day),\n    HeatMeterSensorEntityDescription(key='monthly_set_day',\
    \ name=\n    'Monthly set day', icon='mdi:clock-outline', entity_category=\n \
    \   EntityCategory.DIAGNOSTIC, value_fn=lambda res: res.monthly_set_day),\n  \
    \  HeatMeterSensorEntityDescription(key='meter_date_time', name=\n    'Meter date\
    \ time', icon='mdi:clock-outline', device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value_fn=lambda res: dt_util.as_utc(res.meter_date_time)\
    \ if res.\n    meter_date_time else None), HeatMeterSensorEntityDescription(key=\n\
    \    'measuring_range_m3ph', name='Measuring range',\n    native_unit_of_measurement=UnitOfVolumeFlowRate.CUBIC_METERS_PER_HOUR,\n\
    \    icon='mdi:water-outline', entity_category=EntityCategory.DIAGNOSTIC,\n  \
    \  value_fn=lambda res: res.measuring_range_m3ph),\n    HeatMeterSensorEntityDescription(key='settings_and_firmware',\
    \ name=\n    'Settings and firmware', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    value_fn=lambda res: res.settings_and_firmware))"
  - "(HomeWizardSensorEntityDescription(key='smr_version', translation_key=\n    'dsmr_version',\
    \ icon='mdi:counter', entity_category=EntityCategory.\n    DIAGNOSTIC, has_fn=lambda\
    \ data: data.smr_version is not None, value_fn=\n    lambda data: data.smr_version),\
    \ HomeWizardSensorEntityDescription(key=\n    'meter_model', translation_key='meter_model',\
    \ icon='mdi:gauge',\n    entity_category=EntityCategory.DIAGNOSTIC, has_fn=lambda\
    \ data: data.\n    meter_model is not None, value_fn=lambda data: data.meter_model),\n\
    \    HomeWizardSensorEntityDescription(key='unique_meter_id',\n    translation_key='unique_meter_id',\
    \ icon='mdi:alphabetical-variant',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ has_fn=lambda data: data.\n    unique_meter_id is not None, value_fn=lambda\
    \ data: data.unique_meter_id\n    ), HomeWizardSensorEntityDescription(key='wifi_ssid',\
    \ translation_key=\n    'wifi_ssid', icon='mdi:wifi', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    has_fn=lambda data: data.wifi_ssid is not None, value_fn=lambda data:\n \
    \   data.wifi_ssid), HomeWizardSensorEntityDescription(key='active_tariff',\n\
    \    translation_key='active_tariff', icon='mdi:calendar-clock', has_fn=lambda\n\
    \    data: data.active_tariff is not None, value_fn=lambda data: None if \n  \
    \  data.active_tariff is None else str(data.active_tariff), device_class=\n  \
    \  SensorDeviceClass.ENUM, options=['1', '2', '3', '4']),\n    HomeWizardSensorEntityDescription(key='wifi_strength',\
    \ translation_key=\n    'wifi_strength', icon='mdi:wifi', native_unit_of_measurement=PERCENTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False,\n    has_fn=lambda data: data.wifi_strength\
    \ is not None, value_fn=lambda\n    data: data.wifi_strength), HomeWizardSensorEntityDescription(key=\n\
    \    'total_power_import_kwh', translation_key='total_energy_import_kwh',\n  \
    \  native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, device_class=\n   \
    \ SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n \
    \   has_fn=lambda data: data.total_energy_import_kwh is not None, value_fn=\n\
    \    lambda data: data.total_energy_import_kwh or None),\n    HomeWizardSensorEntityDescription(key='total_power_import_t1_kwh',\n\
    \    translation_key='total_energy_import_t1_kwh',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    has_fn=lambda data: data.total_energy_import_t1_kwh is not None,\n    value_fn=lambda\
    \ data: data.total_energy_import_t1_kwh or None),\n    HomeWizardSensorEntityDescription(key='total_power_import_t2_kwh',\n\
    \    translation_key='total_energy_import_t2_kwh',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    has_fn=lambda data: data.total_energy_import_t2_kwh is not None,\n    value_fn=lambda\
    \ data: data.total_energy_import_t2_kwh or None),\n    HomeWizardSensorEntityDescription(key='total_power_import_t3_kwh',\n\
    \    translation_key='total_energy_import_t3_kwh',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    has_fn=lambda data: data.total_energy_import_t3_kwh is not None,\n    value_fn=lambda\
    \ data: data.total_energy_import_t3_kwh or None),\n    HomeWizardSensorEntityDescription(key='total_power_import_t4_kwh',\n\
    \    translation_key='total_energy_import_t4_kwh',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    has_fn=lambda data: data.total_energy_import_t4_kwh is not None,\n    value_fn=lambda\
    \ data: data.total_energy_import_t4_kwh or None),\n    HomeWizardSensorEntityDescription(key='total_power_export_kwh',\n\
    \    translation_key='total_energy_export_kwh', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n   \
    \ state_class=SensorStateClass.TOTAL_INCREASING, has_fn=lambda data: data\n  \
    \  .total_energy_export_kwh is not None, enabled_fn=lambda data: data.\n    total_energy_export_kwh\
    \ != 0, value_fn=lambda data: data.\n    total_energy_export_kwh or None), HomeWizardSensorEntityDescription(key\n\
    \    ='total_power_export_t1_kwh', translation_key=\n    'total_energy_export_t1_kwh',\
    \ native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, has_fn=lambda data: data.\n\
    \    total_energy_export_t1_kwh is not None, enabled_fn=lambda data: data.\n \
    \   total_energy_export_t1_kwh != 0, value_fn=lambda data: data.\n    total_energy_export_t1_kwh\
    \ or None), HomeWizardSensorEntityDescription(\n    key='total_power_export_t2_kwh',\
    \ translation_key=\n    'total_energy_export_t2_kwh', native_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY, state_class=\n   \
    \ SensorStateClass.TOTAL_INCREASING, has_fn=lambda data: data.\n    total_energy_export_t2_kwh\
    \ is not None, enabled_fn=lambda data: data.\n    total_energy_export_t2_kwh !=\
    \ 0, value_fn=lambda data: data.\n    total_energy_export_t2_kwh or None), HomeWizardSensorEntityDescription(\n\
    \    key='total_power_export_t3_kwh', translation_key=\n    'total_energy_export_t3_kwh',\
    \ native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, has_fn=lambda data: data.\n\
    \    total_energy_export_t3_kwh is not None, enabled_fn=lambda data: data.\n \
    \   total_energy_export_t3_kwh != 0, value_fn=lambda data: data.\n    total_energy_export_t3_kwh\
    \ or None), HomeWizardSensorEntityDescription(\n    key='total_power_export_t4_kwh',\
    \ translation_key=\n    'total_energy_export_t4_kwh', native_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY, state_class=\n   \
    \ SensorStateClass.TOTAL_INCREASING, has_fn=lambda data: data.\n    total_energy_export_t4_kwh\
    \ is not None, enabled_fn=lambda data: data.\n    total_energy_export_t4_kwh !=\
    \ 0, value_fn=lambda data: data.\n    total_energy_export_t4_kwh or None), HomeWizardSensorEntityDescription(\n\
    \    key='active_power_w', translation_key='active_power_w',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n\
    \    suggested_display_precision=0, has_fn=lambda data: data.active_power_w\n\
    \     is not None, value_fn=lambda data: data.active_power_w),\n    HomeWizardSensorEntityDescription(key='active_power_l1_w',\n\
    \    translation_key='active_power_l1_w', native_unit_of_measurement=\n    UnitOfPower.WATT,\
    \ device_class=SensorDeviceClass.POWER, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ suggested_display_precision=0, has_fn=lambda\n    data: data.active_power_l1_w\
    \ is not None, value_fn=lambda data: data.\n    active_power_l1_w), HomeWizardSensorEntityDescription(key=\n\
    \    'active_power_l2_w', translation_key='active_power_l2_w',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n\
    \    suggested_display_precision=0, has_fn=lambda data: data.\n    active_power_l2_w\
    \ is not None, value_fn=lambda data: data.\n    active_power_l2_w), HomeWizardSensorEntityDescription(key=\n\
    \    'active_power_l3_w', translation_key='active_power_l3_w',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n\
    \    suggested_display_precision=0, has_fn=lambda data: data.\n    active_power_l3_w\
    \ is not None, value_fn=lambda data: data.\n    active_power_l3_w), HomeWizardSensorEntityDescription(key=\n\
    \    'active_voltage_l1_v', translation_key='active_voltage_l1_v',\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ device_class=\n    SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, has_fn=lambda data: data.\n    active_voltage_l1_v\
    \ is not None, value_fn=lambda data: data.\n    active_voltage_l1_v), HomeWizardSensorEntityDescription(key=\n\
    \    'active_voltage_l2_v', translation_key='active_voltage_l2_v',\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ device_class=\n    SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, has_fn=lambda data: data.\n    active_voltage_l2_v\
    \ is not None, value_fn=lambda data: data.\n    active_voltage_l2_v), HomeWizardSensorEntityDescription(key=\n\
    \    'active_voltage_l3_v', translation_key='active_voltage_l3_v',\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ device_class=\n    SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, has_fn=lambda data: data.\n    active_voltage_l3_v\
    \ is not None, value_fn=lambda data: data.\n    active_voltage_l3_v), HomeWizardSensorEntityDescription(key=\n\
    \    'active_current_l1_a', translation_key='active_current_l1_a',\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\
    \ device_class=\n    SensorDeviceClass.CURRENT, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, has_fn=lambda data: data.\n    active_current_l1_a\
    \ is not None, value_fn=lambda data: data.\n    active_current_l1_a), HomeWizardSensorEntityDescription(key=\n\
    \    'active_current_l2_a', translation_key='active_current_l2_a',\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\
    \ device_class=\n    SensorDeviceClass.CURRENT, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, has_fn=lambda data: data.\n    active_current_l2_a\
    \ is not None, value_fn=lambda data: data.\n    active_current_l2_a), HomeWizardSensorEntityDescription(key=\n\
    \    'active_current_l3_a', translation_key='active_current_l3_a',\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\
    \ device_class=\n    SensorDeviceClass.CURRENT, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, has_fn=lambda data: data.\n    active_current_l3_a\
    \ is not None, value_fn=lambda data: data.\n    active_current_l3_a), HomeWizardSensorEntityDescription(key=\n\
    \    'active_frequency_hz', translation_key='active_frequency_hz',\n    native_unit_of_measurement=UnitOfFrequency.HERTZ,\
    \ device_class=\n    SensorDeviceClass.FREQUENCY, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, has_fn=lambda data: data.\n    active_frequency_hz\
    \ is not None, value_fn=lambda data: data.\n    active_frequency_hz), HomeWizardSensorEntityDescription(key=\n\
    \    'voltage_sag_l1_count', translation_key='voltage_sag_l1_count', icon=\n \
    \   'mdi:alert', entity_category=EntityCategory.DIAGNOSTIC, has_fn=lambda\n  \
    \  data: data.voltage_sag_l1_count is not None, value_fn=lambda data: data\n \
    \   .voltage_sag_l1_count), HomeWizardSensorEntityDescription(key=\n    'voltage_sag_l2_count',\
    \ translation_key='voltage_sag_l2_count', icon=\n    'mdi:alert', entity_category=EntityCategory.DIAGNOSTIC,\
    \ has_fn=lambda\n    data: data.voltage_sag_l2_count is not None, value_fn=lambda\
    \ data: data\n    .voltage_sag_l2_count), HomeWizardSensorEntityDescription(key=\n\
    \    'voltage_sag_l3_count', translation_key='voltage_sag_l3_count', icon=\n \
    \   'mdi:alert', entity_category=EntityCategory.DIAGNOSTIC, has_fn=lambda\n  \
    \  data: data.voltage_sag_l3_count is not None, value_fn=lambda data: data\n \
    \   .voltage_sag_l3_count), HomeWizardSensorEntityDescription(key=\n    'voltage_swell_l1_count',\
    \ translation_key='voltage_swell_l1_count',\n    icon='mdi:alert', entity_category=EntityCategory.DIAGNOSTIC,\
    \ has_fn=lambda\n    data: data.voltage_swell_l1_count is not None, value_fn=lambda\
    \ data:\n    data.voltage_swell_l1_count), HomeWizardSensorEntityDescription(key=\n\
    \    'voltage_swell_l2_count', translation_key='voltage_swell_l2_count',\n   \
    \ icon='mdi:alert', entity_category=EntityCategory.DIAGNOSTIC, has_fn=lambda\n\
    \    data: data.voltage_swell_l2_count is not None, value_fn=lambda data:\n  \
    \  data.voltage_swell_l2_count), HomeWizardSensorEntityDescription(key=\n    'voltage_swell_l3_count',\
    \ translation_key='voltage_swell_l3_count',\n    icon='mdi:alert', entity_category=EntityCategory.DIAGNOSTIC,\
    \ has_fn=lambda\n    data: data.voltage_swell_l3_count is not None, value_fn=lambda\
    \ data:\n    data.voltage_swell_l3_count), HomeWizardSensorEntityDescription(key=\n\
    \    'any_power_fail_count', translation_key='any_power_fail_count', icon=\n \
    \   'mdi:transmission-tower-off', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    has_fn=lambda data: data.any_power_fail_count is not None, value_fn=lambda\n\
    \    data: data.any_power_fail_count), HomeWizardSensorEntityDescription(key\n\
    \    ='long_power_fail_count', translation_key='long_power_fail_count', icon\n\
    \    ='mdi:transmission-tower-off', entity_category=EntityCategory.\n    DIAGNOSTIC,\
    \ has_fn=lambda data: data.long_power_fail_count is not None,\n    value_fn=lambda\
    \ data: data.long_power_fail_count),\n    HomeWizardSensorEntityDescription(key='active_power_average_w',\n\
    \    translation_key='active_power_average_w', native_unit_of_measurement=\n \
    \   UnitOfPower.WATT, device_class=SensorDeviceClass.POWER, has_fn=lambda\n  \
    \  data: data.active_power_average_w is not None, value_fn=lambda data:\n    data.active_power_average_w),\
    \ HomeWizardSensorEntityDescription(key=\n    'monthly_power_peak_w', translation_key='monthly_power_peak_w',\n\
    \    native_unit_of_measurement=UnitOfPower.WATT, device_class=\n    SensorDeviceClass.POWER,\
    \ has_fn=lambda data: data.monthly_power_peak_w\n     is not None, value_fn=lambda\
    \ data: data.monthly_power_peak_w),\n    HomeWizardSensorEntityDescription(key='total_gas_m3',\
    \ translation_key=\n    'total_gas_m3', native_unit_of_measurement=UnitOfVolume.CUBIC_METERS,\n\
    \    device_class=SensorDeviceClass.GAS, state_class=SensorStateClass.\n    TOTAL_INCREASING,\
    \ has_fn=lambda data: data.total_gas_m3 is not None,\n    value_fn=lambda data:\
    \ data.total_gas_m3 or None),\n    HomeWizardSensorEntityDescription(key='gas_unique_id',\
    \ translation_key=\n    'gas_unique_id', icon='mdi:alphabetical-variant', entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, has_fn=lambda data: data.gas_unique_id is not\n\
    \    None, value_fn=lambda data: data.gas_unique_id),\n    HomeWizardSensorEntityDescription(key='active_liter_lpm',\n\
    \    translation_key='active_liter_lpm', native_unit_of_measurement='l/min',\n\
    \    icon='mdi:water', state_class=SensorStateClass.MEASUREMENT, has_fn=lambda\n\
    \    data: data.active_liter_lpm is not None, value_fn=lambda data: data.\n  \
    \  active_liter_lpm), HomeWizardSensorEntityDescription(key=\n    'total_liter_m3',\
    \ translation_key='total_liter_m3',\n    native_unit_of_measurement=UnitOfVolume.CUBIC_METERS,\
    \ icon='mdi:gauge',\n    device_class=SensorDeviceClass.WATER, state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, has_fn=lambda data: data.total_liter_m3 is not None,\n\
    \    value_fn=lambda data: data.total_liter_m3 or None))"
  - (HomeWizardSensorEntityDescription, ...)
  - "(HoneywellSensorEntityDescription(key=OUTDOOR_TEMPERATURE_STATUS_KEY,\n    translation_key=OUTDOOR_TEMPERATURE_STATUS_KEY,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda device: device.outdoor_temperature, unit_fn=\n    _get_temperature_sensor_unit),\
    \ HoneywellSensorEntityDescription(key=\n    OUTDOOR_HUMIDITY_STATUS_KEY, translation_key=\n\
    \    OUTDOOR_HUMIDITY_STATUS_KEY, device_class=SensorDeviceClass.HUMIDITY,\n \
    \   state_class=SensorStateClass.MEASUREMENT, value_fn=lambda device:\n    device.outdoor_humidity,\
    \ unit_fn=lambda device: PERCENTAGE),\n    HoneywellSensorEntityDescription(key=CURRENT_TEMPERATURE_STATUS_KEY,\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda device: device.\n    current_temperature, unit_fn=_get_temperature_sensor_unit),\n\
    \    HoneywellSensorEntityDescription(key=CURRENT_HUMIDITY_STATUS_KEY,\n    device_class=SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, value_fn=lambda device: device.current_humidity,\
    \ unit_fn=\n    lambda device: PERCENTAGE))"
  - (HoneywellSensorEntityDescription, ...)
  - "(IBeaconSensorEntityDescription(key='rssi', device_class=SensorDeviceClass.\n\
    \    SIGNAL_STRENGTH, native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\
    \ entity_registry_enabled_default=\n    False, value_fn=lambda ibeacon_advertisement:\
    \ ibeacon_advertisement.\n    rssi, state_class=SensorStateClass.MEASUREMENT),\n\
    \    IBeaconSensorEntityDescription(key='power', translation_key='power',\n  \
    \  device_class=SensorDeviceClass.SIGNAL_STRENGTH,\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda\n    ibeacon_advertisement:\
    \ ibeacon_advertisement.power, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ IBeaconSensorEntityDescription(key=\n    'estimated_distance', translation_key='estimated_distance',\
    \ icon=\n    'mdi:signal-distance-variant', native_unit_of_measurement=UnitOfLength.\n\
    \    METERS, value_fn=lambda ibeacon_advertisement: ibeacon_advertisement.\n \
    \   distance, state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.DISTANCE),\
    \ IBeaconSensorEntityDescription(key=\n    'vendor', translation_key='vendor',\
    \ entity_registry_enabled_default=\n    False, value_fn=lambda ibeacon_advertisement:\
    \ ibeacon_advertisement.vendor)\n    )"
  - "(IPMASensorEntityDescription(key='rcm', translation_key='fire_risk',\n    value_fn=async_retrieve_rcm),\
    \ IPMASensorEntityDescription(key='uvi',\n    translation_key='uv_index', value_fn=async_retrieve_uvi))"
  - (IPMASensorEntityDescription, ...)
  - "(IPPSensorEntityDescription(key='printer', name=None, translation_key=\n    'printer',\
    \ icon='mdi:printer', device_class=SensorDeviceClass.ENUM,\n    options=['idle',\
    \ 'printing', 'stopped'], attributes_fn=lambda printer:\n    {ATTR_INFO: printer.info.printer_info,\
    \ ATTR_SERIAL: printer.info.serial,\n    ATTR_LOCATION: printer.info.location,\
    \ ATTR_STATE_MESSAGE: printer.state\n    .message, ATTR_STATE_REASON: printer.state.reasons,\
    \ ATTR_COMMAND_SET:\n    printer.info.command_set, ATTR_URI_SUPPORTED: ','.join(printer.info.\n\
    \    printer_uri_supported)}, value_fn=lambda printer: printer.state.\n    printer_state),\
    \ IPPSensorEntityDescription(key='uptime',\n    translation_key='uptime', icon='mdi:clock-outline',\
    \ device_class=\n    SensorDeviceClass.TIMESTAMP, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda printer: utcnow(\n\
    \    ) - timedelta(seconds=printer.info.uptime)))"
  - (IPPSensorEntityDescription, ...)
  - (IamMeterError, asyncio.TimeoutError)
  - "(IncomfortSensorEntityDescription(key='pressure', name=INCOMFORT_PRESSURE,\n\
    \    device_class=SensorDeviceClass.PRESSURE, native_unit_of_measurement=\n  \
    \  UnitOfPressure.BAR), IncomfortSensorEntityDescription(key='heater_temp',\n\
    \    name=INCOMFORT_HEATER_TEMP, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, extra_key=\n    'is_pumping'),\
    \ IncomfortSensorEntityDescription(key='tap_temp', name=\n    INCOMFORT_TAP_TEMP,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ extra_key=\n    'is_tapping'))"
  - (IncomfortSensorEntityDescription, ...)
  - (IndexError, FileNotFoundError, IsADirectoryError, UnboundLocalError)
  - "(IntellifireSensorEntityDescription(key='flame_height', translation_key=\n  \
    \  'flame_height', icon='mdi:fire-circle', state_class=SensorStateClass.\n   \
    \ MEASUREMENT, value_fn=lambda data: data.flameheight + 1),\n    IntellifireSensorEntityDescription(key='temperature',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    value_fn=lambda\
    \ data: data.temperature_c),\n    IntellifireSensorEntityDescription(key='target_temp',\
    \ translation_key=\n    'target_temp', state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_fn=lambda data: data.\n    thermostat_setpoint_c),\
    \ IntellifireSensorEntityDescription(key=\n    'fan_speed', translation_key='fan_speed',\
    \ icon='mdi:fan', state_class=\n    SensorStateClass.MEASUREMENT, value_fn=lambda\
    \ data: data.fanspeed),\n    IntellifireSensorEntityDescription(key='timer_end_timestamp',\n\
    \    translation_key='timer_end_timestamp', icon='mdi:timer-sand',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.TIMESTAMP, value_fn=_time_remaining_to_timestamp),\n\
    \    IntellifireSensorEntityDescription(key='downtime', translation_key=\n   \
    \ 'downtime', entity_category=EntityCategory.DIAGNOSTIC, device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ value_fn=_downtime_to_timestamp),\n    IntellifireSensorEntityDescription(key='uptime',\
    \ translation_key=\n    'uptime', entity_category=EntityCategory.DIAGNOSTIC, device_class=\n\
    \    SensorDeviceClass.TIMESTAMP, value_fn=lambda data: utcnow() - timedelta\n\
    \    (seconds=data.uptime)), IntellifireSensorEntityDescription(key=\n    'connection_quality',\
    \ translation_key='connection_quality',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda data: data.\n    connection_quality, entity_registry_enabled_default=False),\n\
    \    IntellifireSensorEntityDescription(key='ecm_latency', translation_key=\n\
    \    'ecm_latency', entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda\n\
    \    data: data.ecm_latency, entity_registry_enabled_default=False),\n    IntellifireSensorEntityDescription(key='ipv4_address',\
    \ translation_key=\n    'ipv4_address', entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda\n    data: data.ipv4_address))"
  - (IntellifireSensorEntityDescription, ...)
  - "(JustNimbusEntityDescription(key='pump_flow', translation_key='pump_flow',\n\
    \    icon='mdi:pump', native_unit_of_measurement=\n    VOLUME_FLOW_RATE_LITERS_PER_MINUTE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda\n    coordinator: coordinator.data.pump_flow), JustNimbusEntityDescription(\n\
    \    key='drink_flow', translation_key='drink_flow', icon='mdi:water-pump',\n\
    \    native_unit_of_measurement=VOLUME_FLOW_RATE_LITERS_PER_MINUTE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value_fn=lambda coordinator:\
    \ coordinator.\n    data.drink_flow), JustNimbusEntityDescription(key='pump_pressure',\n\
    \    translation_key='pump_pressure', native_unit_of_measurement=\n    UnitOfPressure.BAR,\
    \ device_class=SensorDeviceClass.PRESSURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, value_fn=lambda coordinator:\
    \ coordinator.\n    data.pump_pressure), JustNimbusEntityDescription(key='pump_starts',\n\
    \    translation_key='pump_starts', icon='mdi:restart', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value_fn=lambda coordinator:\
    \ coordinator.data.pump_starts),\n    JustNimbusEntityDescription(key='pump_hours',\
    \ translation_key=\n    'pump_hours', icon='mdi:clock', device_class=SensorDeviceClass.DURATION,\n\
    \    native_unit_of_measurement=UnitOfTime.HOURS, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value_fn=lambda coordinator:\
    \ coordinator.data.pump_hours),\n    JustNimbusEntityDescription(key='reservoir_temp',\
    \ translation_key=\n    'reservoir_temperature', native_unit_of_measurement=UnitOfTemperature.\n\
    \    CELSIUS, device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value_fn=lambda coordinator:\
    \ coordinator.data.reservoir_temp),\n    JustNimbusEntityDescription(key='reservoir_content',\
    \ translation_key=\n    'reservoir_content', icon='mdi:car-coolant-level',\n \
    \   native_unit_of_measurement=UnitOfVolume.LITERS, device_class=\n    SensorDeviceClass.VOLUME,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda coordinator:\n    coordinator.data.reservoir_content), JustNimbusEntityDescription(key=\n\
    \    'total_saved', translation_key='total_saved', icon='mdi:water-opacity',\n\
    \    native_unit_of_measurement=UnitOfVolume.LITERS, device_class=\n    SensorDeviceClass.VOLUME,\
    \ state_class=SensorStateClass.TOTAL_INCREASING,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda coordinator:\n    coordinator.data.total_saved), JustNimbusEntityDescription(key=\n\
    \    'total_replenished', translation_key='total_replenished', icon=\n    'mdi:water',\
    \ native_unit_of_measurement=UnitOfVolume.LITERS,\n    device_class=SensorDeviceClass.VOLUME,\
    \ state_class=SensorStateClass.\n    TOTAL_INCREASING, entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=\n    lambda coordinator: coordinator.data.total_replenished),\n  \
    \  JustNimbusEntityDescription(key='error_code', translation_key=\n    'error_code',\
    \ icon='mdi:bug', entity_registry_enabled_default=False,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda coordinator:\n    coordinator.data.error_code), JustNimbusEntityDescription(key='totver',\n\
    \    translation_key='total_use', icon='mdi:chart-donut',\n    native_unit_of_measurement=UnitOfVolume.LITERS,\
    \ device_class=\n    SensorDeviceClass.VOLUME, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda coordinator:\n\
    \    coordinator.data.totver), JustNimbusEntityDescription(key=\n    'reservoir_content_max',\
    \ translation_key='reservoir_content_max', icon=\n    'mdi:waves', native_unit_of_measurement=UnitOfVolume.LITERS,\n\
    \    device_class=SensorDeviceClass.VOLUME, state_class=SensorStateClass.\n  \
    \  TOTAL, entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda\n    coordinator:\
    \ coordinator.data.reservoir_content_max))"
  - "(KNXSystemEntityDescription(key='individual_address', always_available=\n   \
    \ False, icon='mdi:router-network', should_poll=False, value_fn=lambda\n    knx:\
    \ str(knx.xknx.current_address)), KNXSystemEntityDescription(key=\n    'connected_since',\
    \ always_available=False, device_class=\n    SensorDeviceClass.TIMESTAMP, should_poll=False,\
    \ value_fn=lambda knx:\n    knx.xknx.connection_manager.connected_since),\n  \
    \  KNXSystemEntityDescription(key='connection_type', always_available=\n    False,\
    \ device_class=SensorDeviceClass.ENUM, options=[opt.value for opt in\n    XknxConnectionType],\
    \ should_poll=False, value_fn=lambda knx: knx.xknx.\n    connection_manager.connection_type.value),\
    \ KNXSystemEntityDescription(\n    key='telegrams_incoming', icon='mdi:upload-network',\n\
    \    entity_registry_enabled_default=False, force_update=True, state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING, value_fn=lambda knx: knx.xknx.\n    connection_manager.cemi_count_incoming),\
    \ KNXSystemEntityDescription(key\n    ='telegrams_incoming_error', icon='mdi:help-network',\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, value_fn=lambda knx: knx.xknx.\n\
    \    connection_manager.cemi_count_incoming_error),\n    KNXSystemEntityDescription(key='telegrams_outgoing',\
    \ icon=\n    'mdi:download-network', entity_registry_enabled_default=False,\n\
    \    force_update=True, state_class=SensorStateClass.TOTAL_INCREASING,\n    value_fn=lambda\
    \ knx: knx.xknx.connection_manager.cemi_count_outgoing),\n    KNXSystemEntityDescription(key='telegrams_outgoing_error',\
    \ icon=\n    'mdi:close-network', state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    value_fn=lambda knx: knx.xknx.connection_manager.\n    cemi_count_outgoing_error),\
    \ KNXSystemEntityDescription(key=\n    'telegram_count', icon='mdi:plus-network',\
    \ force_update=True,\n    state_class=SensorStateClass.TOTAL_INCREASING, value_fn=lambda\
    \ knx: knx\n    .xknx.connection_manager.cemi_count_outgoing + knx.xknx.\n   \
    \ connection_manager.cemi_count_incoming + knx.xknx.connection_manager.\n    cemi_count_incoming_error))"
  - (KONNECTED_DOMAIN, device_id)
  - "(KaleidescapeSensorEntityDescription(key='media_location', translation_key=\n\
    \    'media_location', icon='mdi:monitor', value_fn=lambda device: device.\n \
    \   automation.movie_location), KaleidescapeSensorEntityDescription(key=\n   \
    \ 'play_status', translation_key='play_status', icon='mdi:monitor',\n    value_fn=lambda\
    \ device: device.movie.play_status),\n    KaleidescapeSensorEntityDescription(key='play_speed',\
    \ translation_key=\n    'play_speed', icon='mdi:monitor', value_fn=lambda device:\
    \ device.movie.\n    play_speed), KaleidescapeSensorEntityDescription(key='video_mode',\n\
    \    translation_key='video_mode', icon='mdi:monitor-screenshot',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda device:\n    device.automation.video_mode), KaleidescapeSensorEntityDescription(key=\n\
    \    'video_color_eotf', translation_key='video_color_eotf', icon=\n    'mdi:monitor-eye',\
    \ entity_category=EntityCategory.DIAGNOSTIC, value_fn=\n    lambda device: device.automation.video_color_eotf),\n\
    \    KaleidescapeSensorEntityDescription(key='video_color_space',\n    translation_key='video_color_space',\
    \ icon='mdi:monitor-eye',\n    entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda\
    \ device:\n    device.automation.video_color_space),\n    KaleidescapeSensorEntityDescription(key='video_color_depth',\n\
    \    translation_key='video_color_depth', icon='mdi:monitor-eye',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda device:\n    device.automation.video_color_depth),\n    KaleidescapeSensorEntityDescription(key='video_color_sampling',\n\
    \    translation_key='video_color_sampling', icon='mdi:monitor-eye',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda device:\n    device.automation.video_color_sampling),\n    KaleidescapeSensorEntityDescription(key='screen_mask_ratio',\n\
    \    translation_key='screen_mask_ratio', icon='mdi:monitor-screenshot',\n   \
    \ entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda device:\n    device.automation.screen_mask_ratio),\n\
    \    KaleidescapeSensorEntityDescription(key='screen_mask_top_trim_rel',\n   \
    \ translation_key='screen_mask_top_trim_rel', icon=\n    'mdi:monitor-screenshot',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_fn=lambda device: device.\n    automation.screen_mask_top_trim_rel / 10.0),\n\
    \    KaleidescapeSensorEntityDescription(key='screen_mask_bottom_trim_rel',\n\
    \    translation_key='screen_mask_bottom_trim_rel', icon=\n    'mdi:monitor-screenshot',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_fn=lambda device: device.\n    automation.screen_mask_bottom_trim_rel\
    \ / 10.0),\n    KaleidescapeSensorEntityDescription(key=\n    'screen_mask_conservative_ratio',\
    \ translation_key=\n    'screen_mask_conservative_ratio', icon='mdi:monitor-screenshot',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda device:\n    device.automation.screen_mask_conservative_ratio),\n\
    \    KaleidescapeSensorEntityDescription(key='screen_mask_top_mask_abs',\n   \
    \ translation_key='screen_mask_top_mask_abs', icon=\n    'mdi:monitor-screenshot',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_fn=lambda device: device.\n    automation.screen_mask_top_mask_abs / 10.0),\n\
    \    KaleidescapeSensorEntityDescription(key='screen_mask_bottom_mask_abs',\n\
    \    translation_key='screen_mask_bottom_mask_abs', icon=\n    'mdi:monitor-screenshot',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_fn=lambda device: device.\n    automation.screen_mask_bottom_mask_abs\
    \ / 10.0),\n    KaleidescapeSensorEntityDescription(key='cinemascape_mask',\n\
    \    translation_key='cinemascape_mask', icon='mdi:monitor-star',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda device:\n    device.automation.cinemascape_mask),\n    KaleidescapeSensorEntityDescription(key='cinemascape_mode',\n\
    \    translation_key='cinemascape_mode', icon='mdi:monitor-star',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda device:\n    device.automation.cinemascape_mode))"
  - (KaleidescapeSensorEntityDescription, ...)
  - (KeyError, TypeError)
  - "(KrakenSensorEntityDescription(key='ask', translation_key='ask', value_fn=\n\
    \    lambda x, y: x.data[y]['ask'][0]), KrakenSensorEntityDescription(key=\n \
    \   'ask_volume', translation_key='ask_volume', value_fn=lambda x, y: x.\n   \
    \ data[y]['ask'][1], entity_registry_enabled_default=False),\n    KrakenSensorEntityDescription(key='bid',\
    \ translation_key='bid',\n    value_fn=lambda x, y: x.data[y]['bid'][0]),\n  \
    \  KrakenSensorEntityDescription(key='bid_volume', translation_key=\n    'bid_volume',\
    \ value_fn=lambda x, y: x.data[y]['bid'][1],\n    entity_registry_enabled_default=False),\
    \ KrakenSensorEntityDescription(\n    key='volume_today', translation_key='volume_today',\
    \ value_fn=lambda x,\n    y: x.data[y]['volume'][0], entity_registry_enabled_default=False),\n\
    \    KrakenSensorEntityDescription(key='volume_last_24h', translation_key=\n \
    \   'volume_last_24h', value_fn=lambda x, y: x.data[y]['volume'][1],\n    entity_registry_enabled_default=False),\
    \ KrakenSensorEntityDescription(\n    key='volume_weighted_average_today', translation_key=\n\
    \    'volume_weighted_average_today', value_fn=lambda x, y: x.data[y][\n    'volume_weighted_average'][0],\
    \ entity_registry_enabled_default=False),\n    KrakenSensorEntityDescription(key='volume_weighted_average_last_24h',\n\
    \    translation_key='volume_weighted_average_last_24h', value_fn=lambda x,\n\
    \    y: x.data[y]['volume_weighted_average'][1],\n    entity_registry_enabled_default=False),\
    \ KrakenSensorEntityDescription(\n    key='number_of_trades_today', translation_key='number_of_trades_today',\n\
    \    value_fn=lambda x, y: x.data[y]['number_of_trades'][0],\n    entity_registry_enabled_default=False),\
    \ KrakenSensorEntityDescription(\n    key='number_of_trades_last_24h', translation_key=\n\
    \    'number_of_trades_last_24h', value_fn=lambda x, y: x.data[y][\n    'number_of_trades'][1],\
    \ entity_registry_enabled_default=False),\n    KrakenSensorEntityDescription(key='last_trade_closed',\
    \ translation_key=\n    'last_trade_closed', value_fn=lambda x, y: x.data[y][\n\
    \    'last_trade_closed'][0], entity_registry_enabled_default=False),\n    KrakenSensorEntityDescription(key='low_today',\
    \ translation_key=\n    'low_today', value_fn=lambda x, y: x.data[y]['low'][0]),\n\
    \    KrakenSensorEntityDescription(key='low_last_24h', translation_key=\n    'low_last_24h',\
    \ value_fn=lambda x, y: x.data[y]['low'][1],\n    entity_registry_enabled_default=False),\
    \ KrakenSensorEntityDescription(\n    key='high_today', translation_key='high_today',\
    \ value_fn=lambda x, y: x\n    .data[y]['high'][0]), KrakenSensorEntityDescription(key='high_last_24h',\n\
    \    translation_key='high_last_24h', value_fn=lambda x, y: x.data[y]['high'\n\
    \    ][1], entity_registry_enabled_default=False),\n    KrakenSensorEntityDescription(key='opening_price_today',\n\
    \    translation_key='opening_price_today', value_fn=lambda x, y: x.data[y][\n\
    \    'opening_price'], entity_registry_enabled_default=False))"
  - (KrakenSensorEntityDescription, ...)
  - (LOGI_CIRCLE_DOMAIN, camera.id)
  - "(LaunchLibrarySensorEntityDescription(key='next_launch', icon=\n    'mdi:rocket-launch',\
    \ translation_key='next_launch', value_fn=lambda nl:\n    nl.name, attributes_fn=lambda\
    \ nl: {'provider': nl.\n    launch_service_provider.name, 'pad': nl.pad.name,\
    \ 'facility': nl.pad.\n    location.name, 'provider_country_code': nl.pad.location.country_code}),\n\
    \    LaunchLibrarySensorEntityDescription(key='launch_time', icon=\n    'mdi:clock-outline',\
    \ translation_key='launch_time', device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ value_fn=lambda nl: parse_datetime(nl.net),\n    attributes_fn=lambda nl: {'window_start':\
    \ nl.window_start, 'window_end':\n    nl.window_end, 'stream_live': nl.webcast_live}),\n\
    \    LaunchLibrarySensorEntityDescription(key='launch_probability', icon=\n  \
    \  'mdi:dice-multiple', translation_key='next_launch',\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_fn=lambda nl: None if nl.\n    probability == -1 else nl.probability,\
    \ attributes_fn=lambda nl: None),\n    LaunchLibrarySensorEntityDescription(key='launch_status',\
    \ icon=\n    'mdi:rocket-launch', translation_key='next_launch', value_fn=lambda\
    \ nl:\n    nl.status.name, attributes_fn=lambda nl: {'reason': nl.holdreason}\
    \ if\n    nl.inhold else None), LaunchLibrarySensorEntityDescription(key=\n  \
    \  'launch_mission', icon='mdi:orbit', translation_key='launch_mission',\n   \
    \ value_fn=lambda nl: nl.mission.name, attributes_fn=lambda nl: {\n    'mission_type':\
    \ nl.mission.type, 'target_orbit': nl.mission.orbit.name,\n    'description':\
    \ nl.mission.description}),\n    LaunchLibrarySensorEntityDescription(key='starship_launch',\
    \ icon=\n    'mdi:rocket', translation_key='starship_launch', device_class=\n\
    \    SensorDeviceClass.TIMESTAMP, value_fn=lambda sl: parse_datetime(sl.net),\n\
    \    attributes_fn=lambda sl: {'title': sl.mission.name, 'status': sl.status\n\
    \    .name, 'target_orbit': sl.mission.orbit.name, 'description': sl.mission\n\
    \    .description}), LaunchLibrarySensorEntityDescription(key=\n    'starship_event',\
    \ icon='mdi:calendar', translation_key='starship_event',\n    device_class=SensorDeviceClass.TIMESTAMP,\
    \ value_fn=lambda se:\n    parse_datetime(se.date), attributes_fn=lambda se: {'title':\
    \ se.name,\n    'location': se.location, 'stream': se.video_url, 'description':\
    \ se.\n    description}))"
  - (LaunchLibrarySensorEntityDescription, ...)
  - (LidarrSensorEntityDescription[T], str)
  - (MODEL_FAN_ZA1, MODEL_FAN_ZA3, MODEL_FAN_ZA4, MODEL_FAN_P5)
  - (MeasurementType, WithingsMeasurementSensorEntityDescription)
  - "(MeaterSensorEntityDescription(key='ambient', translation_key='ambient',\n  \
    \  device_class=SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n \
    \   UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n   \
    \ available=lambda probe: probe is not None, value=lambda probe: probe.\n    ambient_temperature),\
    \ MeaterSensorEntityDescription(key='internal',\n    translation_key='internal',\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, available=lambda probe: probe\
    \ is not None,\n    value=lambda probe: probe.internal_temperature),\n    MeaterSensorEntityDescription(key='cook_name',\
    \ translation_key=\n    'cook_name', available=lambda probe: probe is not None\
    \ and probe.cook\n     is not None, value=lambda probe: probe.cook.name if probe.cook\
    \ else\n    None), MeaterSensorEntityDescription(key='cook_state', translation_key=\n\
    \    'cook_state', available=lambda probe: probe is not None and probe.cook\n\
    \     is not None, value=lambda probe: probe.cook.state if probe.cook else\n \
    \   None), MeaterSensorEntityDescription(key='cook_target_temp',\n    translation_key='cook_target_temp',\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    state_class=SensorStateClass.MEASUREMENT, available=lambda probe: probe\n\
    \     is not None and probe.cook is not None, value=lambda probe: probe.cook\n\
    \    .target_temperature if probe.cook and hasattr(probe.cook,\n    'target_temperature')\
    \ else None), MeaterSensorEntityDescription(key=\n    'cook_peak_temp', translation_key='cook_peak_temp',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  available=lambda probe: probe is not None and probe.cook is not None,\n   \
    \ value=lambda probe: probe.cook.peak_temperature if probe.cook and\n    hasattr(probe.cook,\
    \ 'peak_temperature') else None),\n    MeaterSensorEntityDescription(key='cook_time_remaining',\n\
    \    translation_key='cook_time_remaining', device_class=SensorDeviceClass.\n\
    \    TIMESTAMP, available=lambda probe: probe is not None and probe.cook is not\n\
    \    None, value=_remaining_time_to_timestamp),\n    MeaterSensorEntityDescription(key='cook_time_elapsed',\
    \ translation_key=\n    'cook_time_elapsed', device_class=SensorDeviceClass.TIMESTAMP,\n\
    \    available=lambda probe: probe is not None and probe.cook is not None,\n \
    \   value=_elapsed_time_to_timestamp))"
  - "(MelcloudSensorEntityDescription(key='outside_temperature', translation_key\n\
    \    ='outside_temperature', icon='mdi:thermometer',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda x: x.device.outside_temperature, enabled=lambda x: True\n\
    \    ), MelcloudSensorEntityDescription(key='tank_temperature',\n    translation_key='tank_temperature',\
    \ icon='mdi:thermometer',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda x: x.device.tank_temperature, enabled=lambda x: True),\n\
    \    MelcloudSensorEntityDescription(key='daily_energy', translation_key=\n  \
    \  'daily_energy', icon='mdi:factory', native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING,\
    \ value_fn=lambda x: x.\n    device.daily_energy_consumed, enabled=lambda x: True))"
  - "(MelcloudSensorEntityDescription(key='room_temperature', translation_key=\n \
    \   'room_temperature', icon='mdi:thermometer', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda x: x.device.\n\
    \    room_temperature, enabled=lambda x: True),\n    MelcloudSensorEntityDescription(key='energy',\
    \ icon='mdi:factory',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    value_fn=lambda x: x.device.total_energy_consumed, enabled=lambda x: x.\n\
    \    device.has_energy_consumed_meter), MelcloudSensorEntityDescription(key=\n\
    \    'daily_energy', translation_key='daily_energy', icon='mdi:factory',\n   \
    \ native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, device_class=\n    SensorDeviceClass.ENERGY,\
    \ state_class=SensorStateClass.TOTAL_INCREASING,\n    value_fn=lambda x: x.device.daily_energy_consumed,\
    \ enabled=lambda x: True))"
  - "(MelcloudSensorEntityDescription(key='room_temperature', translation_key=\n \
    \   'room_temperature', icon='mdi:thermometer', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda zone: zone.\n \
    \   room_temperature, enabled=lambda x: True),\n    MelcloudSensorEntityDescription(key='flow_temperature',\
    \ translation_key\n    ='flow_temperature', icon='mdi:thermometer', native_unit_of_measurement\n\
    \    =UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda zone: zone.\n \
    \   flow_temperature, enabled=lambda x: True),\n    MelcloudSensorEntityDescription(key='return_temperature',\n\
    \    translation_key='return_temperature', icon='mdi:thermometer',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda zone: zone.return_temperature, enabled=lambda x: True))"
  - (MelcloudSensorEntityDescription, ...)
  - "(MeteoFranceSensorEntityDescription(key='next_rain', name='Next rain',\n    device_class=SensorDeviceClass.TIMESTAMP,\
    \ data_path=''),)"
  - "(MeteoFranceSensorEntityDescription(key='pressure', name='Pressure',\n    native_unit_of_measurement=UnitOfPressure.HPA,\
    \ device_class=\n    SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, data_path=\n    'current_forecast:sea_level'),\
    \ MeteoFranceSensorEntityDescription(key=\n    'wind_gust', name='Wind gust',\
    \ native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.WIND_SPEED,\n\
    \    state_class=SensorStateClass.MEASUREMENT, icon=\n    'mdi:weather-windy-variant',\
    \ entity_registry_enabled_default=False,\n    data_path='current_forecast:wind:gust'),\n\
    \    MeteoFranceSensorEntityDescription(key='wind_speed', name='Wind speed',\n\
    \    native_unit_of_measurement=UnitOfSpeed.KILOMETERS_PER_HOUR,\n    device_class=SensorDeviceClass.WIND_SPEED,\
    \ state_class=SensorStateClass\n    .MEASUREMENT, entity_registry_enabled_default=False,\
    \ data_path=\n    'current_forecast:wind:speed'), MeteoFranceSensorEntityDescription(key=\n\
    \    'temperature', name='Temperature', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False, data_path=\n    'current_forecast:T:value'),\
    \ MeteoFranceSensorEntityDescription(key=\n    'uv', name='UV', native_unit_of_measurement=UV_INDEX,\
    \ icon=\n    'mdi:sunglasses', data_path='today_forecast:uv'),\n    MeteoFranceSensorEntityDescription(key='precipitation',\
    \ name=\n    'Daily precipitation', native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS,\
    \ device_class=SensorDeviceClass.\n    PRECIPITATION, data_path='today_forecast:precipitation:24h'),\n\
    \    MeteoFranceSensorEntityDescription(key='cloud', name='Cloud cover',\n   \
    \ native_unit_of_measurement=PERCENTAGE, icon='mdi:weather-partly-cloudy',\n \
    \   data_path='current_forecast:clouds'),\n    MeteoFranceSensorEntityDescription(key='original_condition',\
    \ name=\n    'Original condition', entity_registry_enabled_default=False, data_path=\n\
    \    'current_forecast:weather:desc'), MeteoFranceSensorEntityDescription(\n \
    \   key='daily_original_condition', name='Daily original condition',\n    entity_registry_enabled_default=False,\
    \ data_path=\n    'today_forecast:weather12H:desc'), MeteoFranceSensorEntityDescription(\n\
    \    key='humidity', name='Humidity', native_unit_of_measurement=PERCENTAGE,\n\
    \    device_class=SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.\n\
    \    MEASUREMENT, data_path='current_forecast:humidity'))"
  - "(MeteoFranceSensorEntityDescription(key='rain_chance', name='Rain chance',\n\
    \    native_unit_of_measurement=PERCENTAGE, icon='mdi:weather-rainy',\n    data_path='probability_forecast:rain:3h'),\n\
    \    MeteoFranceSensorEntityDescription(key='snow_chance', name=\n    'Snow chance',\
    \ native_unit_of_measurement=PERCENTAGE, icon=\n    'mdi:weather-snowy', data_path='probability_forecast:snow:3h'),\n\
    \    MeteoFranceSensorEntityDescription(key='freeze_chance', name=\n    'Freeze\
    \ chance', native_unit_of_measurement=PERCENTAGE, icon=\n    'mdi:snowflake',\
    \ data_path='probability_forecast:freezing'))"
  - "(MeteoFranceSensorEntityDescription(key='weather_alert', name=\n    'Weather\
    \ alert', icon='mdi:weather-cloudy-alert', data_path=''),)"
  - (MeteoFranceSensorEntityDescription, ...)
  - "(MinutPointSensorEntityDescription(key='temperature', precision=1,\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS), MinutPointSensorEntityDescription(key=\n\
    \    'humidity', precision=1, device_class=SensorDeviceClass.HUMIDITY,\n    native_unit_of_measurement=PERCENTAGE),\n\
    \    MinutPointSensorEntityDescription(key='sound', precision=1,\n    device_class=SensorDeviceClass.SOUND_PRESSURE,\n\
    \    native_unit_of_measurement=UnitOfSoundPressure.WEIGHTED_DECIBEL_A))"
  - (MinutPointSensorEntityDescription, ...)
  - "(MyStromSwitchSensorEntityDescription(key='consumption', device_class=\n    SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ value_fn=lambda device:\n    device.consumption), MyStromSwitchSensorEntityDescription(key=\n\
    \    'temperature', device_class=SensorDeviceClass.TEMPERATURE, state_class=\n\
    \    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ value_fn=lambda device: device.temperature))"
  - (MyStromSwitchSensorEntityDescription, ...)
  - "(NAMSensorEntityDescription(key=ATTR_BME280_HUMIDITY, translation_key=\n    'bme280_humidity',\
    \ suggested_display_precision=1,\n    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    HUMIDITY, state_class=SensorStateClass.MEASUREMENT, value=lambda\n    sensors:\
    \ sensors.bme280_humidity), NAMSensorEntityDescription(key=\n    ATTR_BME280_PRESSURE,\
    \ translation_key='bme280_pressure',\n    suggested_display_precision=0, native_unit_of_measurement=\n\
    \    UnitOfPressure.HPA, device_class=SensorDeviceClass.PRESSURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value=lambda sensors: sensors\n    .bme280_pressure), NAMSensorEntityDescription(key=\n\
    \    ATTR_BME280_TEMPERATURE, translation_key='bme280_temperature',\n    suggested_display_precision=1,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value=lambda sensors: sensors\n\
    \    .bme280_temperature), NAMSensorEntityDescription(key=\n    ATTR_BMP180_PRESSURE,\
    \ translation_key='bmp180_pressure',\n    suggested_display_precision=0, native_unit_of_measurement=\n\
    \    UnitOfPressure.HPA, device_class=SensorDeviceClass.PRESSURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value=lambda sensors: sensors\n    .bmp180_pressure), NAMSensorEntityDescription(key=\n\
    \    ATTR_BMP180_TEMPERATURE, translation_key='bmp180_temperature',\n    suggested_display_precision=1,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value=lambda sensors: sensors\n\
    \    .bmp180_temperature), NAMSensorEntityDescription(key=\n    ATTR_BMP280_PRESSURE,\
    \ translation_key='bmp280_pressure',\n    suggested_display_precision=0, native_unit_of_measurement=\n\
    \    UnitOfPressure.HPA, device_class=SensorDeviceClass.PRESSURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value=lambda sensors: sensors\n    .bmp280_pressure), NAMSensorEntityDescription(key=\n\
    \    ATTR_BMP280_TEMPERATURE, translation_key='bmp280_temperature',\n    suggested_display_precision=1,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value=lambda sensors: sensors\n\
    \    .bmp280_temperature), NAMSensorEntityDescription(key=ATTR_HECA_HUMIDITY,\n\
    \    translation_key='heca_humidity', suggested_display_precision=1,\n    native_unit_of_measurement=PERCENTAGE,\
    \ device_class=SensorDeviceClass.\n    HUMIDITY, state_class=SensorStateClass.MEASUREMENT,\
    \ value=lambda\n    sensors: sensors.heca_humidity), NAMSensorEntityDescription(key=\n\
    \    ATTR_HECA_TEMPERATURE, translation_key='heca_temperature',\n    suggested_display_precision=1,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value=lambda sensors: sensors\n\
    \    .heca_temperature), NAMSensorEntityDescription(key=\n    ATTR_MHZ14A_CARBON_DIOXIDE,\
    \ translation_key='mhz14a_carbon_dioxide',\n    suggested_display_precision=0,\
    \ native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION, device_class=SensorDeviceClass.CO2,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value=lambda sensors: sensors\n\
    \    .mhz14a_carbon_dioxide), NAMSensorEntityDescription(key=\n    ATTR_PMSX003_CAQI,\
    \ translation_key='pmsx003_caqi', icon=\n    'mdi:air-filter', value=lambda sensors:\
    \ sensors.pms_caqi),\n    NAMSensorEntityDescription(key=ATTR_PMSX003_CAQI_LEVEL,\
    \ translation_key\n    ='pmsx003_caqi_level', icon='mdi:air-filter', device_class=\n\
    \    SensorDeviceClass.ENUM, options=['very_low', 'low', 'medium', 'high',\n \
    \   'very_high'], value=lambda sensors: sensors.pms_caqi_level),\n    NAMSensorEntityDescription(key=ATTR_PMSX003_P0,\
    \ translation_key=\n    'pmsx003_pm1', suggested_display_precision=0,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    device_class=SensorDeviceClass.PM1, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ value=lambda sensors: sensors.pms_p0),\n    NAMSensorEntityDescription(key=ATTR_PMSX003_P1,\
    \ translation_key=\n    'pmsx003_pm10', suggested_display_precision=0,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    device_class=SensorDeviceClass.PM10, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ value=lambda sensors: sensors.pms_p1),\n    NAMSensorEntityDescription(key=ATTR_PMSX003_P2,\
    \ translation_key=\n    'pmsx003_pm25', suggested_display_precision=0,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    device_class=SensorDeviceClass.PM25, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ value=lambda sensors: sensors.pms_p2),\n    NAMSensorEntityDescription(key=ATTR_SDS011_CAQI,\
    \ translation_key=\n    'sds011_caqi', icon='mdi:air-filter', value=lambda sensors:\
    \ sensors.\n    sds011_caqi), NAMSensorEntityDescription(key=ATTR_SDS011_CAQI_LEVEL,\n\
    \    translation_key='sds011_caqi_level', icon='mdi:air-filter',\n    device_class=SensorDeviceClass.ENUM,\
    \ options=['very_low', 'low',\n    'medium', 'high', 'very_high'], value=lambda\
    \ sensors: sensors.\n    sds011_caqi_level), NAMSensorEntityDescription(key=ATTR_SDS011_P1,\n\
    \    translation_key='sds011_pm10', suggested_display_precision=0,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    device_class=SensorDeviceClass.PM10, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ value=lambda sensors: sensors.sds011_p1),\n    NAMSensorEntityDescription(key=ATTR_SDS011_P2,\
    \ translation_key=\n    'sds011_pm25', suggested_display_precision=0,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    device_class=SensorDeviceClass.PM25, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ value=lambda sensors: sensors.sds011_p2),\n    NAMSensorEntityDescription(key=ATTR_SHT3X_HUMIDITY,\
    \ translation_key=\n    'sht3x_humidity', suggested_display_precision=1,\n   \
    \ native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n   \
    \ HUMIDITY, state_class=SensorStateClass.MEASUREMENT, value=lambda\n    sensors:\
    \ sensors.sht3x_humidity), NAMSensorEntityDescription(key=\n    ATTR_SHT3X_TEMPERATURE,\
    \ translation_key='sht3x_temperature',\n    suggested_display_precision=1, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value=lambda sensors: sensors\n\
    \    .sht3x_temperature), NAMSensorEntityDescription(key=ATTR_SPS30_CAQI,\n  \
    \  translation_key='sps30_caqi', icon='mdi:air-filter', value=lambda\n    sensors:\
    \ sensors.sps30_caqi), NAMSensorEntityDescription(key=\n    ATTR_SPS30_CAQI_LEVEL,\
    \ translation_key='sps30_caqi_level', icon=\n    'mdi:air-filter', device_class=SensorDeviceClass.ENUM,\
    \ options=[\n    'very_low', 'low', 'medium', 'high', 'very_high'], value=lambda\
    \ sensors:\n    sensors.sps30_caqi_level), NAMSensorEntityDescription(key=ATTR_SPS30_P0,\n\
    \    translation_key='sps30_pm1', suggested_display_precision=0,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    device_class=SensorDeviceClass.PM1, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ value=lambda sensors: sensors.sps30_p0),\n    NAMSensorEntityDescription(key=ATTR_SPS30_P1,\
    \ translation_key=\n    'sps30_pm10', suggested_display_precision=0, native_unit_of_measurement\n\
    \    =CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, device_class=\n    SensorDeviceClass.PM10,\
    \ state_class=SensorStateClass.MEASUREMENT, value\n    =lambda sensors: sensors.sps30_p1),\
    \ NAMSensorEntityDescription(key=\n    ATTR_SPS30_P2, translation_key='sps30_pm25',\n\
    \    suggested_display_precision=0, native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\
    \ device_class=\n    SensorDeviceClass.PM25, state_class=SensorStateClass.MEASUREMENT,\
    \ value\n    =lambda sensors: sensors.sps30_p2), NAMSensorEntityDescription(key=\n\
    \    ATTR_SPS30_P4, translation_key='sps30_pm4', suggested_display_precision\n\
    \    =0, native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    icon='mdi:molecule', state_class=SensorStateClass.MEASUREMENT, value=lambda\n\
    \    sensors: sensors.sps30_p4), NAMSensorEntityDescription(key=\n    ATTR_DHT22_HUMIDITY,\
    \ translation_key='dht22_humidity',\n    suggested_display_precision=1, native_unit_of_measurement=PERCENTAGE,\n\
    \    device_class=SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.\n\
    \    MEASUREMENT, value=lambda sensors: sensors.dht22_humidity),\n    NAMSensorEntityDescription(key=ATTR_DHT22_TEMPERATURE,\
    \ translation_key=\n    'dht22_temperature', suggested_display_precision=1,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n \
    \   value=lambda sensors: sensors.dht22_temperature),\n    NAMSensorEntityDescription(key=ATTR_SIGNAL_STRENGTH,\n\
    \    suggested_display_precision=0, native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\
    \ device_class=SensorDeviceClass.\n    SIGNAL_STRENGTH, entity_registry_enabled_default=False,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    value=lambda sensors: sensors.signal), NAMSensorEntityDescription(key=\n\
    \    ATTR_UPTIME, translation_key='last_restart', device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ entity_registry_enabled_default=False,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ value=lambda sensors: utcnow\n    () - timedelta(seconds=sensors.uptime or 0)))"
  - (NAMSensorEntityDescription, ...)
  - (NET_PRODUCTION_ID, NET_PRODUCTION_NAME)
  - "(NWSSensorEntityDescription(key='dewpoint', name='Dew Point', device_class=\n\
    \    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, unit_convert=\n   \
    \ UnitOfTemperature.CELSIUS), NWSSensorEntityDescription(key=\n    'temperature',\
    \ name='Temperature', device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, unit_convert=\n   \
    \ UnitOfTemperature.CELSIUS), NWSSensorEntityDescription(key='windChill',\n  \
    \  name='Wind Chill', device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, unit_convert=UnitOfTemperature.CELSIUS),\n\
    \    NWSSensorEntityDescription(key='heatIndex', name='Heat Index',\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, unit_convert=UnitOfTemperature.CELSIUS),\n   \
    \ NWSSensorEntityDescription(key='relativeHumidity', name=\n    'Relative Humidity',\
    \ device_class=SensorDeviceClass.HUMIDITY,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    PERCENTAGE, unit_convert=PERCENTAGE), NWSSensorEntityDescription(key=\n\
    \    'windSpeed', name='Wind Speed', device_class=SensorDeviceClass.\n    WIND_SPEED,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfSpeed.KILOMETERS_PER_HOUR,\n\
    \    unit_convert=UnitOfSpeed.MILES_PER_HOUR), NWSSensorEntityDescription(\n \
    \   key='windGust', name='Wind Gust', device_class=SensorDeviceClass.\n    WIND_SPEED,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfSpeed.KILOMETERS_PER_HOUR,\n\
    \    unit_convert=UnitOfSpeed.MILES_PER_HOUR), NWSSensorEntityDescription(\n \
    \   key='windDirection', name='Wind Direction', icon='mdi:compass-rose',\n   \
    \ native_unit_of_measurement=DEGREE, unit_convert=DEGREE),\n    NWSSensorEntityDescription(key='barometricPressure',\
    \ name=\n    'Barometric Pressure', device_class=SensorDeviceClass.PRESSURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n \
    \   UnitOfPressure.PA, unit_convert=UnitOfPressure.INHG),\n    NWSSensorEntityDescription(key='seaLevelPressure',\
    \ name=\n    'Sea Level Pressure', device_class=SensorDeviceClass.PRESSURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n \
    \   UnitOfPressure.PA, unit_convert=UnitOfPressure.INHG),\n    NWSSensorEntityDescription(key='visibility',\
    \ name='Visibility', icon=\n    'mdi:eye', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfLength.METERS, unit_convert=\n    UnitOfLength.MILES))"
  - (NWSSensorEntityDescription, ...)
  - "(NetatmoSensorEntityDescription(key='temperature', name='Temperature',\n    netatmo_name='temperature',\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n\
    \    device_class=SensorDeviceClass.TEMPERATURE),\n    NetatmoSensorEntityDescription(key='temp_trend',\
    \ name=\n    'Temperature trend', netatmo_name='temp_trend',\n    entity_registry_enabled_default=False,\
    \ icon='mdi:trending-up'),\n    NetatmoSensorEntityDescription(key='co2', name='CO2',\
    \ netatmo_name=\n    'co2', native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION,\n\
    \    state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.CO2),\
    \ NetatmoSensorEntityDescription(key='pressure',\n    name='Pressure', netatmo_name='pressure',\
    \ native_unit_of_measurement=\n    UnitOfPressure.MBAR, state_class=SensorStateClass.MEASUREMENT,\n\
    \    device_class=SensorDeviceClass.ATMOSPHERIC_PRESSURE),\n    NetatmoSensorEntityDescription(key='pressure_trend',\
    \ name=\n    'Pressure trend', netatmo_name='pressure_trend',\n    entity_registry_enabled_default=False,\
    \ icon='mdi:trending-up'),\n    NetatmoSensorEntityDescription(key='noise', name='Noise',\
    \ netatmo_name=\n    'noise', native_unit_of_measurement=UnitOfSoundPressure.DECIBEL,\n\
    \    device_class=SensorDeviceClass.SOUND_PRESSURE, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ NetatmoSensorEntityDescription(key=\n    'humidity', name='Humidity', netatmo_name='humidity',\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, device_class=SensorDeviceClass.HUMIDITY),\n    NetatmoSensorEntityDescription(key='rain',\
    \ name='Rain', netatmo_name=\n    'rain', native_unit_of_measurement=UnitOfPrecipitationDepth.MILLIMETERS,\n\
    \    device_class=SensorDeviceClass.PRECIPITATION, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ NetatmoSensorEntityDescription(key=\n    'sum_rain_1', name='Rain last hour',\
    \ netatmo_name='sum_rain_1',\n    entity_registry_enabled_default=False, native_unit_of_measurement=\n\
    \    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n \
    \   PRECIPITATION, state_class=SensorStateClass.TOTAL),\n    NetatmoSensorEntityDescription(key='sum_rain_24',\
    \ name='Rain today',\n    netatmo_name='sum_rain_24', native_unit_of_measurement=\n\
    \    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n \
    \   PRECIPITATION, state_class=SensorStateClass.TOTAL_INCREASING),\n    NetatmoSensorEntityDescription(key='battery_percent',\
    \ name=\n    'Battery Percent', netatmo_name='battery', entity_category=\n   \
    \ EntityCategory.DIAGNOSTIC, native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.BATTERY), NetatmoSensorEntityDescription(key=\n\
    \    'windangle', name='Direction', netatmo_name='wind_direction', icon=\n   \
    \ 'mdi:compass-outline'), NetatmoSensorEntityDescription(key=\n    'windangle_value',\
    \ name='Angle', netatmo_name='wind_angle',\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    DEGREE, icon='mdi:compass-outline', state_class=SensorStateClass.\n\
    \    MEASUREMENT), NetatmoSensorEntityDescription(key='windstrength', name=\n\
    \    'Wind Strength', netatmo_name='wind_strength',\n    native_unit_of_measurement=UnitOfSpeed.KILOMETERS_PER_HOUR,\n\
    \    device_class=SensorDeviceClass.WIND_SPEED, state_class=SensorStateClass\n\
    \    .MEASUREMENT), NetatmoSensorEntityDescription(key='gustangle', name=\n  \
    \  'Gust Direction', netatmo_name='gust_direction',\n    entity_registry_enabled_default=False,\
    \ icon='mdi:compass-outline'),\n    NetatmoSensorEntityDescription(key='gustangle_value',\
    \ name='Gust Angle',\n    netatmo_name='gust_angle', entity_registry_enabled_default=False,\n\
    \    native_unit_of_measurement=DEGREE, icon='mdi:compass-outline',\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    NetatmoSensorEntityDescription(key='guststrength', name='Gust Strength',\n\
    \    netatmo_name='gust_strength', entity_registry_enabled_default=False,\n  \
    \  native_unit_of_measurement=UnitOfSpeed.KILOMETERS_PER_HOUR,\n    device_class=SensorDeviceClass.WIND_SPEED,\
    \ state_class=SensorStateClass\n    .MEASUREMENT), NetatmoSensorEntityDescription(key='reachable',\
    \ name=\n    'Reachability', netatmo_name='reachable',\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, icon='mdi:signal'), NetatmoSensorEntityDescription(key=\n\
    \    'rf_status', name='Radio', netatmo_name='rf_strength',\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, icon='mdi:signal'), NetatmoSensorEntityDescription(key=\n\
    \    'wifi_status', name='Wifi', netatmo_name='wifi_strength',\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, icon='mdi:wifi'), NetatmoSensorEntityDescription(key=\n\
    \    'health_idx', name='Health', netatmo_name='health_idx', icon=\n    'mdi:cloud'),\
    \ NetatmoSensorEntityDescription(key='power', name='Power',\n    netatmo_name='power',\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.POWER))"
  - (NetatmoSensorEntityDescription, ...)
  - "(NextBusDepartureSensor(coordinator, cast(str, config.unique_id), config.\n \
    \   data[CONF_AGENCY], config.data[CONF_ROUTE], config.data[CONF_STOP], \n   \
    \ config.data.get(CONF_NAME) or config.title),)"
  - (NextDnsSensorEntityDescription, ...)
  - "(NextDnsSensorEntityDescription[AnalyticsStatus](key='all_queries',\n    coordinator_type=ATTR_STATUS,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    icon='mdi:dns', translation_key='all_queries',\n\
    \    native_unit_of_measurement='queries', state_class=SensorStateClass.\n   \
    \ TOTAL, value=lambda data: data.all_queries),\n    NextDnsSensorEntityDescription[AnalyticsStatus](key='blocked_queries',\n\
    \    coordinator_type=ATTR_STATUS, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    icon='mdi:dns', translation_key='blocked_queries',\n    native_unit_of_measurement='queries',\
    \ state_class=SensorStateClass.\n    TOTAL, value=lambda data: data.blocked_queries),\n\
    \    NextDnsSensorEntityDescription[AnalyticsStatus](key='relayed_queries',\n\
    \    coordinator_type=ATTR_STATUS, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    icon='mdi:dns', translation_key='relayed_queries',\n    native_unit_of_measurement='queries',\
    \ state_class=SensorStateClass.\n    TOTAL, value=lambda data: data.relayed_queries),\n\
    \    NextDnsSensorEntityDescription[AnalyticsStatus](key=\n    'blocked_queries_ratio',\
    \ coordinator_type=ATTR_STATUS, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ icon='mdi:dns', translation_key=\n    'blocked_queries_ratio', native_unit_of_measurement=PERCENTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value=lambda data: data.\n    blocked_queries_ratio),\
    \ NextDnsSensorEntityDescription[\n    AnalyticsProtocols](key='doh_queries',\
    \ coordinator_type=ATTR_PROTOCOLS,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, icon='mdi:dns', translation_key=\n\
    \    'doh_queries', native_unit_of_measurement='queries', state_class=\n    SensorStateClass.TOTAL,\
    \ value=lambda data: data.doh_queries),\n    NextDnsSensorEntityDescription[AnalyticsProtocols](key='doh3_queries',\n\
    \    coordinator_type=ATTR_PROTOCOLS, entity_category=EntityCategory.\n    DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, icon='mdi:dns',\n    translation_key='doh3_queries',\
    \ native_unit_of_measurement='queries',\n    state_class=SensorStateClass.TOTAL,\
    \ value=lambda data: data.\n    doh3_queries), NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n\
    \    'dot_queries', coordinator_type=ATTR_PROTOCOLS, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, icon=\n    'mdi:dns', translation_key='dot_queries',\
    \ native_unit_of_measurement=\n    'queries', state_class=SensorStateClass.TOTAL,\
    \ value=lambda data: data.\n    dot_queries), NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n\
    \    'doq_queries', coordinator_type=ATTR_PROTOCOLS, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, icon=\n    'mdi:dns', translation_key='doq_queries',\
    \ native_unit_of_measurement=\n    'queries', state_class=SensorStateClass.TOTAL,\
    \ value=lambda data: data.\n    doq_queries), NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n\
    \    'tcp_queries', coordinator_type=ATTR_PROTOCOLS, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, icon=\n    'mdi:dns', translation_key='tcp_queries',\
    \ native_unit_of_measurement=\n    'queries', state_class=SensorStateClass.TOTAL,\
    \ value=lambda data: data.\n    tcp_queries), NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n\
    \    'udp_queries', coordinator_type=ATTR_PROTOCOLS, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, icon=\n    'mdi:dns', translation_key='udp_queries',\
    \ native_unit_of_measurement=\n    'queries', state_class=SensorStateClass.TOTAL,\
    \ value=lambda data: data.\n    udp_queries), NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n\
    \    'doh_queries_ratio', coordinator_type=ATTR_PROTOCOLS,\n    entity_registry_enabled_default=False,\
    \ icon='mdi:dns', entity_category=\n    EntityCategory.DIAGNOSTIC, translation_key='doh_queries_ratio',\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, value=lambda data: data.doh_queries_ratio),\n    NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n\
    \    'doh3_queries_ratio', coordinator_type=ATTR_PROTOCOLS,\n    entity_registry_enabled_default=False,\
    \ icon='mdi:dns', entity_category=\n    EntityCategory.DIAGNOSTIC, translation_key='doh3_queries_ratio',\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, value=lambda data: data.doh3_queries_ratio),\n    NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n\
    \    'dot_queries_ratio', coordinator_type=ATTR_PROTOCOLS, entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False, icon=\n\
    \    'mdi:dns', translation_key='dot_queries_ratio',\n    native_unit_of_measurement=PERCENTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, value=lambda data: data.dot_queries_ratio),\n\
    \    NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n    'doq_queries_ratio',\
    \ coordinator_type=ATTR_PROTOCOLS,\n    entity_registry_enabled_default=False,\
    \ icon='mdi:dns', entity_category=\n    EntityCategory.DIAGNOSTIC, translation_key='doq_queries_ratio',\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, value=lambda data: data.doq_queries_ratio),\n    NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n\
    \    'tcp_queries_ratio', coordinator_type=ATTR_PROTOCOLS, entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False, icon=\n\
    \    'mdi:dns', translation_key='tcp_queries_ratio',\n    native_unit_of_measurement=PERCENTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, value=lambda data: data.tcp_queries_ratio),\n\
    \    NextDnsSensorEntityDescription[AnalyticsProtocols](key=\n    'udp_queries_ratio',\
    \ coordinator_type=ATTR_PROTOCOLS, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, icon=\n    'mdi:dns', translation_key='udp_queries_ratio',\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, value=lambda data: data.udp_queries_ratio),\n    NextDnsSensorEntityDescription[AnalyticsEncryption](key=\n\
    \    'encrypted_queries', coordinator_type=ATTR_ENCRYPTION, entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False, icon=\n\
    \    'mdi:lock', translation_key='encrypted_queries',\n    native_unit_of_measurement='queries',\
    \ state_class=SensorStateClass.\n    TOTAL, value=lambda data: data.encrypted_queries),\n\
    \    NextDnsSensorEntityDescription[AnalyticsEncryption](key=\n    'unencrypted_queries',\
    \ coordinator_type=ATTR_ENCRYPTION,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, icon='mdi:lock-open',\n    translation_key='unencrypted_queries',\
    \ native_unit_of_measurement=\n    'queries', state_class=SensorStateClass.TOTAL,\
    \ value=lambda data: data.\n    unencrypted_queries), NextDnsSensorEntityDescription[\n\
    \    AnalyticsEncryption](key='encrypted_queries_ratio', coordinator_type=\n \
    \   ATTR_ENCRYPTION, entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ icon='mdi:lock', translation_key\n    ='encrypted_queries_ratio', native_unit_of_measurement=PERCENTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value=lambda data: data.\n    encrypted_queries_ratio),\
    \ NextDnsSensorEntityDescription[\n    AnalyticsIpVersions](key='ipv4_queries',\
    \ coordinator_type=\n    ATTR_IP_VERSIONS, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, icon='mdi:ip', translation_key=\n\
    \    'ipv4_queries', native_unit_of_measurement='queries', state_class=\n    SensorStateClass.TOTAL,\
    \ value=lambda data: data.ipv4_queries),\n    NextDnsSensorEntityDescription[AnalyticsIpVersions](key='ipv6_queries',\n\
    \    coordinator_type=ATTR_IP_VERSIONS, entity_category=EntityCategory.\n    DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, icon='mdi:ip',\n    translation_key='ipv6_queries',\
    \ native_unit_of_measurement='queries',\n    state_class=SensorStateClass.TOTAL,\
    \ value=lambda data: data.\n    ipv6_queries), NextDnsSensorEntityDescription[AnalyticsIpVersions](key=\n\
    \    'ipv6_queries_ratio', coordinator_type=ATTR_IP_VERSIONS,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, icon='mdi:ip', translation_key=\n\
    \    'ipv6_queries_ratio', native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value=lambda data: data.\n    ipv6_queries_ratio), NextDnsSensorEntityDescription[AnalyticsDnssec](\n\
    \    key='validated_queries', coordinator_type=ATTR_DNSSEC, entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False, icon=\n\
    \    'mdi:lock-check', translation_key='validated_queries',\n    native_unit_of_measurement='queries',\
    \ state_class=SensorStateClass.\n    TOTAL, value=lambda data: data.validated_queries),\n\
    \    NextDnsSensorEntityDescription[AnalyticsDnssec](key=\n    'not_validated_queries',\
    \ coordinator_type=ATTR_DNSSEC, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, icon=\n    'mdi:lock-alert', translation_key='not_validated_queries',\n\
    \    native_unit_of_measurement='queries', state_class=SensorStateClass.\n   \
    \ TOTAL, value=lambda data: data.not_validated_queries),\n    NextDnsSensorEntityDescription[AnalyticsDnssec](key=\n\
    \    'validated_queries_ratio', coordinator_type=ATTR_DNSSEC,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, icon='mdi:lock-check',\n    translation_key='validated_queries_ratio',\
    \ native_unit_of_measurement=\n    PERCENTAGE, state_class=SensorStateClass.MEASUREMENT,\
    \ value=lambda data:\n    data.validated_queries_ratio))"
  - (NodeStatus, str)
  - (None, 'invalid')
  - (None, NullValue)
  - (None, STATE_UNKNOWN)
  - "(NotionSensorDescription(key=SENSOR_MOLD, translation_key='mold_risk', icon\n\
    \    ='mdi:liquid-spot', listener_kind=ListenerKind.MOLD),\n    NotionSensorDescription(key=SENSOR_TEMPERATURE,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  listener_kind=ListenerKind.TEMPERATURE))"
  - (OSError, asyncio.TimeoutError)
  - "(OVOEnergySensorEntityDescription(key='last_electricity_reading',\n    translation_key='last_electricity_reading',\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, value=lambda\n  \
    \  usage: usage.electricity[-1].consumption),\n    OVOEnergySensorEntityDescription(key=KEY_LAST_ELECTRICITY_COST,\n\
    \    translation_key=KEY_LAST_ELECTRICITY_COST, device_class=\n    SensorDeviceClass.MONETARY,\
    \ state_class=SensorStateClass.\n    TOTAL_INCREASING, value=lambda usage: usage.electricity[-1].cost.amount\
    \ if\n    usage.electricity[-1].cost is not None else None),\n    OVOEnergySensorEntityDescription(key='last_electricity_start_time',\n\
    \    translation_key='last_electricity_start_time',\n    entity_registry_enabled_default=False,\
    \ device_class=SensorDeviceClass.\n    TIMESTAMP, value=lambda usage: dt_util.as_utc(usage.electricity[-1].\n\
    \    interval.start)), OVOEnergySensorEntityDescription(key=\n    'last_electricity_end_time',\
    \ translation_key=\n    'last_electricity_end_time', entity_registry_enabled_default=False,\n\
    \    device_class=SensorDeviceClass.TIMESTAMP, value=lambda usage: dt_util.\n\
    \    as_utc(usage.electricity[-1].interval.end)))"
  - "(OVOEnergySensorEntityDescription(key='last_gas_reading', translation_key=\n\
    \    'last_gas_reading', device_class=SensorDeviceClass.ENERGY, state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING, native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ icon='mdi:gas-cylinder', value=lambda\n    usage: usage.gas[-1].consumption),\
    \ OVOEnergySensorEntityDescription(key\n    =KEY_LAST_GAS_COST, translation_key=KEY_LAST_GAS_COST,\
    \ device_class=\n    SensorDeviceClass.MONETARY, state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, icon='mdi:cash-multiple', value=lambda usage: usage.\n\
    \    gas[-1].cost.amount if usage.gas[-1].cost is not None else None),\n    OVOEnergySensorEntityDescription(key='last_gas_start_time',\n\
    \    translation_key='last_gas_start_time', entity_registry_enabled_default=\n\
    \    False, device_class=SensorDeviceClass.TIMESTAMP, value=lambda usage:\n  \
    \  dt_util.as_utc(usage.gas[-1].interval.start)),\n    OVOEnergySensorEntityDescription(key='last_gas_end_time',\n\
    \    translation_key='last_gas_end_time', entity_registry_enabled_default=\n \
    \   False, device_class=SensorDeviceClass.TIMESTAMP, value=lambda usage:\n   \
    \ dt_util.as_utc(usage.gas[-1].interval.end)))"
  - (OVOEnergySensorEntityDescription, ...)
  - "(OneWireSensorEntityDescription(key='EDS0066/temperature', device_class=\n  \
    \  SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ read_mode=READ_MODE_FLOAT, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ OneWireSensorEntityDescription(key=\n    'EDS0066/pressure', device_class=SensorDeviceClass.PRESSURE,\n\
    \    native_unit_of_measurement=UnitOfPressure.MBAR, read_mode=\n    READ_MODE_FLOAT,\
    \ state_class=SensorStateClass.MEASUREMENT))"
  - "(OneWireSensorEntityDescription(key='EDS0068/temperature', device_class=\n  \
    \  SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ read_mode=READ_MODE_FLOAT, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ OneWireSensorEntityDescription(key=\n    'EDS0068/pressure', device_class=SensorDeviceClass.PRESSURE,\n\
    \    native_unit_of_measurement=UnitOfPressure.MBAR, read_mode=\n    READ_MODE_FLOAT,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    OneWireSensorEntityDescription(key='EDS0068/light',\
    \ device_class=\n    SensorDeviceClass.ILLUMINANCE, native_unit_of_measurement=LIGHT_LUX,\n\
    \    read_mode=READ_MODE_FLOAT, state_class=SensorStateClass.MEASUREMENT),\n \
    \   OneWireSensorEntityDescription(key='EDS0068/humidity', device_class=\n   \
    \ SensorDeviceClass.HUMIDITY, native_unit_of_measurement=PERCENTAGE,\n    read_mode=READ_MODE_FLOAT,\
    \ state_class=SensorStateClass.MEASUREMENT))"
  - "(OneWireSensorEntityDescription(key='TAI8570/temperature', device_class=\n  \
    \  SensorDeviceClass.TEMPERATURE, entity_registry_enabled_default=False,\n   \
    \ native_unit_of_measurement=UnitOfTemperature.CELSIUS, read_mode=\n    READ_MODE_FLOAT,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    OneWireSensorEntityDescription(key='TAI8570/pressure',\
    \ device_class=\n    SensorDeviceClass.PRESSURE, entity_registry_enabled_default=False,\n\
    \    native_unit_of_measurement=UnitOfPressure.MBAR, read_mode=\n    READ_MODE_FLOAT,\
    \ state_class=SensorStateClass.MEASUREMENT))"
  - "(OneWireSensorEntityDescription(key='humidity/humidity_corrected',\n    device_class=SensorDeviceClass.HUMIDITY,\
    \ native_unit_of_measurement=\n    PERCENTAGE, read_mode=READ_MODE_FLOAT, state_class=SensorStateClass.\n\
    \    MEASUREMENT), OneWireSensorEntityDescription(key=\n    'humidity/humidity_raw',\
    \ device_class=SensorDeviceClass.HUMIDITY,\n    native_unit_of_measurement=PERCENTAGE,\
    \ read_mode=READ_MODE_FLOAT,\n    state_class=SensorStateClass.MEASUREMENT, translation_key=\n\
    \    'humidity_raw'), OneWireSensorEntityDescription(key=\n    'humidity/temperature',\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ read_mode=\n    READ_MODE_FLOAT, state_class=SensorStateClass.MEASUREMENT))"
  - "(OneWireSensorEntityDescription(key='temperature', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, override_key=_get_sensor_precision_family_28,\n\
    \    read_mode=READ_MODE_FLOAT, state_class=SensorStateClass.MEASUREMENT),)"
  - "(OpenUvSensorEntityDescription(key=TYPE_CURRENT_OZONE_LEVEL,\n    translation_key='current_ozone_level',\
    \ native_unit_of_measurement='du',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data[\n    'ozone']), OpenUvSensorEntityDescription(key=TYPE_CURRENT_UV_INDEX,\n\
    \    translation_key='current_uv_index', icon='mdi:weather-sunny',\n    native_unit_of_measurement=UV_INDEX,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, value_fn=lambda data: data['uv']),\n\
    \    OpenUvSensorEntityDescription(key=TYPE_CURRENT_UV_LEVEL,\n    translation_key='current_uv_level',\
    \ icon='mdi:weather-sunny',\n    device_class=SensorDeviceClass.ENUM, options=[label.value\
    \ for label in\n    UV_LABEL_DEFINITIONS], value_fn=lambda data: get_uv_label(data['uv'])),\n\
    \    OpenUvSensorEntityDescription(key=TYPE_MAX_UV_INDEX, translation_key=\n \
    \   'max_uv_index', icon='mdi:weather-sunny', native_unit_of_measurement=\n  \
    \  UV_INDEX, state_class=SensorStateClass.MEASUREMENT, value_fn=lambda\n    data:\
    \ data['uv_max']), OpenUvSensorEntityDescription(key=\n    TYPE_SAFE_EXPOSURE_TIME_1,\
    \ translation_key=\n    'skin_type_1_safe_exposure_time', icon='mdi:timer-outline',\n\
    \    native_unit_of_measurement=UnitOfTime.MINUTES, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data[\n    'safe_exposure_time'][EXPOSURE_TYPE_MAP[TYPE_SAFE_EXPOSURE_TIME_1]]),\n\
    \    OpenUvSensorEntityDescription(key=TYPE_SAFE_EXPOSURE_TIME_2,\n    translation_key='skin_type_2_safe_exposure_time',\
    \ icon=\n    'mdi:timer-outline', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: data[\n \
    \   'safe_exposure_time'][EXPOSURE_TYPE_MAP[TYPE_SAFE_EXPOSURE_TIME_2]]),\n  \
    \  OpenUvSensorEntityDescription(key=TYPE_SAFE_EXPOSURE_TIME_3,\n    translation_key='skin_type_3_safe_exposure_time',\
    \ icon=\n    'mdi:timer-outline', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: data[\n \
    \   'safe_exposure_time'][EXPOSURE_TYPE_MAP[TYPE_SAFE_EXPOSURE_TIME_3]]),\n  \
    \  OpenUvSensorEntityDescription(key=TYPE_SAFE_EXPOSURE_TIME_4,\n    translation_key='skin_type_4_safe_exposure_time',\
    \ icon=\n    'mdi:timer-outline', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: data[\n \
    \   'safe_exposure_time'][EXPOSURE_TYPE_MAP[TYPE_SAFE_EXPOSURE_TIME_4]]),\n  \
    \  OpenUvSensorEntityDescription(key=TYPE_SAFE_EXPOSURE_TIME_5,\n    translation_key='skin_type_5_safe_exposure_time',\
    \ icon=\n    'mdi:timer-outline', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: data[\n \
    \   'safe_exposure_time'][EXPOSURE_TYPE_MAP[TYPE_SAFE_EXPOSURE_TIME_5]]),\n  \
    \  OpenUvSensorEntityDescription(key=TYPE_SAFE_EXPOSURE_TIME_6,\n    translation_key='skin_type_6_safe_exposure_time',\
    \ icon=\n    'mdi:timer-outline', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: data[\n \
    \   'safe_exposure_time'][EXPOSURE_TYPE_MAP[TYPE_SAFE_EXPOSURE_TIME_6]]))"
  - "(OpowerEntityDescription(key='elec_usage_to_date', name=\n    'Current bill electric\
    \ usage to date', device_class=SensorDeviceClass.\n    ENERGY, native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n\
    \    state_class=SensorStateClass.TOTAL, suggested_display_precision=0,\n    value_fn=lambda\
    \ data: data.usage_to_date), OpowerEntityDescription(key=\n    'elec_forecasted_usage',\
    \ name='Current bill electric forecasted usage',\n    device_class=SensorDeviceClass.ENERGY,\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, state_class=SensorStateClass.TOTAL,\n\
    \    suggested_display_precision=0, value_fn=lambda data: data.\n    forecasted_usage),\
    \ OpowerEntityDescription(key='elec_typical_usage',\n    name='Typical monthly\
    \ electric usage', device_class=SensorDeviceClass.\n    ENERGY, native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n\
    \    state_class=SensorStateClass.TOTAL, suggested_display_precision=0,\n    value_fn=lambda\
    \ data: data.typical_usage), OpowerEntityDescription(key=\n    'elec_cost_to_date',\
    \ name='Current bill electric cost to date',\n    device_class=SensorDeviceClass.MONETARY,\
    \ native_unit_of_measurement=\n    'USD', suggested_unit_of_measurement='USD',\
    \ state_class=\n    SensorStateClass.TOTAL, suggested_display_precision=0, value_fn=lambda\n\
    \    data: data.cost_to_date), OpowerEntityDescription(key=\n    'elec_forecasted_cost',\
    \ name='Current bill electric forecasted cost',\n    device_class=SensorDeviceClass.MONETARY,\
    \ native_unit_of_measurement=\n    'USD', suggested_unit_of_measurement='USD',\
    \ state_class=\n    SensorStateClass.TOTAL, suggested_display_precision=0, value_fn=lambda\n\
    \    data: data.forecasted_cost), OpowerEntityDescription(key=\n    'elec_typical_cost',\
    \ name='Typical monthly electric cost', device_class\n    =SensorDeviceClass.MONETARY,\
    \ native_unit_of_measurement='USD',\n    suggested_unit_of_measurement='USD',\
    \ state_class=SensorStateClass.TOTAL,\n    suggested_display_precision=0, value_fn=lambda\
    \ data: data.typical_cost))"
  - "(OpowerEntityDescription(key='gas_usage_to_date', name=\n    'Current bill gas\
    \ usage to date', device_class=SensorDeviceClass.GAS,\n    native_unit_of_measurement=UnitOfVolume.CENTUM_CUBIC_FEET,\n\
    \    suggested_unit_of_measurement=UnitOfVolume.CENTUM_CUBIC_FEET,\n    state_class=SensorStateClass.TOTAL,\
    \ suggested_display_precision=0,\n    value_fn=lambda data: data.usage_to_date),\
    \ OpowerEntityDescription(key=\n    'gas_forecasted_usage', name='Current bill\
    \ gas forecasted usage',\n    device_class=SensorDeviceClass.GAS, native_unit_of_measurement=\n\
    \    UnitOfVolume.CENTUM_CUBIC_FEET, suggested_unit_of_measurement=\n    UnitOfVolume.CENTUM_CUBIC_FEET,\
    \ state_class=SensorStateClass.TOTAL,\n    suggested_display_precision=0, value_fn=lambda\
    \ data: data.\n    forecasted_usage), OpowerEntityDescription(key='gas_typical_usage',\n\
    \    name='Typical monthly gas usage', device_class=SensorDeviceClass.GAS,\n \
    \   native_unit_of_measurement=UnitOfVolume.CENTUM_CUBIC_FEET,\n    suggested_unit_of_measurement=UnitOfVolume.CENTUM_CUBIC_FEET,\n\
    \    state_class=SensorStateClass.TOTAL, suggested_display_precision=0,\n    value_fn=lambda\
    \ data: data.typical_usage), OpowerEntityDescription(key=\n    'gas_cost_to_date',\
    \ name='Current bill gas cost to date', device_class=\n    SensorDeviceClass.MONETARY,\
    \ native_unit_of_measurement='USD',\n    suggested_unit_of_measurement='USD',\
    \ state_class=SensorStateClass.TOTAL,\n    suggested_display_precision=0, value_fn=lambda\
    \ data: data.cost_to_date),\n    OpowerEntityDescription(key='gas_forecasted_cost',\
    \ name=\n    'Current bill gas forecasted cost', device_class=SensorDeviceClass.\n\
    \    MONETARY, native_unit_of_measurement='USD',\n    suggested_unit_of_measurement='USD',\
    \ state_class=SensorStateClass.TOTAL,\n    suggested_display_precision=0, value_fn=lambda\
    \ data: data.\n    forecasted_cost), OpowerEntityDescription(key='gas_typical_cost',\
    \ name=\n    'Typical monthly gas cost', device_class=SensorDeviceClass.MONETARY,\n\
    \    native_unit_of_measurement='USD', suggested_unit_of_measurement='USD',\n\
    \    state_class=SensorStateClass.TOTAL, suggested_display_precision=0,\n    value_fn=lambda\
    \ data: data.typical_cost))"
  - (OpowerEntityDescription, ...)
  - "(PECOSensorEntityDescription(key='customers_out', translation_key=\n    'customers_out',\
    \ value_fn=lambda data: int(data.outages.customers_out),\n    attribute_fn=lambda\
    \ data: {}, icon='mdi:power-plug-off', state_class=\n    SensorStateClass.MEASUREMENT),\
    \ PECOSensorEntityDescription(key=\n    'percent_customers_out', translation_key='percent_customers_out',\n\
    \    native_unit_of_measurement=PERCENTAGE, value_fn=lambda data: int(data.\n\
    \    outages.percent_customers_out), attribute_fn=lambda data: {}, icon=\n   \
    \ 'mdi:power-plug-off', state_class=SensorStateClass.MEASUREMENT),\n    PECOSensorEntityDescription(key='outage_count',\
    \ translation_key=\n    'outage_count', value_fn=lambda data: int(data.outages.outage_count),\n\
    \    attribute_fn=lambda data: {}, icon='mdi:power-plug-off', state_class=\n \
    \   SensorStateClass.MEASUREMENT), PECOSensorEntityDescription(key=\n    'customers_served',\
    \ translation_key='customers_served', value_fn=lambda\n    data: int(data.outages.customers_served),\
    \ attribute_fn=lambda data: {},\n    icon='mdi:power-plug-off', state_class=SensorStateClass.MEASUREMENT),\n\
    \    PECOSensorEntityDescription(key='map_alert', translation_key=\n    'map_alert',\
    \ value_fn=lambda data: str(data.alerts.alert_title),\n    attribute_fn=lambda\
    \ data: {ATTR_CONTENT: data.alerts.alert_content},\n    icon='mdi:alert'))"
  - (PECOSensorEntityDescription, ...)
  - (PROBE_1, PROBE_2)
  - (PRODUCTION_ID, PRODUCTION_NAME)
  - (PRODUCTION_PCT_ID, PRODUCTION_PCT_NAME)
  - "(PVOutputSensorEntityDescription(key='energy_consumption', translation_key=\n\
    \    'energy_consumption', native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n\
    \    device_class=SensorDeviceClass.ENERGY, state_class=SensorStateClass.\n  \
    \  TOTAL_INCREASING, value_fn=lambda status: status.energy_consumption),\n   \
    \ PVOutputSensorEntityDescription(key='energy_generation',\n    translation_key='energy_generation',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, value_fn=lambda status:\n\
    \    status.energy_generation), PVOutputSensorEntityDescription(key=\n    'normalized_output',\
    \ translation_key='efficiency',\n    native_unit_of_measurement=\n    f'{UnitOfEnergy.KILO_WATT_HOUR}/{UnitOfPower.KILO_WATT}',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, value_fn=lambda status: status.\n\
    \    normalized_output), PVOutputSensorEntityDescription(key=\n    'power_consumption',\
    \ translation_key='power_consumption',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda status: status.power_consumption),\n    PVOutputSensorEntityDescription(key='power_generation',\
    \ translation_key\n    ='power_generation', native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n   \
    \ MEASUREMENT, value_fn=lambda status: status.power_generation),\n    PVOutputSensorEntityDescription(key='temperature',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n \
    \   value_fn=lambda status: status.temperature),\n    PVOutputSensorEntityDescription(key='voltage',\n\
    \    native_unit_of_measurement=UnitOfElectricPotential.VOLT, device_class=\n\
    \    SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  value_fn=lambda status: status.voltage))"
  - (PVOutputSensorEntityDescription, ...)
  - (PassiveBluetoothEntityKey, Any)
  - (PassiveBluetoothEntityKey, EntityDescription)
  - (PassiveBluetoothEntityKey, str | None)
  - "(PegelOnlineSensorEntityDescription(key='air_temperature', translation_key=\n\
    \    'air_temperature', measurement_key='air_temperature', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, icon='mdi:thermometer-lines',\n\
    \    entity_registry_enabled_default=False),\n    PegelOnlineSensorEntityDescription(key='clearance_height',\n\
    \    translation_key='clearance_height', measurement_key='clearance_height',\n\
    \    state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.DISTANCE,\
    \ icon='mdi:bridge'),\n    PegelOnlineSensorEntityDescription(key='oxygen_level',\
    \ translation_key=\n    'oxygen_level', measurement_key='oxygen_level', state_class=\n\
    \    SensorStateClass.MEASUREMENT, icon='mdi:water-opacity',\n    entity_registry_enabled_default=False),\n\
    \    PegelOnlineSensorEntityDescription(key='ph_value', measurement_key=\n   \
    \ 'ph_value', state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.PH,\
    \ entity_registry_enabled_default=False),\n    PegelOnlineSensorEntityDescription(key='water_speed',\
    \ translation_key=\n    'water_speed', measurement_key='water_speed', state_class=\n\
    \    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.SPEED,\n   \
    \ icon='mdi:waves-arrow-right', entity_registry_enabled_default=False),\n    PegelOnlineSensorEntityDescription(key='water_flow',\
    \ translation_key=\n    'water_flow', measurement_key='water_flow', state_class=\n\
    \    SensorStateClass.MEASUREMENT, icon='mdi:waves',\n    entity_registry_enabled_default=False),\n\
    \    PegelOnlineSensorEntityDescription(key='water_level', translation_key=\n\
    \    'water_level', measurement_key='water_level', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ icon='mdi:waves-arrow-up'),\n    PegelOnlineSensorEntityDescription(key='water_temperature',\n\
    \    translation_key='water_temperature', measurement_key=\n    'water_temperature',\
    \ state_class=SensorStateClass.MEASUREMENT,\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ icon=\n    'mdi:thermometer-water', entity_registry_enabled_default=False))"
  - (PegelOnlineSensorEntityDescription, ...)
  - "(PicnicSensorEntityDescription(key=SENSOR_CART_ITEMS_COUNT, translation_key\n\
    \    =SENSOR_CART_ITEMS_COUNT, icon='mdi:format-list-numbered', data_type=\n \
    \   'cart_data', value_fn=lambda cart: cart.get('total_count', 0)),\n    PicnicSensorEntityDescription(key=SENSOR_CART_TOTAL_PRICE,\n\
    \    translation_key=SENSOR_CART_TOTAL_PRICE, native_unit_of_measurement=\n  \
    \  CURRENCY_EURO, icon='mdi:currency-eur', entity_registry_enabled_default\n \
    \   =True, data_type='cart_data', value_fn=lambda cart: cart.get(\n    'total_price',\
    \ 0) / 100), PicnicSensorEntityDescription(key=\n    SENSOR_SELECTED_SLOT_START,\
    \ translation_key=SENSOR_SELECTED_SLOT_START,\n    device_class=SensorDeviceClass.TIMESTAMP,\
    \ icon='mdi:calendar-start',\n    entity_registry_enabled_default=True, data_type='slot_data',\
    \ value_fn=\n    lambda slot: dt_util.parse_datetime(str(slot.get('window_start')))),\n\
    \    PicnicSensorEntityDescription(key=SENSOR_SELECTED_SLOT_END,\n    translation_key=SENSOR_SELECTED_SLOT_END,\
    \ device_class=\n    SensorDeviceClass.TIMESTAMP, icon='mdi:calendar-end',\n \
    \   entity_registry_enabled_default=True, data_type='slot_data', value_fn=\n \
    \   lambda slot: dt_util.parse_datetime(str(slot.get('window_end')))),\n    PicnicSensorEntityDescription(key=SENSOR_SELECTED_SLOT_MAX_ORDER_TIME,\n\
    \    translation_key=SENSOR_SELECTED_SLOT_MAX_ORDER_TIME, device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ icon='mdi:clock-alert-outline',\n    entity_registry_enabled_default=True, data_type='slot_data',\
    \ value_fn=\n    lambda slot: dt_util.parse_datetime(str(slot.get('cut_off_time')))),\n\
    \    PicnicSensorEntityDescription(key=SENSOR_SELECTED_SLOT_MIN_ORDER_VALUE,\n\
    \    translation_key=SENSOR_SELECTED_SLOT_MIN_ORDER_VALUE,\n    native_unit_of_measurement=CURRENCY_EURO,\
    \ icon='mdi:currency-eur',\n    entity_registry_enabled_default=True, data_type='slot_data',\
    \ value_fn=\n    lambda slot: slot['minimum_order_value'] / 100 if slot.get(\n\
    \    'minimum_order_value') else None), PicnicSensorEntityDescription(key=\n \
    \   SENSOR_LAST_ORDER_SLOT_START, translation_key=\n    SENSOR_LAST_ORDER_SLOT_START,\
    \ device_class=SensorDeviceClass.TIMESTAMP,\n    icon='mdi:calendar-start', data_type='last_order_data',\
    \ value_fn=lambda\n    last_order: dt_util.parse_datetime(str(last_order.get('slot',\
    \ {}).get(\n    'window_start')))), PicnicSensorEntityDescription(key=\n    SENSOR_LAST_ORDER_SLOT_END,\
    \ translation_key=SENSOR_LAST_ORDER_SLOT_END,\n    device_class=SensorDeviceClass.TIMESTAMP,\
    \ icon='mdi:calendar-end',\n    data_type='last_order_data', value_fn=lambda last_order:\
    \ dt_util.\n    parse_datetime(str(last_order.get('slot', {}).get('window_end')))),\n\
    \    PicnicSensorEntityDescription(key=SENSOR_LAST_ORDER_STATUS,\n    translation_key=SENSOR_LAST_ORDER_STATUS,\
    \ icon='mdi:list-status',\n    data_type='last_order_data', value_fn=lambda last_order:\
    \ last_order.get\n    ('status')), PicnicSensorEntityDescription(key=\n    SENSOR_LAST_ORDER_MAX_ORDER_TIME,\
    \ translation_key=\n    SENSOR_LAST_ORDER_MAX_ORDER_TIME, device_class=SensorDeviceClass.\n\
    \    TIMESTAMP, icon='mdi:clock-alert-outline',\n    entity_registry_enabled_default=True,\
    \ data_type='last_order_data',\n    value_fn=lambda last_order: dt_util.parse_datetime(str(last_order.get(\n\
    \    'slot', {}).get('cut_off_time')))), PicnicSensorEntityDescription(key=\n\
    \    SENSOR_LAST_ORDER_DELIVERY_TIME, translation_key=\n    SENSOR_LAST_ORDER_DELIVERY_TIME,\
    \ device_class=SensorDeviceClass.\n    TIMESTAMP, icon='mdi:timeline-clock', entity_registry_enabled_default=\n\
    \    True, data_type='last_order_data', value_fn=lambda last_order: dt_util.\n\
    \    parse_datetime(str(last_order.get('delivery_time', {}).get('start')))),\n\
    \    PicnicSensorEntityDescription(key=SENSOR_LAST_ORDER_TOTAL_PRICE,\n    translation_key=SENSOR_LAST_ORDER_TOTAL_PRICE,\n\
    \    native_unit_of_measurement=CURRENCY_EURO, icon='mdi:cash-marker',\n    data_type='last_order_data',\
    \ value_fn=lambda last_order: last_order.get\n    ('total_price', 0) / 100), PicnicSensorEntityDescription(key=\n\
    \    SENSOR_NEXT_DELIVERY_ETA_START, translation_key=\n    SENSOR_NEXT_DELIVERY_ETA_START,\
    \ device_class=SensorDeviceClass.\n    TIMESTAMP, icon='mdi:clock-start', entity_registry_enabled_default=True,\n\
    \    data_type='next_delivery_data', value_fn=lambda next_delivery: dt_util.\n\
    \    parse_datetime(str(next_delivery.get('eta', {}).get('start')))),\n    PicnicSensorEntityDescription(key=SENSOR_NEXT_DELIVERY_ETA_END,\n\
    \    translation_key=SENSOR_NEXT_DELIVERY_ETA_END, device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ icon='mdi:clock-end',\n    entity_registry_enabled_default=True, data_type='next_delivery_data',\n\
    \    value_fn=lambda next_delivery: dt_util.parse_datetime(str(next_delivery\n\
    \    .get('eta', {}).get('end')))), PicnicSensorEntityDescription(key=\n    SENSOR_NEXT_DELIVERY_SLOT_START,\
    \ translation_key=\n    SENSOR_NEXT_DELIVERY_SLOT_START, device_class=SensorDeviceClass.\n\
    \    TIMESTAMP, icon='mdi:calendar-start', data_type='next_delivery_data',\n \
    \   value_fn=lambda next_delivery: dt_util.parse_datetime(str(next_delivery\n\
    \    .get('slot', {}).get('window_start')))), PicnicSensorEntityDescription(\n\
    \    key=SENSOR_NEXT_DELIVERY_SLOT_END, translation_key=\n    SENSOR_NEXT_DELIVERY_SLOT_END,\
    \ device_class=SensorDeviceClass.TIMESTAMP,\n    icon='mdi:calendar-end', data_type='next_delivery_data',\
    \ value_fn=lambda\n    next_delivery: dt_util.parse_datetime(str(next_delivery.get('slot',\
    \ {})\n    .get('window_end')))))"
  - (PicnicSensorEntityDescription, ...)
  - "(Platform.BINARY_SENSOR, Platform.CLIMATE, Platform.COVER, Platform.LIGHT,\n\
    \    Platform.LOCK, Platform.SENSOR, Platform.SWITCH)"
  - "(PlugwiseSensorEntityDescription(key='setpoint', translation_key='setpoint',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n \
    \   entity_category=EntityCategory.DIAGNOSTIC),\n    PlugwiseSensorEntityDescription(key='setpoint_high',\
    \ translation_key=\n    'cooling_setpoint', native_unit_of_measurement=UnitOfTemperature.\n\
    \    CELSIUS, device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC\n    ), PlugwiseSensorEntityDescription(key='setpoint_low',\
    \ translation_key=\n    'heating_setpoint', native_unit_of_measurement=UnitOfTemperature.\n\
    \    CELSIUS, device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC\n    ), PlugwiseSensorEntityDescription(key='temperature',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, entity_category=EntityCategory.\n    DIAGNOSTIC,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    PlugwiseSensorEntityDescription(key='intended_boiler_temperature',\n\
    \    translation_key='intended_boiler_temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT),\n    PlugwiseSensorEntityDescription(key='temperature_difference',\n\
    \    translation_key='temperature_difference', native_unit_of_measurement=\n \
    \   UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n \
    \   entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass\n\
    \    .MEASUREMENT), PlugwiseSensorEntityDescription(key=\n    'outdoor_temperature',\
    \ translation_key='outdoor_temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), PlugwiseSensorEntityDescription(key='outdoor_air_temperature',\n    translation_key='outdoor_air_temperature',\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass\n\
    \    .MEASUREMENT), PlugwiseSensorEntityDescription(key='water_temperature',\n\
    \    translation_key='water_temperature', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass\n    .MEASUREMENT), PlugwiseSensorEntityDescription(key='return_temperature',\n\
    \    translation_key='return_temperature', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass\n    .MEASUREMENT), PlugwiseSensorEntityDescription(key=\n\
    \    'electricity_consumed', translation_key='electricity_consumed',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT),\n\
    \    PlugwiseSensorEntityDescription(key='electricity_produced',\n    translation_key='electricity_produced',\
    \ native_unit_of_measurement=\n    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, entity_registry_enabled_default=False),\n\
    \    PlugwiseSensorEntityDescription(key='electricity_consumed_interval',\n  \
    \  translation_key='electricity_consumed_interval',\n    native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL),\n\
    \    PlugwiseSensorEntityDescription(key=\n    'electricity_consumed_peak_interval',\
    \ translation_key=\n    'electricity_consumed_peak_interval', native_unit_of_measurement=\n\
    \    UnitOfEnergy.WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL),\
    \ PlugwiseSensorEntityDescription(\n    key='electricity_consumed_off_peak_interval',\
    \ translation_key=\n    'electricity_consumed_off_peak_interval', native_unit_of_measurement=\n\
    \    UnitOfEnergy.WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL),\
    \ PlugwiseSensorEntityDescription(\n    key='electricity_produced_interval', translation_key=\n\
    \    'electricity_produced_interval', native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL,\
    \ entity_registry_enabled_default=\n    False), PlugwiseSensorEntityDescription(key=\n\
    \    'electricity_produced_peak_interval', translation_key=\n    'electricity_produced_peak_interval',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL), PlugwiseSensorEntityDescription(\n \
    \   key='electricity_produced_off_peak_interval', translation_key=\n    'electricity_produced_off_peak_interval',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL), PlugwiseSensorEntityDescription(\n \
    \   key='electricity_consumed_point', translation_key=\n    'electricity_consumed_point',\
    \ device_class=SensorDeviceClass.POWER,\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), PlugwiseSensorEntityDescription(key=\n\
    \    'electricity_consumed_off_peak_point', translation_key=\n    'electricity_consumed_off_peak_point',\
    \ native_unit_of_measurement=\n    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), PlugwiseSensorEntityDescription(key=\n\
    \    'electricity_consumed_peak_point', translation_key=\n    'electricity_consumed_peak_point',\
    \ native_unit_of_measurement=\n    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), PlugwiseSensorEntityDescription(key=\n\
    \    'electricity_consumed_off_peak_cumulative', translation_key=\n    'electricity_consumed_off_peak_cumulative',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING),\n    PlugwiseSensorEntityDescription(key=\n\
    \    'electricity_consumed_peak_cumulative', translation_key=\n    'electricity_consumed_peak_cumulative',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING),\n    PlugwiseSensorEntityDescription(key='electricity_produced_point',\n\
    \    translation_key='electricity_produced_point', device_class=\n    SensorDeviceClass.POWER,\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    PlugwiseSensorEntityDescription(key=\n    'electricity_produced_off_peak_point',\
    \ translation_key=\n    'electricity_produced_off_peak_point', native_unit_of_measurement=\n\
    \    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER, state_class=\n  \
    \  SensorStateClass.MEASUREMENT), PlugwiseSensorEntityDescription(key=\n    'electricity_produced_peak_point',\
    \ translation_key=\n    'electricity_produced_peak_point', native_unit_of_measurement=\n\
    \    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER, state_class=\n  \
    \  SensorStateClass.MEASUREMENT), PlugwiseSensorEntityDescription(key=\n    'electricity_produced_off_peak_cumulative',\
    \ translation_key=\n    'electricity_produced_off_peak_cumulative', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n   \
    \ state_class=SensorStateClass.TOTAL_INCREASING),\n    PlugwiseSensorEntityDescription(key=\n\
    \    'electricity_produced_peak_cumulative', translation_key=\n    'electricity_produced_peak_cumulative',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING),\n    PlugwiseSensorEntityDescription(key='electricity_phase_one_consumed',\n\
    \    translation_key='electricity_phase_one_consumed', device_class=\n    SensorDeviceClass.POWER,\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    PlugwiseSensorEntityDescription(key='electricity_phase_two_consumed',\n \
    \   translation_key='electricity_phase_two_consumed', device_class=\n    SensorDeviceClass.POWER,\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    PlugwiseSensorEntityDescription(key='electricity_phase_three_consumed',\n\
    \    translation_key='electricity_phase_three_consumed', device_class=\n    SensorDeviceClass.POWER,\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    PlugwiseSensorEntityDescription(key='electricity_phase_one_produced',\n \
    \   translation_key='electricity_phase_one_produced', device_class=\n    SensorDeviceClass.POWER,\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    PlugwiseSensorEntityDescription(key='electricity_phase_two_produced',\n \
    \   translation_key='electricity_phase_two_produced', device_class=\n    SensorDeviceClass.POWER,\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    PlugwiseSensorEntityDescription(key='electricity_phase_three_produced',\n\
    \    translation_key='electricity_phase_three_produced', device_class=\n    SensorDeviceClass.POWER,\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    PlugwiseSensorEntityDescription(key='voltage_phase_one',\n    translation_key='voltage_phase_one',\
    \ device_class=SensorDeviceClass.\n    VOLTAGE, native_unit_of_measurement=UnitOfElectricPotential.VOLT,\n\
    \    state_class=SensorStateClass.MEASUREMENT,\n    entity_registry_enabled_default=False),\
    \ PlugwiseSensorEntityDescription\n    (key='voltage_phase_two', translation_key='voltage_phase_two',\n\
    \    device_class=SensorDeviceClass.VOLTAGE, native_unit_of_measurement=\n   \
    \ UnitOfElectricPotential.VOLT, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  entity_registry_enabled_default=False), PlugwiseSensorEntityDescription\n \
    \   (key='voltage_phase_three', translation_key='voltage_phase_three',\n    device_class=SensorDeviceClass.VOLTAGE,\
    \ native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False), PlugwiseSensorEntityDescription\n\
    \    (key='gas_consumed_interval', translation_key='gas_consumed_interval',\n\
    \    icon='mdi:meter-gas', native_unit_of_measurement=UnitOfVolumeFlowRate.\n\
    \    CUBIC_METERS_PER_HOUR, state_class=SensorStateClass.MEASUREMENT),\n    PlugwiseSensorEntityDescription(key='gas_consumed_cumulative',\n\
    \    translation_key='gas_consumed_cumulative', native_unit_of_measurement=\n\
    \    UnitOfVolume.CUBIC_METERS, device_class=SensorDeviceClass.GAS,\n    state_class=SensorStateClass.TOTAL),\
    \ PlugwiseSensorEntityDescription(\n    key='net_electricity_point', translation_key='net_electricity_point',\n\
    \    native_unit_of_measurement=UnitOfPower.WATT, device_class=\n    SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    PlugwiseSensorEntityDescription(key='net_electricity_cumulative',\n\
    \    translation_key='net_electricity_cumulative',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL),\n\
    \    PlugwiseSensorEntityDescription(key='battery',\n    native_unit_of_measurement=PERCENTAGE,\
    \ device_class=SensorDeviceClass.\n    BATTERY, entity_category=EntityCategory.DIAGNOSTIC,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), PlugwiseSensorEntityDescription(key=\n\
    \    'illuminance', native_unit_of_measurement=LIGHT_LUX, device_class=\n    SensorDeviceClass.ILLUMINANCE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    PlugwiseSensorEntityDescription(key='modulation_level', translation_key\n\
    \    ='modulation_level', icon='mdi:percent', native_unit_of_measurement=\n  \
    \  PERCENTAGE, entity_category=EntityCategory.DIAGNOSTIC, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ PlugwiseSensorEntityDescription(key=\n    'valve_position', translation_key='valve_position',\
    \ icon='mdi:valve',\n    entity_category=EntityCategory.DIAGNOSTIC, native_unit_of_measurement=\n\
    \    PERCENTAGE, state_class=SensorStateClass.MEASUREMENT),\n    PlugwiseSensorEntityDescription(key='water_pressure',\
    \ translation_key=\n    'water_pressure', native_unit_of_measurement=UnitOfPressure.BAR,\n\
    \    device_class=SensorDeviceClass.PRESSURE, entity_category=EntityCategory\n\
    \    .DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT),\n    PlugwiseSensorEntityDescription(key='humidity',\n\
    \    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n    PlugwiseSensorEntityDescription(key='dhw_temperature',\
    \ translation_key=\n    'dhw_temperature', native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    PlugwiseSensorEntityDescription(key='domestic_hot_water_setpoint',\n\
    \    translation_key='domestic_hot_water_setpoint',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT))"
  - (PlugwiseSensorEntityDescription, ...)
  - "(PowerwallSensorEntityDescription(key='instant_power', translation_key=\n   \
    \ 'instant_power', state_class=SensorStateClass.MEASUREMENT, device_class\n  \
    \  =SensorDeviceClass.POWER, native_unit_of_measurement=UnitOfPower.\n    KILO_WATT,\
    \ value_fn=_get_meter_power), PowerwallSensorEntityDescription\n    (key='instant_frequency',\
    \ translation_key='instant_frequency',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.FREQUENCY, native_unit_of_measurement=UnitOfFrequency\n\
    \    .HERTZ, entity_registry_enabled_default=False, value_fn=\n    _get_meter_frequency),\
    \ PowerwallSensorEntityDescription(key=\n    'instant_current', translation_key='instant_current',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.CURRENT,\n\
    \    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\n    entity_registry_enabled_default=False,\
    \ value_fn=\n    _get_meter_total_current), PowerwallSensorEntityDescription(key=\n\
    \    'instant_voltage', translation_key='instant_voltage', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ device_class=SensorDeviceClass.VOLTAGE,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\n\
    \    entity_registry_enabled_default=False, value_fn=_get_meter_average_voltage)\n\
    \    )"
  - "(PrivateDeviceSensorEntityDescription(key='rssi', device_class=\n    SensorDeviceClass.SIGNAL_STRENGTH,\
    \ native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT, entity_registry_enabled_default=\n\
    \    False, entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda _,\n  \
    \  service_info: service_info.advertisement.rssi, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ PrivateDeviceSensorEntityDescription(key\n    ='power', translation_key='power',\
    \ device_class=SensorDeviceClass.\n    SIGNAL_STRENGTH, native_unit_of_measurement=\n\
    \    SIGNAL_STRENGTH_DECIBELS_MILLIWATT, entity_registry_enabled_default=\n  \
    \  False, entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda _,\n    service_info:\
    \ service_info.advertisement.tx_power, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ PrivateDeviceSensorEntityDescription(key\n    ='estimated_distance', translation_key='estimated_distance',\
    \ icon=\n    'mdi:signal-distance-variant', native_unit_of_measurement=UnitOfLength.\n\
    \    METERS, value_fn=lambda _, service_info: service_info.advertisement and\n\
    \    service_info.advertisement.tx_power and calculate_distance_meters(\n    service_info.advertisement.tx_power\
    \ * 10, service_info.advertisement.\n    rssi), state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.DISTANCE, suggested_display_precision=1),\n\
    \    PrivateDeviceSensorEntityDescription(key='estimated_broadcast_interval',\n\
    \    translation_key='estimated_broadcast_interval', icon=\n    'mdi:timer-sync-outline',\
    \ native_unit_of_measurement=UnitOfTime.SECONDS,\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, value_fn=lambda hass, service_info:\
    \ bluetooth.\n    async_get_learned_advertising_interval(hass, service_info.address)\
    \ or\n    bluetooth.async_get_fallback_availability_interval(hass, service_info.\n\
    \    address) or bluetooth.FALLBACK_MAXIMUM_STALE_ADVERTISEMENT_SECONDS,\n   \
    \ suggested_display_precision=1))"
  - "(ProtectSensorEntityDescription(key='battery_level', name='Battery Level',\n\
    \    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    BATTERY, entity_category=EntityCategory.DIAGNOSTIC, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ ufp_value='battery_status.percentage'),\n    ProtectSensorEntityDescription(key='light_level',\
    \ name='Light Level',\n    native_unit_of_measurement=LIGHT_LUX, device_class=SensorDeviceClass.\n\
    \    ILLUMINANCE, state_class=SensorStateClass.MEASUREMENT, ufp_value=\n    'stats.light.value',\
    \ ufp_enabled='is_light_sensor_enabled'),\n    ProtectSensorEntityDescription(key='humidity_level',\
    \ name=\n    'Humidity Level', native_unit_of_measurement=PERCENTAGE, device_class=\n\
    \    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT,\n \
    \   ufp_value='stats.humidity.value', ufp_enabled=\n    'is_humidity_sensor_enabled'),\
    \ ProtectSensorEntityDescription(key=\n    'temperature_level', name='Temperature',\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, ufp_value=\n    'stats.temperature.value',\
    \ ufp_enabled='is_temperature_sensor_enabled'),\n    ProtectSensorEntityDescription[Sensor](key='alarm_sound',\
    \ name=\n    'Alarm Sound Detected', ufp_value_fn=_get_alarm_sound, ufp_enabled=\n\
    \    'is_alarm_sensor_enabled'), ProtectSensorEntityDescription(key=\n    'door_last_trip_time',\
    \ name='Last Open', device_class=SensorDeviceClass\n    .TIMESTAMP, ufp_value='open_status_changed_at',\n\
    \    entity_registry_enabled_default=False), ProtectSensorEntityDescription(\n\
    \    key='motion_last_trip_time', name='Last Motion Detected', device_class=\n\
    \    SensorDeviceClass.TIMESTAMP, ufp_value='motion_detected_at',\n    entity_registry_enabled_default=False),\
    \ ProtectSensorEntityDescription(\n    key='tampering_last_trip_time', name='Last\
    \ Tampering Detected',\n    device_class=SensorDeviceClass.TIMESTAMP, ufp_value=\n\
    \    'tampering_detected_at', entity_registry_enabled_default=False),\n    ProtectSensorEntityDescription(key='sensitivity',\
    \ name=\n    'Motion Sensitivity', icon='mdi:walk', native_unit_of_measurement=\n\
    \    PERCENTAGE, entity_category=EntityCategory.DIAGNOSTIC, ufp_value=\n    'motion_settings.sensitivity',\
    \ ufp_perm=PermRequired.NO_WRITE),\n    ProtectSensorEntityDescription(key='mount_type',\
    \ name='Mount Type',\n    icon='mdi:screwdriver', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    ufp_value='mount_type', ufp_perm=PermRequired.NO_WRITE),\n    ProtectSensorEntityDescription(key='paired_camera',\
    \ name=\n    'Paired Camera', icon='mdi:cctv', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, ufp_value='camera.display_name', ufp_perm=PermRequired.\n   \
    \ NO_WRITE))"
  - "(ProtectSensorEntityDescription(key='battery_level', name='Battery Level',\n\
    \    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    BATTERY, entity_category=EntityCategory.DIAGNOSTIC, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ ufp_value='battery_status.percentage'),\n    ProtectSensorEntityDescription(key='paired_camera',\
    \ name=\n    'Paired Camera', icon='mdi:cctv', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, ufp_value='camera.display_name', ufp_perm=PermRequired.\n   \
    \ NO_WRITE))"
  - "(ProtectSensorEntityDescription(key='cpu_utilization', name=\n    'CPU Utilization',\
    \ native_unit_of_measurement=PERCENTAGE, icon=\n    'mdi:speedometer', entity_registry_enabled_default=False,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass\n\
    \    .MEASUREMENT, ufp_value='system_info.cpu.average_load'),\n    ProtectSensorEntityDescription(key='cpu_temperature',\
    \ name=\n    'CPU Temperature', native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    device_class=SensorDeviceClass.TEMPERATURE,\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT,\
    \ ufp_value=\n    'system_info.cpu.temperature'), ProtectSensorEntityDescription[NVR](key\n\
    \    ='memory_utilization', name='Memory Utilization',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:memory',\n    entity_registry_enabled_default=False, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT, ufp_value_fn=\n   \
    \ _get_nvr_memory, precision=2))"
  - "(ProtectSensorEntityDescription(key='last_ring', name='Last Ring',\n    device_class=SensorDeviceClass.TIMESTAMP,\
    \ icon='mdi:bell', ufp_value=\n    'last_ring'), ProtectSensorEntityDescription(key='volume',\
    \ name=\n    'Volume', icon='mdi:speaker', native_unit_of_measurement=PERCENTAGE,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, ufp_value='volume', ufp_perm\n\
    \    =PermRequired.NO_WRITE))"
  - "(ProtectSensorEntityDescription(key='motion_last_trip_time', name=\n    'Last\
    \ Motion Detected', device_class=SensorDeviceClass.TIMESTAMP,\n    ufp_value='last_motion',\
    \ entity_registry_enabled_default=False),\n    ProtectSensorEntityDescription(key='sensitivity',\
    \ name=\n    'Motion Sensitivity', icon='mdi:walk', native_unit_of_measurement=\n\
    \    PERCENTAGE, entity_category=EntityCategory.DIAGNOSTIC, ufp_value=\n    'light_device_settings.pir_sensitivity',\
    \ ufp_perm=PermRequired.NO_WRITE\n    ), ProtectSensorEntityDescription[Light](key='light_motion',\
    \ name=\n    'Light Mode', icon='mdi:spotlight', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, ufp_value_fn=async_get_light_motion_current, ufp_perm=\n    PermRequired.NO_WRITE),\
    \ ProtectSensorEntityDescription(key=\n    'paired_camera', name='Paired Camera',\
    \ icon='mdi:cctv', entity_category\n    =EntityCategory.DIAGNOSTIC, ufp_value='camera.display_name',\
    \ ufp_perm=\n    PermRequired.NO_WRITE))"
  - "(ProtectSensorEntityDescription(key='motion_last_trip_time', name=\n    'Last\
    \ Motion Detected', device_class=SensorDeviceClass.TIMESTAMP,\n    ufp_value='last_motion',\
    \ entity_registry_enabled_default=False),)"
  - "(ProtectSensorEntityDescription(key='oldest_recording', name=\n    'Oldest Recording',\
    \ device_class=SensorDeviceClass.TIMESTAMP,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, ufp_value=\n    'stats.video.recording_start'),\
    \ ProtectSensorEntityDescription(key=\n    'storage_used', name='Storage Used',\
    \ native_unit_of_measurement=\n    UnitOfInformation.BYTES, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass\n\
    \    .MEASUREMENT, ufp_value='stats.storage.used'),\n    ProtectSensorEntityDescription(key='write_rate',\
    \ name='Disk Write Rate',\n    device_class=SensorDeviceClass.DATA_RATE, native_unit_of_measurement=\n\
    \    UnitOfDataRate.BYTES_PER_SECOND, entity_category=EntityCategory.\n    DIAGNOSTIC,\
    \ state_class=SensorStateClass.MEASUREMENT, ufp_value=\n    'stats.storage.rate_per_second',\
    \ precision=2),\n    ProtectSensorEntityDescription(key='voltage', name='Voltage',\n\
    \    device_class=SensorDeviceClass.VOLTAGE, native_unit_of_measurement=\n   \
    \ UnitOfElectricPotential.VOLT, entity_category=EntityCategory.DIAGNOSTIC,\n \
    \   state_class=SensorStateClass.MEASUREMENT, ufp_value='voltage',\n    ufp_required_field='voltage',\
    \ precision=2),\n    ProtectSensorEntityDescription(key='doorbell_last_trip_time',\
    \ name=\n    'Last Doorbell Ring', device_class=SensorDeviceClass.TIMESTAMP, icon=\n\
    \    'mdi:doorbell-video', ufp_required_field='feature_flags.is_doorbell',\n \
    \   ufp_value='last_ring', entity_registry_enabled_default=False),\n    ProtectSensorEntityDescription(key='lens_type',\
    \ name='Lens Type',\n    entity_category=EntityCategory.DIAGNOSTIC, icon='mdi:camera-iris',\n\
    \    ufp_required_field='has_removable_lens', ufp_value=\n    'feature_flags.lens_type'),\
    \ ProtectSensorEntityDescription(key=\n    'mic_level', name='Microphone Level',\
    \ icon='mdi:microphone',\n    native_unit_of_measurement=PERCENTAGE, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, ufp_required_field='has_mic', ufp_value='mic_volume',\n    ufp_enabled='feature_flags.has_mic',\
    \ ufp_perm=PermRequired.NO_WRITE),\n    ProtectSensorEntityDescription(key='recording_mode',\
    \ name=\n    'Recording Mode', icon='mdi:video-outline', entity_category=\n  \
    \  EntityCategory.DIAGNOSTIC, ufp_value='recording_settings.mode',\n    ufp_perm=PermRequired.NO_WRITE),\
    \ ProtectSensorEntityDescription(key=\n    'infrared', name='Infrared Mode', icon='mdi:circle-opacity',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, ufp_required_field=\n    'feature_flags.has_led_ir',\
    \ ufp_value='isp_settings.ir_led_mode',\n    ufp_perm=PermRequired.NO_WRITE),\
    \ ProtectSensorEntityDescription(key=\n    'doorbell_text', name='Doorbell Text',\
    \ icon='mdi:card-text',\n    entity_category=EntityCategory.DIAGNOSTIC, ufp_required_field=\n\
    \    'feature_flags.has_lcd_screen', ufp_value='lcd_message.text', ufp_perm=\n\
    \    PermRequired.NO_WRITE), ProtectSensorEntityDescription(key='chime_type',\n\
    \    name='Chime Type', icon='mdi:bell', entity_category=EntityCategory.\n   \
    \ DIAGNOSTIC, entity_registry_enabled_default=False, ufp_required_field=\n   \
    \ 'feature_flags.has_chime', ufp_value='chime_type'))"
  - "(ProtectSensorEntityDescription(key='stats_rx', name='Received Data',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, entity_registry_enabled_default=False,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass\n\
    \    .TOTAL_INCREASING, ufp_value='stats.rx_bytes'),\n    ProtectSensorEntityDescription(key='stats_tx',\
    \ name='Transferred Data',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, entity_registry_enabled_default=False,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass\n\
    \    .TOTAL_INCREASING, ufp_value='stats.tx_bytes'))"
  - "(ProtectSensorEntityDescription(key='uptime', name='Uptime', icon=\n    'mdi:clock',\
    \ device_class=SensorDeviceClass.TIMESTAMP, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False,\n    ufp_value_fn=_get_uptime), ProtectSensorEntityDescription(key=\n\
    \    'ble_signal', name='Bluetooth Signal Strength',\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\n\
    \    device_class=SensorDeviceClass.SIGNAL_STRENGTH, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ ufp_value=\n    'bluetooth_connection_state.signal_strength', ufp_required_field=\n\
    \    'bluetooth_connection_state.signal_strength'),\n    ProtectSensorEntityDescription(key='phy_rate',\
    \ name='Link Speed',\n    device_class=SensorDeviceClass.DATA_RATE, native_unit_of_measurement=\n\
    \    UnitOfDataRate.MEGABITS_PER_SECOND, entity_category=EntityCategory.\n   \
    \ DIAGNOSTIC, entity_registry_enabled_default=False, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ ufp_value=\n    'wired_connection_state.phy_rate', ufp_required_field=\n   \
    \ 'wired_connection_state.phy_rate'), ProtectSensorEntityDescription(key=\n  \
    \  'wifi_signal', name='WiFi Signal Strength', native_unit_of_measurement=\n \
    \   SIGNAL_STRENGTH_DECIBELS_MILLIWATT, device_class=SensorDeviceClass.\n    SIGNAL_STRENGTH,\
    \ entity_registry_enabled_default=False, entity_category\n    =EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    ufp_value='wifi_connection_state.signal_strength',\
    \ ufp_required_field=\n    'wifi_connection_state.signal_strength'))"
  - "(ProtectSensorEntityDescription(key='uptime', name='Uptime', icon=\n    'mdi:clock',\
    \ device_class=SensorDeviceClass.TIMESTAMP, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ ufp_value_fn=_get_uptime),\n    ProtectSensorEntityDescription(key='storage_utilization',\
    \ name=\n    'Storage Utilization', native_unit_of_measurement=PERCENTAGE, icon=\n\
    \    'mdi:harddisk', entity_category=EntityCategory.DIAGNOSTIC, state_class=\n\
    \    SensorStateClass.MEASUREMENT, ufp_value='storage_stats.utilization',\n  \
    \  precision=2), ProtectSensorEntityDescription(key='record_rotating',\n    name='Type:\
    \ Timelapse Video', native_unit_of_measurement=PERCENTAGE,\n    icon='mdi:server',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ ufp_value=\n    'storage_stats.storage_distribution.timelapse_recordings.percentage',\n\
    \    precision=2), ProtectSensorEntityDescription(key='record_timelapse',\n  \
    \  name='Type: Continuous Video', native_unit_of_measurement=PERCENTAGE,\n   \
    \ icon='mdi:server', entity_category=EntityCategory.DIAGNOSTIC,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ ufp_value=\n    'storage_stats.storage_distribution.continuous_recordings.percentage',\n\
    \    precision=2), ProtectSensorEntityDescription(key='record_detections',\n \
    \   name='Type: Detections Video', native_unit_of_measurement=PERCENTAGE,\n  \
    \  icon='mdi:server', entity_category=EntityCategory.DIAGNOSTIC,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ ufp_value=\n    'storage_stats.storage_distribution.detections_recordings.percentage',\n\
    \    precision=2), ProtectSensorEntityDescription(key='resolution_HD', name=\n\
    \    'Resolution: HD Video', native_unit_of_measurement=PERCENTAGE, icon=\n  \
    \  'mdi:cctv', entity_category=EntityCategory.DIAGNOSTIC, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ ufp_value=\n    'storage_stats.storage_distribution.hd_usage.percentage', precision=2),\n\
    \    ProtectSensorEntityDescription(key='resolution_4K', name=\n    'Resolution:\
    \ 4K Video', native_unit_of_measurement=PERCENTAGE, icon=\n    'mdi:cctv', entity_category=EntityCategory.DIAGNOSTIC,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, ufp_value=\n    'storage_stats.storage_distribution.uhd_usage.percentage',\
    \ precision=2),\n    ProtectSensorEntityDescription(key='resolution_free', name=\n\
    \    'Resolution: Free Space', native_unit_of_measurement=PERCENTAGE, icon=\n\
    \    'mdi:cctv', entity_category=EntityCategory.DIAGNOSTIC, state_class=\n   \
    \ SensorStateClass.MEASUREMENT, ufp_value=\n    'storage_stats.storage_distribution.free.percentage',\
    \ precision=2),\n    ProtectSensorEntityDescription[NVR](key='record_capacity',\
    \ name=\n    'Recording Capacity', native_unit_of_measurement=UnitOfTime.SECONDS,\n\
    \    icon='mdi:record-rec', entity_category=EntityCategory.DIAGNOSTIC,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ ufp_value_fn=\n    _get_nvr_recording_capacity))"
  - "(ProtectSensorEntityDescription(key='viewer', name='Liveview', icon=\n    'mdi:view-dashboard',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    ufp_value='liveview.name', ufp_perm=PermRequired.NO_WRITE),)"
  - (ProtectSensorEntityDescription, ...)
  - "(ProtectSensorEventEntityDescription(key='smart_obj_licenseplate', name=\n  \
    \  'License Plate Detected', icon='mdi:car', translation_key=\n    'license_plate',\
    \ ufp_value='is_smart_detected', ufp_required_field=\n    'can_detect_license_plate',\
    \ ufp_event_obj=\n    'last_license_plate_detect_event'),)"
  - (ProtectSensorEventEntityDescription, ...)
  - "(PrusaLinkSensorEntityDescription[JobInfo](key='job.progress',\n    translation_key='progress',\
    \ icon='mdi:progress-clock',\n    native_unit_of_measurement=PERCENTAGE, value_fn=lambda\
    \ data: cast(float,\n    data['progress']['completion']) * 100, available_fn=lambda\
    \ data: data.\n    get('progress') is not None), PrusaLinkSensorEntityDescription[JobInfo]\n\
    \    (key='job.filename', translation_key='filename', icon=\n    'mdi:file-image-outline',\
    \ value_fn=lambda data: cast(str, data['job'][\n    'file']['display']), available_fn=lambda\
    \ data: data.get('job') is not\n    None), PrusaLinkSensorEntityDescription[JobInfo](key='job.start',\n\
    \    translation_key='print_start', device_class=SensorDeviceClass.TIMESTAMP,\n\
    \    icon='mdi:clock-start', value_fn=ignore_variance(lambda data: utcnow() -\n\
    \    timedelta(seconds=data['progress']['printTime']), timedelta(minutes=2)),\n\
    \    available_fn=lambda data: data.get('progress') is not None),\n    PrusaLinkSensorEntityDescription[JobInfo](key='job.finish',\n\
    \    translation_key='print_finish', icon='mdi:clock-end', device_class=\n   \
    \ SensorDeviceClass.TIMESTAMP, value_fn=ignore_variance(lambda data: \n    utcnow()\
    \ + timedelta(seconds=data['progress']['printTimeLeft']),\n    timedelta(minutes=2)),\
    \ available_fn=lambda data: data.get('progress')\n     is not None))"
  - "(PrusaLinkSensorEntityDescription[PrinterInfo](key='printer.state', name=\n \
    \   None, icon='mdi:printer-3d', value_fn=lambda data: 'pausing' if (flags :=\n\
    \    data['state']['flags'])['pausing'] else 'cancelling' if flags[\n    'cancelling']\
    \ else 'paused' if flags['paused'] else 'printing' if flags\n    ['printing']\
    \ else 'idle', device_class=SensorDeviceClass.ENUM, options=\n    ['cancelling',\
    \ 'idle', 'paused', 'pausing', 'printing'],\n    translation_key='printer_state'),\
    \ PrusaLinkSensorEntityDescription[\n    PrinterInfo](key='printer.telemetry.temp-bed',\
    \ translation_key=\n    'heatbed_temperature', native_unit_of_measurement=UnitOfTemperature.\n\
    \    CELSIUS, device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: cast(float, data[\n    'telemetry']['temp-bed']), entity_registry_enabled_default=False),\n\
    \    PrusaLinkSensorEntityDescription[PrinterInfo](key=\n    'printer.telemetry.temp-nozzle',\
    \ translation_key='nozzle_temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda data: cast(float, data['telemetry']['temp-nozzle']),\n  \
    \  entity_registry_enabled_default=False),\n    PrusaLinkSensorEntityDescription[PrinterInfo](key=\n\
    \    'printer.telemetry.temp-bed.target', translation_key=\n    'heatbed_target_temperature',\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: cast(\n \
    \   float, data['temperature']['bed']['target']),\n    entity_registry_enabled_default=False),\n\
    \    PrusaLinkSensorEntityDescription[PrinterInfo](key=\n    'printer.telemetry.temp-nozzle.target',\
    \ translation_key=\n    'nozzle_target_temperature', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: cast(\n \
    \   float, data['temperature']['tool0']['target']),\n    entity_registry_enabled_default=False),\n\
    \    PrusaLinkSensorEntityDescription[PrinterInfo](key=\n    'printer.telemetry.z-height',\
    \ translation_key='z_height',\n    native_unit_of_measurement=UnitOfLength.MILLIMETERS,\
    \ device_class=\n    SensorDeviceClass.DISTANCE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda data: cast(float, data['telemetry']['z-height']),\n    entity_registry_enabled_default=False),\n\
    \    PrusaLinkSensorEntityDescription[PrinterInfo](key=\n    'printer.telemetry.print-speed',\
    \ translation_key='print_speed',\n    native_unit_of_measurement=PERCENTAGE, value_fn=lambda\
    \ data: cast(float,\n    data['telemetry']['print-speed'])), PrusaLinkSensorEntityDescription[\n\
    \    PrinterInfo](key='printer.telemetry.material', translation_key=\n    'material',\
    \ icon='mdi:palette-swatch-variant', value_fn=lambda data:\n    cast(str, data['telemetry']['material'])))"
  - "(PureEnergieSensorEntityDescription(key='power_flow', translation_key=\n    'power_flow',\
    \ native_unit_of_measurement=UnitOfPower.WATT, device_class\n    =SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    value_fn=lambda data: data.smartbridge.power_flow),\n\
    \    PureEnergieSensorEntityDescription(key='energy_consumption_total',\n    translation_key='energy_consumption_total',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, value_fn=lambda data:\n  \
    \  data.smartbridge.energy_consumption_total),\n    PureEnergieSensorEntityDescription(key='energy_production_total',\n\
    \    translation_key='energy_production_total', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n   \
    \ state_class=SensorStateClass.TOTAL_INCREASING, value_fn=lambda data:\n    data.smartbridge.energy_production_total))"
  - (PureEnergieSensorEntityDescription, ...)
  - "(QBittorrentSensorEntityDescription(key=SENSOR_TYPE_CURRENT_STATUS, name=\n \
    \   'Status', value_fn=_get_qbittorrent_state),\n    QBittorrentSensorEntityDescription(key=SENSOR_TYPE_DOWNLOAD_SPEED,\
    \ name\n    ='Down Speed', icon='mdi:cloud-download', device_class=\n    SensorDeviceClass.DATA_RATE,\
    \ native_unit_of_measurement=UnitOfDataRate.\n    KIBIBYTES_PER_SECOND, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda data: format_speed(data['server_state']['dl_info_speed'\n\
    \    ])), QBittorrentSensorEntityDescription(key=SENSOR_TYPE_UPLOAD_SPEED,\n \
    \   name='Up Speed', icon='mdi:cloud-upload', device_class=\n    SensorDeviceClass.DATA_RATE,\
    \ native_unit_of_measurement=UnitOfDataRate.\n    KIBIBYTES_PER_SECOND, state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda data: format_speed(data['server_state']['up_info_speed'])))"
  - (QBittorrentSensorEntityDescription, ...)
  - (QingpingSensorDeviceClass.BATTERY, Units.PERCENTAGE)
  - (QingpingSensorDeviceClass.CO2, Units.CONCENTRATION_PARTS_PER_MILLION)
  - (QingpingSensorDeviceClass.HUMIDITY, Units.PERCENTAGE)
  - (QingpingSensorDeviceClass.ILLUMINANCE, Units.LIGHT_LUX)
  - "(QingpingSensorDeviceClass.PM10, Units.CONCENTRATION_MICROGRAMS_PER_CUBIC_METER\n\
    \    )"
  - "(QingpingSensorDeviceClass.PM25, Units.CONCENTRATION_MICROGRAMS_PER_CUBIC_METER\n\
    \    )"
  - (QingpingSensorDeviceClass.PRESSURE, Units.PRESSURE_MBAR)
  - "(QingpingSensorDeviceClass.SIGNAL_STRENGTH, Units.\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT)"
  - (QingpingSensorDeviceClass.TEMPERATURE, Units.TEMP_CELSIUS)
  - "(QswSensorEntityDescription(device_class=SensorDeviceClass.DATA_RATE,\n    entity_registry_enabled_default=False,\
    \ icon='mdi:speedometer', key=\n    QSD_PORTS_STATUS, name='Link Speed', native_unit_of_measurement=\n\
    \    UnitOfDataRate.MEGABITS_PER_SECOND, qsw_type=QswEntityType.LACP_PORT,\n \
    \   state_class=SensorStateClass.MEASUREMENT, subkey=QSD_SPEED),\n    QswSensorEntityDescription(entity_registry_enabled_default=False,\
    \ icon=\n    'mdi:download-network', key=QSD_PORTS_STATISTICS, name='RX',\n  \
    \  native_unit_of_measurement=UnitOfInformation.BYTES, qsw_type=\n    QswEntityType.LACP_PORT,\
    \ state_class=SensorStateClass.TOTAL_INCREASING,\n    subkey=QSD_RX_OCTETS), QswSensorEntityDescription(\n\
    \    entity_registry_enabled_default=False, icon='mdi:close-network', key=\n \
    \   QSD_PORTS_STATISTICS, entity_category=EntityCategory.DIAGNOSTIC, name=\n \
    \   'RX Errors', qsw_type=QswEntityType.LACP_PORT, state_class=\n    SensorStateClass.TOTAL_INCREASING,\
    \ subkey=QSD_RX_ERRORS),\n    QswSensorEntityDescription(device_class=SensorDeviceClass.DATA_RATE,\n\
    \    entity_registry_enabled_default=False, icon='mdi:download-network', key\n\
    \    =QSD_PORTS_STATISTICS, name='RX Speed', native_unit_of_measurement=\n   \
    \ UnitOfDataRate.BYTES_PER_SECOND, qsw_type=QswEntityType.LACP_PORT,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ subkey=QSD_RX_SPEED),\n    QswSensorEntityDescription(entity_registry_enabled_default=False,\
    \ icon=\n    'mdi:upload-network', key=QSD_PORTS_STATISTICS, name='TX',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\
    \ qsw_type=\n    QswEntityType.LACP_PORT, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    subkey=QSD_TX_OCTETS), QswSensorEntityDescription(device_class=\n    SensorDeviceClass.DATA_RATE,\
    \ entity_registry_enabled_default=False,\n    icon='mdi:upload-network', key=QSD_PORTS_STATISTICS,\
    \ name='TX Speed',\n    native_unit_of_measurement=UnitOfDataRate.BYTES_PER_SECOND,\
    \ qsw_type=\n    QswEntityType.LACP_PORT, state_class=SensorStateClass.MEASUREMENT,\n\
    \    subkey=QSD_TX_SPEED))"
  - "(QswSensorEntityDescription(device_class=SensorDeviceClass.DATA_RATE,\n    entity_registry_enabled_default=False,\
    \ icon='mdi:speedometer', key=\n    QSD_PORTS_STATUS, name='Link Speed', native_unit_of_measurement=\n\
    \    UnitOfDataRate.MEGABITS_PER_SECOND, qsw_type=QswEntityType.PORT,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ subkey=QSD_SPEED),\n    QswSensorEntityDescription(entity_registry_enabled_default=False,\
    \ icon=\n    'mdi:download-network', key=QSD_PORTS_STATISTICS, name='RX',\n  \
    \  native_unit_of_measurement=UnitOfInformation.BYTES, qsw_type=\n    QswEntityType.PORT,\
    \ state_class=SensorStateClass.TOTAL_INCREASING,\n    subkey=QSD_RX_OCTETS), QswSensorEntityDescription(\n\
    \    entity_registry_enabled_default=False, icon='mdi:close-network', key=\n \
    \   QSD_PORTS_STATISTICS, entity_category=EntityCategory.DIAGNOSTIC, name=\n \
    \   'RX Errors', qsw_type=QswEntityType.PORT, state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, subkey=QSD_RX_ERRORS), QswSensorEntityDescription(\n  \
    \  device_class=SensorDeviceClass.DATA_RATE,\n    entity_registry_enabled_default=False,\
    \ icon='mdi:download-network', key\n    =QSD_PORTS_STATISTICS, name='RX Speed',\
    \ native_unit_of_measurement=\n    UnitOfDataRate.BYTES_PER_SECOND, qsw_type=QswEntityType.PORT,\n\
    \    state_class=SensorStateClass.MEASUREMENT, subkey=QSD_RX_SPEED),\n    QswSensorEntityDescription(entity_registry_enabled_default=False,\
    \ icon=\n    'mdi:upload-network', key=QSD_PORTS_STATISTICS, name='TX',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\
    \ qsw_type=\n    QswEntityType.PORT, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    subkey=QSD_TX_OCTETS), QswSensorEntityDescription(device_class=\n    SensorDeviceClass.DATA_RATE,\
    \ entity_registry_enabled_default=False,\n    icon='mdi:upload-network', key=QSD_PORTS_STATISTICS,\
    \ name='TX Speed',\n    native_unit_of_measurement=UnitOfDataRate.BYTES_PER_SECOND,\
    \ qsw_type=\n    QswEntityType.PORT, state_class=SensorStateClass.MEASUREMENT,\
    \ subkey=\n    QSD_TX_SPEED))"
  - "(QswSensorEntityDescription(translation_key='fan_1_speed', icon=\n    'mdi:fan-speed-1',\
    \ key=QSD_SYSTEM_SENSOR, native_unit_of_measurement=\n    RPM, state_class=SensorStateClass.MEASUREMENT,\
    \ subkey=QSD_FAN1_SPEED),\n    QswSensorEntityDescription(translation_key='fan_2_speed',\
    \ icon=\n    'mdi:fan-speed-2', key=QSD_SYSTEM_SENSOR, native_unit_of_measurement=\n\
    \    RPM, state_class=SensorStateClass.MEASUREMENT, subkey=QSD_FAN2_SPEED),\n\
    \    QswSensorEntityDescription(translation_key='ports', attributes={\n    ATTR_MAX:\
    \ [QSD_SYSTEM_BOARD, QSD_PORT_NUM]},\n    entity_registry_enabled_default=False,\
    \ icon='mdi:ethernet', key=\n    QSD_PORTS_STATUS, state_class=SensorStateClass.MEASUREMENT,\
    \ subkey=\n    QSD_LINK), QswSensorEntityDescription(entity_registry_enabled_default=\n\
    \    False, translation_key='rx', device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    icon='mdi:download-network', key=QSD_PORTS_STATISTICS,\n    native_unit_of_measurement=UnitOfInformation.BYTES,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, subkey=QSD_RX_OCTETS),\n\
    \    QswSensorEntityDescription(entity_registry_enabled_default=False,\n    translation_key='rx_errors',\
    \ icon='mdi:close-network', key=\n    QSD_PORTS_STATISTICS, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, subkey=QSD_RX_ERRORS),\n \
    \   QswSensorEntityDescription(entity_registry_enabled_default=False,\n    translation_key='rx_speed',\
    \ device_class=SensorDeviceClass.DATA_RATE,\n    icon='mdi:download-network',\
    \ key=QSD_PORTS_STATISTICS,\n    native_unit_of_measurement=UnitOfDataRate.BYTES_PER_SECOND,\
    \ state_class\n    =SensorStateClass.MEASUREMENT, subkey=QSD_RX_SPEED),\n    QswSensorEntityDescription(attributes={ATTR_MAX:\
    \ [QSD_SYSTEM_SENSOR,\n    QSD_TEMP_MAX]}, device_class=SensorDeviceClass.TEMPERATURE,\
    \ key=\n    QSD_SYSTEM_SENSOR, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    state_class=SensorStateClass.MEASUREMENT, subkey=QSD_TEMP),\n    QswSensorEntityDescription(entity_registry_enabled_default=False,\n\
    \    translation_key='tx', device_class=SensorDeviceClass.DATA_SIZE, icon=\n \
    \   'mdi:upload-network', key=QSD_PORTS_STATISTICS,\n    native_unit_of_measurement=UnitOfInformation.BYTES,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, subkey=QSD_TX_OCTETS),\n\
    \    QswSensorEntityDescription(entity_registry_enabled_default=False,\n    translation_key='tx_speed',\
    \ device_class=SensorDeviceClass.DATA_RATE,\n    icon='mdi:upload-network', key=QSD_PORTS_STATISTICS,\n\
    \    native_unit_of_measurement=UnitOfDataRate.BYTES_PER_SECOND, state_class\n\
    \    =SensorStateClass.MEASUREMENT, subkey=QSD_TX_SPEED),\n    QswSensorEntityDescription(translation_key='uptime',\
    \ icon=\n    'mdi:timer-outline', key=QSD_SYSTEM_TIME, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ native_unit_of_measurement=UnitOfTime.\n    SECONDS, state_class=SensorStateClass.TOTAL_INCREASING,\
    \ subkey=QSD_UPTIME))"
  - (QswSensorEntityDescription, ...)
  - "(RDWSensorEntityDescription(key='apk_expiration', translation_key=\n    'apk_expiration',\
    \ device_class=SensorDeviceClass.DATE, value_fn=lambda\n    vehicle: vehicle.apk_expiration),\
    \ RDWSensorEntityDescription(key=\n    'ascription_date', translation_key='ascription_date',\
    \ device_class=\n    SensorDeviceClass.DATE, value_fn=lambda vehicle: vehicle.ascription_date))"
  - (RDWSensorEntityDescription, ...)
  - (RMVtransportApiConnectionError, RMVtransportDataError)
  - (RadarrSensorEntityDescription[T], str)
  - "(RainMachineSensorDataDescription(key=TYPE_FLOW_SENSOR_CLICK_M3,\n    translation_key=TYPE_FLOW_SENSOR_CLICK_M3,\
    \ icon='mdi:water-pump',\n    native_unit_of_measurement=f'clicks/{UnitOfVolume.CUBIC_METERS}',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, api_category=DATA_PROVISION_SETTINGS,\
    \ data_key=\n    'flowSensorClicksPerCubicMeter'), RainMachineSensorDataDescription(key=\n\
    \    TYPE_FLOW_SENSOR_CONSUMED_LITERS, translation_key=\n    TYPE_FLOW_SENSOR_CONSUMED_LITERS,\
    \ icon='mdi:water-pump', device_class=\n    SensorDeviceClass.WATER, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    native_unit_of_measurement=UnitOfVolume.LITERS,\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    TOTAL_INCREASING, api_category=DATA_PROVISION_SETTINGS,\
    \ data_key=\n    'flowSensorWateringClicks'), RainMachineSensorDataDescription(key=\n\
    \    TYPE_FLOW_SENSOR_LEAK_CLICKS, translation_key=\n    TYPE_FLOW_SENSOR_LEAK_CLICKS,\
    \ icon='mdi:pipe-leak', entity_category=\n    EntityCategory.DIAGNOSTIC, native_unit_of_measurement='clicks',\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  TOTAL_INCREASING, api_category=DATA_PROVISION_SETTINGS, data_key=\n    'flowSensorLeakClicks'),\
    \ RainMachineSensorDataDescription(key=\n    TYPE_FLOW_SENSOR_LEAK_VOLUME, translation_key=\n\
    \    TYPE_FLOW_SENSOR_LEAK_VOLUME, icon='mdi:pipe-leak', device_class=\n    SensorDeviceClass.WATER,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=UnitOfVolume.LITERS,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  TOTAL_INCREASING, api_category=DATA_PROVISION_SETTINGS, data_key=\n    'flowSensorLeakClicks'),\
    \ RainMachineSensorDataDescription(key=\n    TYPE_FLOW_SENSOR_START_INDEX, translation_key=\n\
    \    TYPE_FLOW_SENSOR_START_INDEX, icon='mdi:water-pump', entity_category=\n \
    \   EntityCategory.DIAGNOSTIC, native_unit_of_measurement='index',\n    entity_registry_enabled_default=False,\
    \ api_category=\n    DATA_PROVISION_SETTINGS, data_key='flowSensorStartIndex'),\n\
    \    RainMachineSensorDataDescription(key=TYPE_FLOW_SENSOR_WATERING_CLICKS,\n\
    \    translation_key=TYPE_FLOW_SENSOR_WATERING_CLICKS, icon='mdi:water-pump',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, native_unit_of_measurement=\n\
    \    'clicks', entity_registry_enabled_default=False, state_class=\n    SensorStateClass.TOTAL_INCREASING,\
    \ api_category=DATA_PROVISION_SETTINGS,\n    data_key='flowSensorWateringClicks'),\
    \ RainMachineSensorDataDescription(\n    key=TYPE_LAST_LEAK_DETECTED, translation_key=TYPE_LAST_LEAK_DETECTED,\n\
    \    icon='mdi:pipe-leak', entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ device_class=SensorDeviceClass.\n    TIMESTAMP, api_category=DATA_PROVISION_SETTINGS,\
    \ data_key=\n    'lastLeakDetected'), RainMachineSensorDataDescription(key=\n\
    \    TYPE_RAIN_SENSOR_RAIN_START, translation_key=\n    TYPE_RAIN_SENSOR_RAIN_START,\
    \ icon='mdi:weather-pouring',\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, device_class=SensorDeviceClass.\n\
    \    TIMESTAMP, api_category=DATA_PROVISION_SETTINGS, data_key=\n    'rainSensorRainStart'))"
  - "(RenaultSensorEntityDescription(key='battery_level', coordinator='battery',\n\
    \    data_key='batteryLevel', device_class=SensorDeviceClass.BATTERY,\n    entity_class=RenaultSensor[KamereonVehicleBatteryStatusData],\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT), RenaultSensorEntityDescription(key='charge_state',\n    coordinator='battery',\
    \ data_key='chargingStatus', translation_key=\n    'charge_state', device_class=SensorDeviceClass.ENUM,\
    \ entity_class=\n    RenaultSensor[KamereonVehicleBatteryStatusData], icon_lambda=\n\
    \    _get_charge_state_icon, options=['not_in_charge',\n    'waiting_for_a_planned_charge',\
    \ 'charge_ended',\n    'waiting_for_current_charge', 'energy_flap_opened',\n \
    \   'charge_in_progress', 'charge_error', 'unavailable'], value_lambda=\n    _get_charge_state_formatted),\
    \ RenaultSensorEntityDescription(key=\n    'charging_remaining_time', coordinator='battery',\
    \ data_key=\n    'chargingRemainingTime', device_class=SensorDeviceClass.DURATION,\n\
    \    entity_class=RenaultSensor[KamereonVehicleBatteryStatusData], icon=\n   \
    \ 'mdi:timer', native_unit_of_measurement=UnitOfTime.MINUTES, state_class\n  \
    \  =SensorStateClass.MEASUREMENT, translation_key=\n    'charging_remaining_time'),\
    \ RenaultSensorEntityDescription(key=\n    'charging_power', condition_lambda=lambda\
    \ a: not a.details.\n    reports_charging_power_in_watts(), coordinator='battery',\
    \ data_key=\n    'chargingInstantaneousPower', device_class=SensorDeviceClass.POWER,\n\
    \    entity_class=RenaultSensor[KamereonVehicleBatteryStatusData],\n    native_unit_of_measurement=UnitOfPower.KILO_WATT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, translation_key=\n    'admissible_charging_power'),\
    \ RenaultSensorEntityDescription(key=\n    'charging_power', condition_lambda=lambda\
    \ a: a.details.\n    reports_charging_power_in_watts(), coordinator='battery',\
    \ data_key=\n    'chargingInstantaneousPower', device_class=SensorDeviceClass.POWER,\n\
    \    entity_class=RenaultSensor[KamereonVehicleBatteryStatusData],\n    native_unit_of_measurement=UnitOfPower.KILO_WATT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, value_lambda=_get_charging_power,\n\
    \    translation_key='charging_power'), RenaultSensorEntityDescription(key=\n\
    \    'plug_state', coordinator='battery', data_key='plugStatus',\n    translation_key='plug_state',\
    \ device_class=SensorDeviceClass.ENUM,\n    entity_class=RenaultSensor[KamereonVehicleBatteryStatusData],\n\
    \    icon_lambda=_get_plug_state_icon, options=['unplugged', 'plugged',\n    'plug_error',\
    \ 'plug_unknown'], value_lambda=_get_plug_state_formatted),\n    RenaultSensorEntityDescription(key='battery_autonomy',\
    \ coordinator=\n    'battery', data_key='batteryAutonomy', device_class=SensorDeviceClass.\n\
    \    DISTANCE, entity_class=RenaultSensor[KamereonVehicleBatteryStatusData],\n\
    \    icon='mdi:ev-station', native_unit_of_measurement=UnitOfLength.\n    KILOMETERS,\
    \ state_class=SensorStateClass.MEASUREMENT, translation_key=\n    'battery_autonomy'),\
    \ RenaultSensorEntityDescription(key=\n    'battery_available_energy', coordinator='battery',\
    \ data_key=\n    'batteryAvailableEnergy', entity_class=RenaultSensor[\n    KamereonVehicleBatteryStatusData],\
    \ device_class=SensorDeviceClass.\n    ENERGY, native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n\
    \    state_class=SensorStateClass.TOTAL, translation_key=\n    'battery_available_energy'),\
    \ RenaultSensorEntityDescription(key=\n    'battery_temperature', coordinator='battery',\
    \ data_key=\n    'batteryTemperature', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    entity_class=RenaultSensor[KamereonVehicleBatteryStatusData],\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, translation_key='battery_temperature'),\n\
    \    RenaultSensorEntityDescription(key='battery_last_activity', coordinator\n\
    \    ='battery', device_class=SensorDeviceClass.TIMESTAMP, data_key=\n    'timestamp',\
    \ entity_class=RenaultSensor[\n    KamereonVehicleBatteryStatusData], entity_registry_enabled_default=\n\
    \    False, value_lambda=_get_utc_value, translation_key=\n    'battery_last_activity'),\
    \ RenaultSensorEntityDescription(key='mileage',\n    coordinator='cockpit', data_key='totalMileage',\
    \ device_class=\n    SensorDeviceClass.DISTANCE, entity_class=RenaultSensor[\n\
    \    KamereonVehicleCockpitData], icon='mdi:sign-direction',\n    native_unit_of_measurement=UnitOfLength.KILOMETERS,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, value_lambda=_get_rounded_value,\n\
    \    translation_key='mileage'), RenaultSensorEntityDescription(key=\n    'fuel_autonomy',\
    \ coordinator='cockpit', data_key='fuelAutonomy',\n    device_class=SensorDeviceClass.DISTANCE,\
    \ entity_class=RenaultSensor[\n    KamereonVehicleCockpitData], icon='mdi:gas-station',\n\
    \    native_unit_of_measurement=UnitOfLength.KILOMETERS, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ requires_fuel=True, value_lambda=\n    _get_rounded_value, translation_key='fuel_autonomy'),\n\
    \    RenaultSensorEntityDescription(key='fuel_quantity', coordinator=\n    'cockpit',\
    \ data_key='fuelQuantity', device_class=SensorDeviceClass.\n    VOLUME, entity_class=RenaultSensor[KamereonVehicleCockpitData],\
    \ icon=\n    'mdi:fuel', native_unit_of_measurement=UnitOfVolume.LITERS, state_class\n\
    \    =SensorStateClass.TOTAL, requires_fuel=True, value_lambda=\n    _get_rounded_value,\
    \ translation_key='fuel_quantity'),\n    RenaultSensorEntityDescription(key='outside_temperature',\
    \ coordinator=\n    'hvac_status', device_class=SensorDeviceClass.TEMPERATURE,\
    \ data_key=\n    'externalTemperature', entity_class=RenaultSensor[\n    KamereonVehicleHvacStatusData],\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n\
    \    translation_key='outside_temperature'), RenaultSensorEntityDescription(\n\
    \    key='hvac_soc_threshold', coordinator='hvac_status', data_key=\n    'socThreshold',\
    \ entity_class=RenaultSensor[\n    KamereonVehicleHvacStatusData], native_unit_of_measurement=PERCENTAGE,\n\
    \    translation_key='hvac_soc_threshold'), RenaultSensorEntityDescription(\n\
    \    key='hvac_last_activity', coordinator='hvac_status', device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ data_key='lastUpdateTime', entity_class=\n    RenaultSensor[KamereonVehicleHvacStatusData],\n\
    \    entity_registry_enabled_default=False, translation_key=\n    'hvac_last_activity',\
    \ value_lambda=_get_utc_value),\n    RenaultSensorEntityDescription(key='location_last_activity',\n\
    \    coordinator='location', device_class=SensorDeviceClass.TIMESTAMP,\n    data_key='lastUpdateTime',\
    \ entity_class=RenaultSensor[\n    KamereonVehicleLocationData], entity_registry_enabled_default=False,\n\
    \    translation_key='location_last_activity', value_lambda=_get_utc_value),\n\
    \    RenaultSensorEntityDescription(key='res_state', coordinator='res_state',\n\
    \    data_key='details', entity_class=RenaultSensor[\n    KamereonVehicleResStateData],\
    \ translation_key='res_state'),\n    RenaultSensorEntityDescription(key='res_state_code',\
    \ coordinator=\n    'res_state', data_key='code', entity_class=RenaultSensor[\n\
    \    KamereonVehicleResStateData], entity_registry_enabled_default=False,\n  \
    \  translation_key='res_state_code'))"
  - (RenaultSensorEntityDescription[Any], ...)
  - "(RensonSensorEntityDescription(key='CO2_QUALITY_FIELD', translation_key=\n  \
    \  'co2_quality_category', field=CO2_QUALITY_FIELD, raw_format=False,\n    device_class=SensorDeviceClass.ENUM,\
    \ options=['good', 'bad', 'poor']),\n    RensonSensorEntityDescription(key='AIR_QUALITY_FIELD',\
    \ translation_key=\n    'air_quality_category', field=AIR_QUALITY_FIELD, raw_format=False,\n\
    \    device_class=SensorDeviceClass.ENUM, options=['good', 'bad', 'poor']),\n\
    \    RensonSensorEntityDescription(key='CO2_FIELD', field=CO2_FIELD,\n    raw_format=True,\
    \ state_class=SensorStateClass.MEASUREMENT, device_class\n    =SensorDeviceClass.CO2,\
    \ native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION), RensonSensorEntityDescription(key=\n\
    \    'AIR_FIELD', translation_key='air_quality', field=AIR_QUALITY_FIELD,\n  \
    \  state_class=SensorStateClass.MEASUREMENT, raw_format=True,\n    native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION),\n\
    \    RensonSensorEntityDescription(key='CURRENT_LEVEL_FIELD',\n    translation_key='ventilation_level',\
    \ field=CURRENT_LEVEL_FIELD,\n    raw_format=False, device_class=SensorDeviceClass.ENUM,\
    \ options=['off',\n    'level1', 'level2', 'level3', 'level4', 'breeze', 'holiday']),\n\
    \    RensonSensorEntityDescription(key='CURRENT_AIRFLOW_EXTRACT_FIELD',\n    translation_key='total_airflow_out',\
    \ field=\n    CURRENT_AIRFLOW_EXTRACT_FIELD, raw_format=False, state_class=\n\
    \    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n    UnitOfVolumeFlowRate.CUBIC_METERS_PER_HOUR),\n\
    \    RensonSensorEntityDescription(key='CURRENT_AIRFLOW_INGOING_FIELD',\n    translation_key='total_airflow_in',\
    \ field=CURRENT_AIRFLOW_INGOING_FIELD,\n    raw_format=False, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfVolumeFlowRate.CUBIC_METERS_PER_HOUR),\n\
    \    RensonSensorEntityDescription(key='OUTDOOR_TEMP_FIELD', translation_key\n\
    \    ='outdoor_air_temperature', field=OUTDOOR_TEMP_FIELD, raw_format=False,\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS), RensonSensorEntityDescription(key=\n\
    \    'INDOOR_TEMP_FIELD', translation_key='extract_air_temperature', field=\n\
    \    INDOOR_TEMP_FIELD, raw_format=False, device_class=SensorDeviceClass.\n  \
    \  TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n\
    \    RensonSensorEntityDescription(key='FILTER_REMAIN_FIELD',\n    translation_key='filter_change',\
    \ field=FILTER_REMAIN_FIELD, raw_format=\n    False, device_class=SensorDeviceClass.DURATION,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfTime.\n\
    \    DAYS), RensonSensorEntityDescription(key='HUMIDITY_FIELD', field=\n    HUMIDITY_FIELD,\
    \ raw_format=False, device_class=SensorDeviceClass.\n    HUMIDITY, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=PERCENTAGE), RensonSensorEntityDescription(\n\
    \    key='MANUAL_LEVEL_FIELD', translation_key='manual_level', field=\n    MANUAL_LEVEL_FIELD,\
    \ raw_format=False, device_class=SensorDeviceClass.\n    ENUM, options=['off',\
    \ 'level1', 'level2', 'level3', 'level4', 'breeze',\n    'holiday']), RensonSensorEntityDescription(key=\n\
    \    'BREEZE_TEMPERATURE_FIELD', translation_key='breeze_temperature', field\n\
    \    =BREEZE_TEMPERATURE_FIELD, raw_format=False, device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, entity_registry_enabled_default=False),\n\
    \    RensonSensorEntityDescription(key='BREEZE_LEVEL_FIELD', translation_key\n\
    \    ='breeze_level', field=BREEZE_LEVEL_FIELD, raw_format=False,\n    entity_registry_enabled_default=False,\
    \ device_class=SensorDeviceClass.\n    ENUM, options=['off', 'level1', 'level2',\
    \ 'level3', 'level4', 'breeze']\n    ), RensonSensorEntityDescription(key='DAYTIME_FIELD',\
    \ translation_key=\n    'start_day_time', field=DAYTIME_FIELD, raw_format=False,\n\
    \    entity_registry_enabled_default=False), RensonSensorEntityDescription(\n\
    \    key='NIGHTTIME_FIELD', translation_key='start_night_time', field=\n    NIGHTTIME_FIELD,\
    \ raw_format=False, entity_registry_enabled_default=\n    False), RensonSensorEntityDescription(key='DAY_POLLUTION_FIELD',\n\
    \    translation_key='day_pollution_level', field=DAY_POLLUTION_FIELD,\n    raw_format=False,\
    \ entity_registry_enabled_default=False, device_class=\n    SensorDeviceClass.ENUM,\
    \ options=['level1', 'level2', 'level3', 'level4'\n    ]), RensonSensorEntityDescription(key='NIGHT_POLLUTION_FIELD',\n\
    \    translation_key='co2_quality_category', field=NIGHT_POLLUTION_FIELD,\n  \
    \  raw_format=False, entity_registry_enabled_default=False, device_class=\n  \
    \  SensorDeviceClass.ENUM, options=['level1', 'level2', 'level3', 'level4'\n \
    \   ]), RensonSensorEntityDescription(key='CO2_THRESHOLD_FIELD',\n    translation_key='co2_threshold',\
    \ field=CO2_THRESHOLD_FIELD, raw_format=\n    False, native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION,\n\
    \    entity_registry_enabled_default=False), RensonSensorEntityDescription(\n\
    \    key='CO2_HYSTERESIS_FIELD', translation_key='co2_hysteresis', field=\n  \
    \  CO2_HYSTERESIS_FIELD, raw_format=False, native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION,\
    \ entity_registry_enabled_default=False),\n    RensonSensorEntityDescription(key='BYPASS_TEMPERATURE_FIELD',\n\
    \    translation_key='bypass_activation_temperature', field=\n    BYPASS_TEMPERATURE_FIELD,\
    \ raw_format=False, device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n    RensonSensorEntityDescription(key='BYPASS_LEVEL_FIELD',\
    \ translation_key\n    ='bypass_level', field=BYPASS_LEVEL_FIELD, raw_format=False,\n\
    \    device_class=SensorDeviceClass.POWER_FACTOR, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=PERCENTAGE))"
  - (RensonSensorEntityDescription, ...)
  - "(ReolinkHostSensorEntityDescription(key='wifi_signal', translation_key=\n   \
    \ 'wifi_signal', icon='mdi:wifi', state_class=SensorStateClass.\n    MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value=lambda api: api.\n    wifi_signal, supported=lambda api: api.supported(None,\
    \ 'wifi') and api.\n    wifi_connection),)"
  - "(ReolinkSensorEntityDescription(key='ptz_pan_position', translation_key=\n  \
    \  'ptz_pan_position', icon='mdi:pan', state_class=SensorStateClass.\n    MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC, value=lambda\n    api, ch: api.ptz_pan_position(ch),\
    \ supported=lambda api, ch: api.\n    supported(ch, 'ptz_position')),)"
  - (RequestException, ValueError, KeyError)
  - "(RfxtrxSensorEntityDescription(key='Barometer', device_class=\n    SensorDeviceClass.PRESSURE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfPressure.HPA),\n\
    \    RfxtrxSensorEntityDescription(key='Battery numeric', device_class=\n    SensorDeviceClass.BATTERY,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=PERCENTAGE,\
    \ convert=_battery_convert,\n    entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    RfxtrxSensorEntityDescription(key='Current', device_class=\n    SensorDeviceClass.CURRENT,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE),\n\
    \    RfxtrxSensorEntityDescription(key='Current Ch. 1', translation_key=\n   \
    \ 'current_ch_1', device_class=SensorDeviceClass.CURRENT, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfElectricCurrent.AMPERE), RfxtrxSensorEntityDescription(key=\n\
    \    'Current Ch. 2', translation_key='current_ch_2', device_class=\n    SensorDeviceClass.CURRENT,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE),\n\
    \    RfxtrxSensorEntityDescription(key='Current Ch. 3', translation_key=\n   \
    \ 'current_ch_3', device_class=SensorDeviceClass.CURRENT, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfElectricCurrent.AMPERE), RfxtrxSensorEntityDescription(key=\n\
    \    'Energy usage', translation_key='instantaneous_power', device_class=\n  \
    \  SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfPower.WATT),\n\
    \    RfxtrxSensorEntityDescription(key='Humidity', device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=PERCENTAGE),\
    \ RfxtrxSensorEntityDescription(\n    key='Rssi numeric', device_class=SensorDeviceClass.SIGNAL_STRENGTH,\n\
    \    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n \
    \   SIGNAL_STRENGTH_DECIBELS_MILLIWATT, convert=_rssi_convert,\n    entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    RfxtrxSensorEntityDescription(key='Temperature', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n\
    \    RfxtrxSensorEntityDescription(key='Temperature2', translation_key=\n    'temperature_2',\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS), RfxtrxSensorEntityDescription(key=\n\
    \    'Total usage', translation_key='total_energy_usage', device_class=\n    SensorDeviceClass.ENERGY,\
    \ state_class=SensorStateClass.TOTAL_INCREASING,\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR),\n\
    \    RfxtrxSensorEntityDescription(key='Voltage', device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT),\n\
    \    RfxtrxSensorEntityDescription(key='Wind direction', translation_key=\n  \
    \  'wind_direction', state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=DEGREE),\
    \ RfxtrxSensorEntityDescription(key=\n    'Rain rate', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR,\n \
    \   device_class=SensorDeviceClass.PRECIPITATION_INTENSITY),\n    RfxtrxSensorEntityDescription(key='Sound',\
    \ translation_key='sound'),\n    RfxtrxSensorEntityDescription(key='Sensor Status',\
    \ translation_key=\n    'sensor_status'), RfxtrxSensorEntityDescription(key='Count',\n\
    \    translation_key='count', state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    native_unit_of_measurement='count'), RfxtrxSensorEntityDescription(key=\n\
    \    'Counter value', translation_key='counter_value', state_class=\n    SensorStateClass.TOTAL_INCREASING,\
    \ native_unit_of_measurement='count'),\n    RfxtrxSensorEntityDescription(key='Chill',\
    \ translation_key='chill',\n    device_class=SensorDeviceClass.TEMPERATURE, state_class=\n\
    \    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS),\
    \ RfxtrxSensorEntityDescription(key=\n    'Wind average speed', translation_key='wind_average_speed',\
    \ state_class\n    =SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfSpeed.\n\
    \    METERS_PER_SECOND, device_class=SensorDeviceClass.WIND_SPEED),\n    RfxtrxSensorEntityDescription(key='Wind\
    \ gust', translation_key=\n    'wind_gust', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfSpeed.METERS_PER_SECOND, device_class=\n\
    \    SensorDeviceClass.WIND_SPEED), RfxtrxSensorEntityDescription(key=\n    'Rain\
    \ total', state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfPrecipitationDepth.MILLIMETERS,\n\
    \    device_class=SensorDeviceClass.PRECIPITATION),\n    RfxtrxSensorEntityDescription(key='Forecast',\
    \ translation_key=\n    'forecast_status'), RfxtrxSensorEntityDescription(key=\n\
    \    'Forecast numeric', translation_key='forecast'),\n    RfxtrxSensorEntityDescription(key='Humidity\
    \ status', translation_key=\n    'humidity_status'), RfxtrxSensorEntityDescription(key='UV',\n\
    \    translation_key='uv_index', state_class=SensorStateClass.MEASUREMENT,\n \
    \   native_unit_of_measurement=UV_INDEX))"
  - "(RingSensorEntityDescription(key='battery', category=['doorbots',\n    'authorized_doorbots',\
    \ 'stickup_cams'], native_unit_of_measurement=\n    PERCENTAGE, device_class=SensorDeviceClass.BATTERY,\
    \ cls=RingSensor),\n    RingSensorEntityDescription(key='last_activity', translation_key=\n\
    \    'last_activity', category=['doorbots', 'authorized_doorbots',\n    'stickup_cams'],\
    \ icon='mdi:history', device_class=SensorDeviceClass.\n    TIMESTAMP, cls=HistoryRingSensor),\
    \ RingSensorEntityDescription(key=\n    'last_ding', translation_key='last_ding',\
    \ category=['doorbots',\n    'authorized_doorbots'], icon='mdi:history', kind='ding',\
    \ device_class=\n    SensorDeviceClass.TIMESTAMP, cls=HistoryRingSensor),\n  \
    \  RingSensorEntityDescription(key='last_motion', translation_key=\n    'last_motion',\
    \ category=['doorbots', 'authorized_doorbots',\n    'stickup_cams'], icon='mdi:history',\
    \ kind='motion', device_class=\n    SensorDeviceClass.TIMESTAMP, cls=HistoryRingSensor),\n\
    \    RingSensorEntityDescription(key='volume', translation_key='volume',\n   \
    \ category=['chimes', 'doorbots', 'authorized_doorbots', 'stickup_cams'],\n  \
    \  icon='mdi:bell-ring', cls=RingSensor), RingSensorEntityDescription(key=\n \
    \   'wifi_signal_category', translation_key='wifi_signal_category',\n    category=['chimes',\
    \ 'doorbots', 'authorized_doorbots', 'stickup_cams'],\n    icon='mdi:wifi', cls=HealthDataRingSensor),\
    \ RingSensorEntityDescription\n    (key='wifi_signal_strength', translation_key='wifi_signal_strength',\n\
    \    category=['chimes', 'doorbots', 'authorized_doorbots', 'stickup_cams'],\n\
    \    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT, icon=\n  \
    \  'mdi:wifi', device_class=SensorDeviceClass.SIGNAL_STRENGTH, cls=\n    HealthDataRingSensor))"
  - (RingSensorEntityDescription, ...)
  - "(RitualsSensorEntityDescription(key='battery_percentage',\n    native_unit_of_measurement=PERCENTAGE,\
    \ device_class=SensorDeviceClass.\n    BATTERY, value_fn=lambda diffuser: diffuser.battery_percentage,\
    \ has_fn=\n    lambda diffuser: diffuser.has_battery), RitualsSensorEntityDescription(\n\
    \    key='fill', translation_key='fill', icon='mdi:beaker', value_fn=lambda\n\
    \    diffuser: diffuser.fill), RitualsSensorEntityDescription(key='perfume',\n\
    \    translation_key='perfume', icon='mdi:tag', value_fn=lambda diffuser:\n  \
    \  diffuser.perfume), RitualsSensorEntityDescription(key='wifi_percentage',\n\
    \    translation_key='wifi_percentage', icon='mdi:wifi',\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_fn=lambda diffuser:\n    diffuser.wifi_percentage))"
  - "(RokuSensorEntityDescription(key='active_app', translation_key='active_app',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, icon='mdi:application',\n    value_fn=lambda\
    \ device: device.app.name if device.app else None),\n    RokuSensorEntityDescription(key='active_app_id',\
    \ translation_key=\n    'active_app_id', entity_category=EntityCategory.DIAGNOSTIC,\
    \ icon=\n    'mdi:application-cog', value_fn=lambda device: device.app.app_id\
    \ if\n    device.app else None))"
  - (RokuSensorEntityDescription, ...)
  - (RunStates.QUEUED, RunStates.RUNNING)
  - "(SFRBoxSensorEntityDescription[DslInfo](key='linemode', entity_category=\n  \
    \  EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n    translation_key='dsl_linemode',\
    \ value_fn=lambda x: x.linemode),\n    SFRBoxSensorEntityDescription[DslInfo](key='counter',\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n\
    \    translation_key='dsl_counter', value_fn=lambda x: x.counter),\n    SFRBoxSensorEntityDescription[DslInfo](key='crc',\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n\
    \    translation_key='dsl_crc', value_fn=lambda x: x.crc),\n    SFRBoxSensorEntityDescription[DslInfo](key='noise_down',\
    \ device_class=\n    SensorDeviceClass.SIGNAL_STRENGTH, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, entity_registry_enabled_default=False,\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, translation_key='dsl_noise_down',\n\
    \    value_fn=lambda x: x.noise_down), SFRBoxSensorEntityDescription[DslInfo\n\
    \    ](key='noise_up', device_class=SensorDeviceClass.SIGNAL_STRENGTH,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    translation_key='dsl_noise_up',\
    \ value_fn=lambda x: x.noise_up),\n    SFRBoxSensorEntityDescription[DslInfo](key='attenuation_down',\n\
    \    device_class=SensorDeviceClass.SIGNAL_STRENGTH, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False,\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, translation_key='dsl_attenuation_down',\n\
    \    value_fn=lambda x: x.attenuation_down), SFRBoxSensorEntityDescription[\n\
    \    DslInfo](key='attenuation_up', device_class=SensorDeviceClass.\n    SIGNAL_STRENGTH,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS, state_class=SensorStateClass.MEASUREMENT,\n\
    \    translation_key='dsl_attenuation_up', value_fn=lambda x: x.\n    attenuation_up),\
    \ SFRBoxSensorEntityDescription[DslInfo](key='rate_down',\n    device_class=SensorDeviceClass.DATA_RATE,\
    \ native_unit_of_measurement=\n    UnitOfDataRate.KILOBITS_PER_SECOND, state_class=SensorStateClass.\n\
    \    MEASUREMENT, translation_key='dsl_rate_down', value_fn=lambda x: x.\n   \
    \ rate_down), SFRBoxSensorEntityDescription[DslInfo](key='rate_up',\n    device_class=SensorDeviceClass.DATA_RATE,\
    \ native_unit_of_measurement=\n    UnitOfDataRate.KILOBITS_PER_SECOND, state_class=SensorStateClass.\n\
    \    MEASUREMENT, translation_key='dsl_rate_up', value_fn=lambda x: x.\n    rate_up),\
    \ SFRBoxSensorEntityDescription[DslInfo](key='line_status',\n    device_class=SensorDeviceClass.ENUM,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, entity_registry_enabled_default=False,\
    \ options=['no_defect',\n    'of_frame', 'loss_of_signal', 'loss_of_power', 'loss_of_signal_quality',\n\
    \    'unknown'], translation_key='dsl_line_status', value_fn=lambda x: x.\n  \
    \  line_status.lower().replace(' ', '_')), SFRBoxSensorEntityDescription[\n  \
    \  DslInfo](key='training', device_class=SensorDeviceClass.ENUM,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, options=['idle',\n    'g_994_training',\
    \ 'g_992_started', 'g_922_channel_analysis',\n    'g_992_message_exchange', 'g_993_started',\
    \ 'g_993_channel_analysis',\n    'g_993_message_exchange', 'showtime', 'unknown'],\
    \ translation_key=\n    'dsl_training', value_fn=lambda x: x.training.lower().replace('\
    \ ', '_')\n    .replace('.', '_')))"
  - (SFRBoxSensorEntityDescription[DslInfo], ...)
  - "(SFRBoxSensorEntityDescription[SystemInfo](key='net_infra', device_class=\n \
    \   SensorDeviceClass.ENUM, entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ options=['adsl', 'ftth', 'gprs',\n    'unknown'], translation_key='net_infra',\
    \ value_fn=lambda x: x.net_infra\n    ), SFRBoxSensorEntityDescription[SystemInfo](key='alimvoltage',\n\
    \    device_class=SensorDeviceClass.VOLTAGE, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, entity_registry_enabled_default=False,\n    native_unit_of_measurement=UnitOfElectricPotential.MILLIVOLT,\
    \ value_fn=\n    lambda x: x.alimvoltage), SFRBoxSensorEntityDescription[SystemInfo](key\n\
    \    ='temperature', device_class=SensorDeviceClass.TEMPERATURE,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ value_fn=lambda x: x.temperature / 1000))"
  - (SFRBoxSensorEntityDescription[SystemInfo], ...)
  - "(SFRBoxSensorEntityDescription[WanInfo](key='mode', device_class=\n    SensorDeviceClass.ENUM,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ options=['adsl_ppp',\n    'adsl_routed', 'ftth_routed', 'grps_ppp', 'unknown'],\
    \ translation_key=\n    'wan_mode', value_fn=lambda x: x.mode.replace('/', '_')),)"
  - (SFRBoxSensorEntityDescription[WanInfo], ...)
  - "(SIMPLE_TEMPERATURE_SENSOR_DESCRIPTION, OneWireSensorEntityDescription(key=\n\
    \    'humidity', device_class=SensorDeviceClass.HUMIDITY,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    PERCENTAGE, read_mode=READ_MODE_FLOAT, state_class=SensorStateClass.\n\
    \    MEASUREMENT), OneWireSensorEntityDescription(key='HIH3600/humidity',\n  \
    \  device_class=SensorDeviceClass.HUMIDITY,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    PERCENTAGE, read_mode=READ_MODE_FLOAT, state_class=SensorStateClass.\n\
    \    MEASUREMENT, translation_key='humidity_hih3600'),\n    OneWireSensorEntityDescription(key='HIH4000/humidity',\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, entity_registry_enabled_default=False,\n\
    \    native_unit_of_measurement=PERCENTAGE, read_mode=READ_MODE_FLOAT,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ translation_key=\n    'humidity_hih4000'), OneWireSensorEntityDescription(key=\n\
    \    'HIH5030/humidity', device_class=SensorDeviceClass.HUMIDITY,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    PERCENTAGE, read_mode=READ_MODE_FLOAT, state_class=SensorStateClass.\n\
    \    MEASUREMENT, translation_key='humidity_hih5030'),\n    OneWireSensorEntityDescription(key='HTM1735/humidity',\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, entity_registry_enabled_default=False,\n\
    \    native_unit_of_measurement=PERCENTAGE, read_mode=READ_MODE_FLOAT,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ translation_key=\n    'humidity_htm1735'), OneWireSensorEntityDescription(key=\n\
    \    'B1-R1-A/pressure', device_class=SensorDeviceClass.PRESSURE,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    UnitOfPressure.MBAR, read_mode=READ_MODE_FLOAT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), OneWireSensorEntityDescription(key=\n\
    \    'S3-R1-A/illuminance', device_class=SensorDeviceClass.ILLUMINANCE,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    LIGHT_LUX, read_mode=READ_MODE_FLOAT, state_class=SensorStateClass.\n\
    \    MEASUREMENT), OneWireSensorEntityDescription(key='VAD', device_class=\n \
    \   SensorDeviceClass.VOLTAGE, entity_registry_enabled_default=False,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ read_mode=\n    READ_MODE_FLOAT, state_class=SensorStateClass.MEASUREMENT,\n\
    \    translation_key='voltage_vad'), OneWireSensorEntityDescription(key=\n   \
    \ 'VDD', device_class=SensorDeviceClass.VOLTAGE,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT, read_mode=READ_MODE_FLOAT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, translation_key='voltage_vdd'),\n\
    \    OneWireSensorEntityDescription(key='vis', device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ entity_registry_enabled_default=False,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ read_mode=\n    READ_MODE_FLOAT, state_class=SensorStateClass.MEASUREMENT,\n\
    \    translation_key='voltage_vis'))"
  - "(SIMPLE_TEMPERATURE_SENSOR_DESCRIPTION, OneWireSensorEntityDescription(key=\n\
    \    'typeX/temperature', device_class=SensorDeviceClass.TEMPERATURE,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, read_mode=READ_MODE_FLOAT,\
    \ override_key=lambda\n    d, o: 'typeK/temperature', state_class=SensorStateClass.MEASUREMENT,\n\
    \    translation_key='thermocouple_temperature_k'),\n    OneWireSensorEntityDescription(key='volt',\
    \ device_class=\n    SensorDeviceClass.VOLTAGE, entity_registry_enabled_default=False,\n\
    \    native_unit_of_measurement=UnitOfElectricPotential.VOLT, read_mode=\n   \
    \ READ_MODE_FLOAT, state_class=SensorStateClass.MEASUREMENT),\n    OneWireSensorEntityDescription(key='vis',\
    \ device_class=\n    SensorDeviceClass.VOLTAGE, entity_registry_enabled_default=False,\n\
    \    native_unit_of_measurement=UnitOfElectricPotential.VOLT, read_mode=\n   \
    \ READ_MODE_FLOAT, state_class=SensorStateClass.MEASUREMENT,\n    translation_key='voltage_vis_gradient'))"
  - (SIMPLE_TEMPERATURE_SENSOR_DESCRIPTION,)
  - (SOLAR_POWERED_ID, SOLAR_POWERED_NAME)
  - (SSDSensorDeviceClass, Units | None)
  - (SSDSensorDeviceClass.CO2, Units.CONCENTRATION_PARTS_PER_MILLION)
  - (SSDSensorDeviceClass.COUNT, None)
  - (SSDSensorDeviceClass.HUMIDITY, Units.PERCENTAGE)
  - (SSDSensorDeviceClass.PRESSURE, Units.PRESSURE_HPA)
  - "(SSDSensorDeviceClass.SIGNAL_STRENGTH, Units.SIGNAL_STRENGTH_DECIBELS_MILLIWATT\n\
    \    )"
  - (SSDSensorDeviceClass.TEMPERATURE, Units.TEMP_CELSIUS)
  - (SSDSensorDeviceClass.VOLTAGE, Units.ELECTRIC_POTENTIAL_MILLIVOLT)
  - (STATE_POLLUTANT_LEVEL_GOOD, 'mdi:emoticon-excited')
  - (STATE_POLLUTANT_LEVEL_HAZARDOUS, 'mdi:biohazard')
  - (STATE_POLLUTANT_LEVEL_MODERATE, 'mdi:emoticon-happy')
  - (STATE_POLLUTANT_LEVEL_UNHEALTHY, 'mdi:emoticon-sad')
  - (STATE_POLLUTANT_LEVEL_UNHEALTHY_SENSITIVE, 'mdi:emoticon-neutral')
  - (STATE_POLLUTANT_LEVEL_VERY_UNHEALTHY, 'mdi:emoticon-dead')
  - (STATE_UNKNOWN, None, '')
  - (STATE_UNKNOWN, STATE_UNAVAILABLE)
  - (STAT_COUNT, STAT_COUNT_BINARY_ON, STAT_COUNT_BINARY_OFF)
  - (STEP_GOAL, SLEEP_GOAL, WEIGHT_GOAL)
  - "(SabnzbdSensorEntityDescription(key='status', translation_key='status'),\n  \
    \  SabnzbdSensorEntityDescription(key=SPEED_KEY, translation_key='speed',\n  \
    \  device_class=SensorDeviceClass.DATA_RATE, native_unit_of_measurement=\n   \
    \ UnitOfDataRate.MEGABYTES_PER_SECOND, state_class=SensorStateClass.\n    MEASUREMENT),\
    \ SabnzbdSensorEntityDescription(key='mb', translation_key=\n    'queue', native_unit_of_measurement=UnitOfInformation.MEGABYTES,\n\
    \    device_class=SensorDeviceClass.DATA_SIZE, state_class=SensorStateClass.\n\
    \    MEASUREMENT), SabnzbdSensorEntityDescription(key='mbleft',\n    translation_key='left',\
    \ native_unit_of_measurement=UnitOfInformation.\n    MEGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SabnzbdSensorEntityDescription(key=\n\
    \    'diskspacetotal1', translation_key='total_disk_space',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SabnzbdSensorEntityDescription(key='diskspace1', translation_key=\n    'free_disk_space',\
    \ native_unit_of_measurement=UnitOfInformation.\n    GIGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SabnzbdSensorEntityDescription(key=\n\
    \    'noofslots_total', translation_key='queue_count', state_class=\n    SensorStateClass.TOTAL),\
    \ SabnzbdSensorEntityDescription(key='day_size',\n    translation_key='daily_total',\
    \ native_unit_of_measurement=\n    UnitOfInformation.GIGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  TOTAL_INCREASING), SabnzbdSensorEntityDescription(key='week_size',\n    translation_key='weekly_total',\
    \ native_unit_of_measurement=\n    UnitOfInformation.GIGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  TOTAL_INCREASING), SabnzbdSensorEntityDescription(key='month_size',\n    translation_key='monthly_total',\
    \ native_unit_of_measurement=\n    UnitOfInformation.GIGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  TOTAL_INCREASING), SabnzbdSensorEntityDescription(key='total_size',\n    translation_key='overall_total',\
    \ native_unit_of_measurement=\n    UnitOfInformation.GIGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING))"
  - (SabnzbdSensorEntityDescription, ...)
  - "(SensiboDeviceSensorEntityDescription(key='airq_tvoc', translation_key=\n   \
    \ 'airq_tvoc', native_unit_of_measurement=CONCENTRATION_PARTS_PER_BILLION,\n \
    \   state_class=SensorStateClass.MEASUREMENT, icon='mdi:air-filter',\n    value_fn=lambda\
    \ data: data.tvoc, extra_fn=None),\n    SensiboDeviceSensorEntityDescription(key='airq_co2',\
    \ translation_key=\n    'airq_co2', device_class=SensorDeviceClass.CO2,\n    native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION,\
    \ state_class\n    =SensorStateClass.MEASUREMENT, value_fn=lambda data: data.co2,\
    \ extra_fn\n    =None))"
  - "(SensiboDeviceSensorEntityDescription(key='pm25', device_class=\n    SensorDeviceClass.PM25,\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, icon='mdi:air-filter', value_fn=lambda data: data.pm25,\n  \
    \  extra_fn=None), SensiboDeviceSensorEntityDescription(key=\n    'pure_sensitivity',\
    \ translation_key='sensitivity', icon=\n    'mdi:air-filter', value_fn=lambda\
    \ data: data.pure_sensitivity, extra_fn\n    =None), FILTER_LAST_RESET_DESCRIPTION)"
  - "(SensiboDeviceSensorEntityDescription(key='pm25', device_class=\n    SensorDeviceClass.PM25,\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, value_fn=lambda data: data.pm25, extra_fn=None),\n    SensiboDeviceSensorEntityDescription(key='tvoc',\
    \ translation_key='tvoc',\n    native_unit_of_measurement=CONCENTRATION_PARTS_PER_BILLION,\
    \ state_class\n    =SensorStateClass.MEASUREMENT, value_fn=lambda data: data.tvoc,\n\
    \    extra_fn=None), SensiboDeviceSensorEntityDescription(key='co2',\n    device_class=SensorDeviceClass.CO2,\
    \ native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION, state_class=SensorStateClass.\n\
    \    MEASUREMENT, value_fn=lambda data: data.co2, extra_fn=None),\n    SensiboDeviceSensorEntityDescription(key='ethanol',\n\
    \    native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION, state_class\n\
    \    =SensorStateClass.MEASUREMENT, translation_key='ethanol', value_fn=lambda\n\
    \    data: data.etoh, extra_fn=None), SensiboDeviceSensorEntityDescription(\n\
    \    key='iaq', device_class=SensorDeviceClass.AQI, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data.iaq, extra_fn=\n    None))"
  - "(SensiboDeviceSensorEntityDescription(key='timer_time', translation_key=\n  \
    \  'timer_time', device_class=SensorDeviceClass.TIMESTAMP, icon=\n    'mdi:timer',\
    \ value_fn=lambda data: data.timer_time, extra_fn=lambda\n    data: {'id': data.timer_id,\
    \ 'turn_on': data.timer_state_on}),\n    SensiboDeviceSensorEntityDescription(key='feels_like',\
    \ translation_key=\n    'feels_like', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data.feelslike,\n    extra_fn=None, entity_registry_enabled_default=False),\n\
    \    SensiboDeviceSensorEntityDescription(key='climate_react_low',\n    translation_key='climate_react_low',\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: data.\n \
    \   smart_low_temp_threshold, extra_fn=lambda data: data.smart_low_state,\n  \
    \  entity_registry_enabled_default=False),\n    SensiboDeviceSensorEntityDescription(key='climate_react_high',\n\
    \    translation_key='climate_react_high', device_class=SensorDeviceClass.\n \
    \   TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda data: data.\n    smart_high_temp_threshold, extra_fn=lambda\
    \ data: data.smart_high_state,\n    entity_registry_enabled_default=False),\n\
    \    SensiboDeviceSensorEntityDescription(key='climate_react_type',\n    translation_key='smart_type',\
    \ value_fn=lambda data: data.smart_type,\n    extra_fn=None, entity_registry_enabled_default=False),\n\
    \    FILTER_LAST_RESET_DESCRIPTION)"
  - (SensiboDeviceSensorEntityDescription, ...)
  - "(SensiboMotionSensorEntityDescription(key='rssi', translation_key='rssi',\n \
    \   device_class=SensorDeviceClass.SIGNAL_STRENGTH, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT, state_class=SensorStateClass.\n\
    \    MEASUREMENT, icon='mdi:wifi', value_fn=lambda data: data.rssi,\n    entity_registry_enabled_default=False),\n\
    \    SensiboMotionSensorEntityDescription(key='battery_voltage',\n    translation_key='battery_voltage',\
    \ device_class=SensorDeviceClass.\n    VOLTAGE, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    native_unit_of_measurement=UnitOfElectricPotential.VOLT, state_class=\n \
    \   SensorStateClass.MEASUREMENT, icon='mdi:battery', value_fn=lambda data:\n\
    \    data.battery_voltage), SensiboMotionSensorEntityDescription(key=\n    'humidity',\
    \ device_class=SensorDeviceClass.HUMIDITY,\n    native_unit_of_measurement=PERCENTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, icon='mdi:water', value_fn=lambda\
    \ data: data.humidity),\n    SensiboMotionSensorEntityDescription(key='temperature',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  icon='mdi:thermometer', value_fn=lambda data: data.temperature))"
  - (SensiboMotionSensorEntityDescription, ...)
  - (SensorDeviceClass | None, str | None)
  - (SensorDeviceClass.DATE, SensorDeviceClass.TIMESTAMP)
  - (SensorDeviceClass.ENERGY, enery_uom)
  - (SensorDeviceClass.PRESSURE, SensorDeviceClass.TEMPERATURE)
  - "(SensorEntityDescription(device_class=SensorDeviceClass.SIGNAL_STRENGTH,\n  \
    \  entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ key=AZD_WIFI_RSSI,\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\n\
    \    state_class=SensorStateClass.MEASUREMENT),)"
  - "(SensorEntityDescription(device_class=SensorDeviceClass.SIGNAL_STRENGTH,\n  \
    \  entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ key=AZD_WIFI_RSSI,\n    translation_key='rssi', native_unit_of_measurement=\n\
    \    SIGNAL_STRENGTH_DECIBELS_MILLIWATT, state_class=SensorStateClass.\n    MEASUREMENT),)"
  - "(SensorEntityDescription(device_class=SensorDeviceClass.TEMPERATURE, key=\n \
    \   AZD_TEMP, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(\n    device_class=SensorDeviceClass.HUMIDITY, key=AZD_HUMIDITY,\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT))"
  - "(SensorEntityDescription(device_class=SensorDeviceClass.TEMPERATURE, key=\n \
    \   AZD_TEMP, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    state_class=SensorStateClass.MEASUREMENT),)"
  - "(SensorEntityDescription(entity_registry_enabled_default=False, key=\n    'agent_version',\
    \ translation_key='agent_version', entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(\n    entity_registry_enabled_default=False, key='apparmor_version',\n\
    \    translation_key='apparmor_version', entity_category=EntityCategory.\n   \
    \ DIAGNOSTIC), SensorEntityDescription(entity_registry_enabled_default=\n    False,\
    \ key='disk_total', translation_key='disk_total',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    SensorEntityDescription(entity_registry_enabled_default=False, key=\n   \
    \ 'disk_used', translation_key='disk_used', native_unit_of_measurement=\n    UnitOfInformation.GIGABYTES,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    entity_category=EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(\n    entity_registry_enabled_default=False, key='disk_free',\
    \ translation_key\n    ='disk_free', native_unit_of_measurement=UnitOfInformation.GIGABYTES,\n\
    \    device_class=SensorDeviceClass.DATA_SIZE, entity_category=\n    EntityCategory.DIAGNOSTIC))"
  - "(SensorEntityDescription(entity_registry_enabled_default=False, key=\n    ATTR_CPU_PERCENT,\
    \ translation_key='cpu_percent', icon='mdi:cpu-64-bit',\n    native_unit_of_measurement=PERCENTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), SensorEntityDescription(entity_registry_enabled_default=\n\
    \    False, key=ATTR_MEMORY_PERCENT, translation_key='memory_percent', icon=\n\
    \    'mdi:memory', native_unit_of_measurement=PERCENTAGE, state_class=\n    SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(entity_registry_enabled_default=False, key=\n    ATTR_VERSION,\
    \ translation_key='version'), SensorEntityDescription(\n    entity_registry_enabled_default=False,\
    \ key=ATTR_VERSION_LATEST,\n    translation_key='version_latest'))"
  - "(SensorEntityDescription(key='1-0:0.0.0*255', translation_key=\n    'ownership_id',\
    \ icon='mdi:flash', entity_registry_enabled_default=False\n    ), SensorEntityDescription(key='1-0:0.0.9*255',\
    \ translation_key=\n    'electricity_id', icon='mdi:flash'), SensorEntityDescription(key=\n\
    \    '1-0:0.2.0*0', translation_key='configuration_program_version_number',\n\
    \    icon='mdi:flash'), SensorEntityDescription(key='1-0:0.2.0*1',\n    translation_key='firmware_version_number',\
    \ icon='mdi:flash'),\n    SensorEntityDescription(key='1-0:1.7.0*255', translation_key=\n\
    \    'positive_active_instantaneous_power', state_class=SensorStateClass.\n  \
    \  MEASUREMENT, device_class=SensorDeviceClass.POWER),\n    SensorEntityDescription(key='1-0:1.8.0*255',\
    \ translation_key=\n    'positive_active_energy_total', state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, device_class=SensorDeviceClass.ENERGY),\n    SensorEntityDescription(key='1-0:1.8.1*255',\
    \ translation_key=\n    'positive_active_energy_tariff_t1', state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, device_class=SensorDeviceClass.ENERGY),\n    SensorEntityDescription(key='1-0:1.8.2*255',\
    \ translation_key=\n    'positive_active_energy_tariff_t2', state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, device_class=SensorDeviceClass.ENERGY),\n    SensorEntityDescription(key='1-0:1.17.0*255',\
    \ translation_key=\n    'last_signed_positive_active_energy_total'), SensorEntityDescription(\n\
    \    key='1-0:2.8.0*255', translation_key='negative_active_energy_total',\n  \
    \  state_class=SensorStateClass.TOTAL_INCREASING, device_class=\n    SensorDeviceClass.ENERGY),\
    \ SensorEntityDescription(key='1-0:2.8.1*255',\n    translation_key='negative_active_energy_tariff_t1',\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, device_class=SensorDeviceClass.\n\
    \    ENERGY), SensorEntityDescription(key='1-0:2.8.2*255', translation_key=\n\
    \    'negative_active_energy_tariff_t2', state_class=SensorStateClass.\n    TOTAL_INCREASING,\
    \ device_class=SensorDeviceClass.ENERGY),\n    SensorEntityDescription(key='1-0:14.7.0*255',\
    \ translation_key=\n    'supply_frequency', icon='mdi:sine-wave'), SensorEntityDescription(key=\n\
    \    '1-0:15.7.0*255', translation_key='absolute_active_instantaneous_power',\n\
    \    state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.POWER),\
    \ SensorEntityDescription(key='1-0:16.7.0*255',\n    translation_key='sum_active_instantaneous_power',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.POWER),\n\
    \    SensorEntityDescription(key='1-0:31.7.0*255', translation_key=\n    'l1_active_instantaneous_amperage',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.CURRENT),\n\
    \    SensorEntityDescription(key='1-0:32.7.0*255', translation_key=\n    'l1_active_instantaneous_voltage',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.VOLTAGE),\n\
    \    SensorEntityDescription(key='1-0:36.7.0*255', translation_key=\n    'l1_active_instantaneous_power',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.POWER),\n\
    \    SensorEntityDescription(key='1-0:51.7.0*255', translation_key=\n    'l2_active_instantaneous_amperage',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.CURRENT),\n\
    \    SensorEntityDescription(key='1-0:52.7.0*255', translation_key=\n    'l2_active_instantaneous_voltage',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.VOLTAGE),\n\
    \    SensorEntityDescription(key='1-0:56.7.0*255', translation_key=\n    'l2_active_instantaneous_power',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.POWER),\n\
    \    SensorEntityDescription(key='1-0:71.7.0*255', translation_key=\n    'l3_active_instantaneous_amperage',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.CURRENT),\n\
    \    SensorEntityDescription(key='1-0:72.7.0*255', translation_key=\n    'l3_active_instantaneous_voltage',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.VOLTAGE),\n\
    \    SensorEntityDescription(key='1-0:76.7.0*255', translation_key=\n    'l3_active_instantaneous_power',\
    \ state_class=SensorStateClass.\n    MEASUREMENT, device_class=SensorDeviceClass.POWER),\n\
    \    SensorEntityDescription(key='1-0:81.7.1*255', translation_key=\n    'u_l2_u_l1_phase_angle',\
    \ icon='mdi:sine-wave'), SensorEntityDescription\n    (key='1-0:81.7.2*255', translation_key='u_l3_u_l1_phase_angle',\
    \ icon=\n    'mdi:sine-wave'), SensorEntityDescription(key='1-0:81.7.4*255',\n\
    \    translation_key='u_l1_i_l1_phase_angle', icon='mdi:sine-wave'),\n    SensorEntityDescription(key='1-0:81.7.15*255',\
    \ translation_key=\n    'u_l2_i_l2_phase_angle', icon='mdi:sine-wave'), SensorEntityDescription\n\
    \    (key='1-0:81.7.26*255', translation_key='u_l3_i_l3_phase_angle', icon=\n\
    \    'mdi:sine-wave'), SensorEntityDescription(key='1-0:96.1.0*255',\n    translation_key='metering_point_id_1',\
    \ icon='mdi:flash'),\n    SensorEntityDescription(key='1-0:96.5.0*255', translation_key=\n\
    \    'internal_operating_status', icon='mdi:flash'))"
  - "(SensorEntityDescription(key='ArticleCacheMB', translation_key=\n    'article_cache',\
    \ native_unit_of_measurement=UnitOfInformation.MEGABYTES,\n    device_class=SensorDeviceClass.DATA_SIZE),\
    \ SensorEntityDescription(key=\n    'AverageDownloadRate', translation_key='average_speed',\
    \ device_class=\n    SensorDeviceClass.DATA_RATE, native_unit_of_measurement=UnitOfDataRate.\n\
    \    BYTES_PER_SECOND, suggested_unit_of_measurement=UnitOfDataRate.\n    MEGABYTES_PER_SECOND),\
    \ SensorEntityDescription(key='DownloadPaused',\n    translation_key='download_paused'),\
    \ SensorEntityDescription(key=\n    'DownloadRate', translation_key='speed', device_class=SensorDeviceClass\n\
    \    .DATA_RATE, native_unit_of_measurement=UnitOfDataRate.BYTES_PER_SECOND,\n\
    \    suggested_unit_of_measurement=UnitOfDataRate.MEGABYTES_PER_SECOND),\n   \
    \ SensorEntityDescription(key='DownloadedSizeMB', translation_key='size',\n  \
    \  native_unit_of_measurement=UnitOfInformation.MEGABYTES, device_class=\n   \
    \ SensorDeviceClass.DATA_SIZE), SensorEntityDescription(key=\n    'FreeDiskSpaceMB',\
    \ translation_key='disk_free',\n    native_unit_of_measurement=UnitOfInformation.MEGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE), SensorEntityDescription(key=\n\
    \    'PostJobCount', translation_key='post_processing_jobs',\n    native_unit_of_measurement='Jobs'),\
    \ SensorEntityDescription(key=\n    'PostPaused', translation_key='post_processing_paused'),\n\
    \    SensorEntityDescription(key='RemainingSizeMB', translation_key=\n    'queue_size',\
    \ native_unit_of_measurement=UnitOfInformation.MEGABYTES,\n    device_class=SensorDeviceClass.DATA_SIZE),\
    \ SensorEntityDescription(key=\n    'UpTimeSec', translation_key='uptime', device_class=SensorDeviceClass.\n\
    \    TIMESTAMP), SensorEntityDescription(key='DownloadLimit',\n    translation_key='speed_limit',\
    \ device_class=SensorDeviceClass.DATA_RATE,\n    native_unit_of_measurement=UnitOfDataRate.BYTES_PER_SECOND,\n\
    \    suggested_unit_of_measurement=UnitOfDataRate.MEGABYTES_PER_SECOND))"
  - "(SensorEntityDescription(key='Battery', native_unit_of_measurement=\n    PERCENTAGE,\
    \ device_class=SensorDeviceClass.BATTERY, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(key='Power',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.POWER,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC))"
  - "(SensorEntityDescription(key='Chlorine', translation_key='chlorine',\n    native_unit_of_measurement=UnitOfElectricPotential.MILLIVOLT,\
    \ icon=\n    'mdi:pool'), SensorEntityDescription(key='pH', icon='mdi:pool',\n\
    \    device_class=SensorDeviceClass.PH), SensorEntityDescription(key=\n    'Battery',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.BATTERY),\
    \ SensorEntityDescription(key='Water Temp',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ icon=\n    'mdi:coolant-temperature', device_class=SensorDeviceClass.TEMPERATURE),\n\
    \    SensorEntityDescription(key='Last Seen', translation_key='last_seen',\n \
    \   icon='mdi:clock', device_class=SensorDeviceClass.TIMESTAMP),\n    SensorEntityDescription(key='Chlorine\
    \ High', translation_key=\n    'chlorine_high', native_unit_of_measurement=UnitOfElectricPotential.\n\
    \    MILLIVOLT, icon='mdi:pool'), SensorEntityDescription(key='Chlorine Low',\n\
    \    translation_key='chlorine_low', native_unit_of_measurement=\n    UnitOfElectricPotential.MILLIVOLT,\
    \ icon='mdi:pool'),\n    SensorEntityDescription(key='pH High', translation_key='ph_high',\
    \ icon=\n    'mdi:pool'), SensorEntityDescription(key='pH Low', translation_key=\n\
    \    'ph_low', icon='mdi:pool'))"
  - "(SensorEntityDescription(key='Fajr', translation_key='fajr'),\n    SensorEntityDescription(key='Sunrise',\
    \ translation_key='sunrise'),\n    SensorEntityDescription(key='Dhuhr', translation_key='dhuhr'),\n\
    \    SensorEntityDescription(key='Asr', translation_key='asr'),\n    SensorEntityDescription(key='Maghrib',\
    \ translation_key='maghrib'),\n    SensorEntityDescription(key='Isha', translation_key='isha'),\n\
    \    SensorEntityDescription(key='Midnight', translation_key='midnight'))"
  - "(SensorEntityDescription(key='LatestFirmware', icon='mdi:update',\n    entity_category=EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(key\n    ='EngineSpeed', icon='mdi:speedometer', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC), SensorEntityDescription(key='EngineTargetSpeed', icon=\n   \
    \ 'mdi:speedometer', entity_category=EntityCategory.DIAGNOSTIC),\n    SensorEntityDescription(key='EngineOilPressure',\n\
    \    native_unit_of_measurement=UnitOfPressure.PSI, device_class=\n    SensorDeviceClass.PRESSURE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_category=EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(key\n    ='EngineCoolantTemperature', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(key=\n    'BatteryVoltage', native_unit_of_measurement=UnitOfElectricPotential.\n\
    \    VOLT, device_class=SensorDeviceClass.VOLTAGE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC\n    ), SensorEntityDescription(key='LubeOilTemperature',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC), SensorEntityDescription(key\n\
    \    ='GensetControllerTemperature', device_class=SensorDeviceClass.\n    TEMPERATURE,\
    \ state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(key=\n    'EngineCompartmentTemperature', device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT, entity_category=\n\
    \    EntityCategory.DIAGNOSTIC), SensorEntityDescription(key=\n    'GeneratorTrueTotalPower',\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    device_class=SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    SensorEntityDescription(key='GeneratorTruePercentOfRatedPower',\n    native_unit_of_measurement=PERCENTAGE,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC), SensorEntityDescription(key=\n\
    \    'GeneratorVoltageAverageLineToLine', native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT,\
    \ device_class=SensorDeviceClass.VOLTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), SensorEntityDescription(key=\n\
    \    'GeneratorFrequency', native_unit_of_measurement=UnitOfFrequency.HERTZ,\n\
    \    device_class=SensorDeviceClass.FREQUENCY, state_class=SensorStateClass.\n\
    \    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC),\n    SensorEntityDescription(key='GensetState',\
    \ icon=\n    'mdi:home-lightning-bolt'), SensorEntityDescription(key=\n    'GensetControllerTotalOperationTime',\
    \ icon='mdi:hours-24',\n    entity_category=EntityCategory.DIAGNOSTIC), SensorEntityDescription(key\n\
    \    ='EngineTotalRunTime', icon='mdi:hours-24', entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(key=\n    'EngineTotalRunTimeLoaded', icon='mdi:hours-24',\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), SensorEntityDescription(key=\n\
    \    'AtsContactorPosition', icon='mdi:electric-switch'),\n    SensorEntityDescription(key='IPAddress',\
    \ icon='mdi:ip-network',\n    entity_category=EntityCategory.DIAGNOSTIC), SensorEntityDescription(key\n\
    \    ='ConnectedServerIPAddress', icon='mdi:server-network', entity_category\n\
    \    =EntityCategory.DIAGNOSTIC), SensorEntityDescription(key=\n    'Source1VoltageAverageLineToLine',\
    \ native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT, device_class=SensorDeviceClass.VOLTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(key=\n    'Source2VoltageAverageLineToLine', native_unit_of_measurement=\n\
    \    UnitOfElectricPotential.VOLT, device_class=SensorDeviceClass.VOLTAGE,\n \
    \   state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(key=\n    'GensetTotalEnergy', native_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY, state_class=\n   \
    \ SensorStateClass.TOTAL_INCREASING), SensorEntityDescription(key=\n    'EngineTotalNumberOfStarts',\
    \ icon='mdi:engine', entity_category=\n    EntityCategory.DIAGNOSTIC), SensorEntityDescription(key=\n\
    \    'GeneratorCurrentAverage', native_unit_of_measurement=\n    UnitOfElectricCurrent.AMPERE,\
    \ device_class=SensorDeviceClass.CURRENT,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC))"
  - "(SensorEntityDescription(key='NetworkName', translation_key='network_name',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False),\
    \ SensorEntityDescription(key=\n    'State', translation_key='state', entity_registry_enabled_default=True),\n\
    \    SensorEntityDescription(key='NetworkCode', translation_key=\n    'network_code',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False),\
    \ SensorEntityDescription(key=\n    'CID', translation_key='cid', icon='mdi:radio-tower',\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False),\n\
    \    SensorEntityDescription(key='LAC', translation_key='lac',\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False))"
  - "(SensorEntityDescription(key='PVPC', icon='mdi:currency-eur',\n    native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ name='PVPC'),)"
  - "(SensorEntityDescription(key='SignalStrength', device_class=\n    SensorDeviceClass.SIGNAL_STRENGTH,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  MEASUREMENT), SensorEntityDescription(key='SignalPercent', icon=\n    'mdi:signal-cellular-3',\
    \ translation_key='signal_percent',\n    native_unit_of_measurement=PERCENTAGE,\
    \ entity_registry_enabled_default=\n    True, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='BitErrorRate', translation_key=\n    'bit_error_rate',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=PERCENTAGE,\
    \ entity_registry_enabled_default=\n    False, state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='active_torrents', translation_key=\n    'active_torrents'),\
    \ SensorEntityDescription(key='paused_torrents',\n    translation_key='paused_torrents'),\
    \ SensorEntityDescription(key=\n    'total_torrents', translation_key='total_torrents'),\n\
    \    SensorEntityDescription(key='completed_torrents', translation_key=\n    'completed_torrents'),\
    \ SensorEntityDescription(key='started_torrents',\n    translation_key='started_torrents'))"
  - "(SensorEntityDescription(key='ads_blocked_today', translation_key=\n    'ads_blocked_today',\
    \ native_unit_of_measurement='ads', icon=\n    'mdi:close-octagon-outline'), SensorEntityDescription(key=\n\
    \    'ads_percentage_today', translation_key='ads_percentage_today',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:close-octagon-outline'\n    ), SensorEntityDescription(key='clients_ever_seen',\
    \ translation_key=\n    'clients_ever_seen', native_unit_of_measurement='clients',\
    \ icon=\n    'mdi:account-outline'), SensorEntityDescription(key='dns_queries_today',\n\
    \    translation_key='dns_queries_today', native_unit_of_measurement=\n    'queries',\
    \ icon='mdi:comment-question-outline'),\n    SensorEntityDescription(key='domains_being_blocked',\
    \ translation_key=\n    'domains_being_blocked', native_unit_of_measurement='domains',\
    \ icon=\n    'mdi:block-helper'), SensorEntityDescription(key='queries_cached',\n\
    \    translation_key='queries_cached', native_unit_of_measurement='queries',\n\
    \    icon='mdi:comment-question-outline'), SensorEntityDescription(key=\n    'queries_forwarded',\
    \ translation_key='queries_forwarded',\n    native_unit_of_measurement='queries',\
    \ icon=\n    'mdi:comment-question-outline'), SensorEntityDescription(key=\n \
    \   'unique_clients', translation_key='unique_clients',\n    native_unit_of_measurement='clients',\
    \ icon='mdi:account-outline'),\n    SensorEntityDescription(key='unique_domains',\
    \ translation_key=\n    'unique_domains', native_unit_of_measurement='domains',\
    \ icon='mdi:domain'))"
  - "(SensorEntityDescription(key='all', name='Events'), SensorEntityDescription\n\
    \    (key='hour', name='Events Last Hour'), SensorEntityDescription(key=\n   \
    \ 'day', name='Events Last Day'), SensorEntityDescription(key='week',\n    name='Events\
    \ Last Week'), SensorEntityDescription(key='month', name=\n    'Events Last Month'))"
  - "(SensorEntityDescription(key='application_name', translation_key=\n    'application_name',\
    \ entity_registry_enabled_default=False),\n    SensorEntityDescription(key='body',\
    \ translation_key='body'),\n    SensorEntityDescription(key='notification_id',\
    \ translation_key=\n    'notification_id', entity_registry_enabled_default=False),\n\
    \    SensorEntityDescription(key='notification_tag', translation_key=\n    'notification_tag',\
    \ entity_registry_enabled_default=False),\n    SensorEntityDescription(key='package_name',\
    \ translation_key=\n    'package_name', entity_registry_enabled_default=False),\n\
    \    SensorEntityDescription(key='receiver_email', translation_key=\n    'receiver_email',\
    \ entity_registry_enabled_default=False),\n    SensorEntityDescription(key='sender_email',\
    \ translation_key=\n    'sender_email', entity_registry_enabled_default=False),\n\
    \    SensorEntityDescription(key='source_device_iden', translation_key=\n    'source_device_identifier',\
    \ entity_registry_enabled_default=False),\n    SensorEntityDescription(key='title',\
    \ translation_key='title'),\n    SensorEntityDescription(key='type', translation_key='type',\n\
    \    entity_registry_enabled_default=False))"
  - "(SensorEntityDescription(key='average', name='Average',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, icon='mdi:power-off'), SensorEntityDescription\n\
    \    (key='consumption', name='Consumption', native_unit_of_measurement=\n   \
    \ UnitOfEnergy.WATT_HOUR, device_class=SensorDeviceClass.ENERGY, icon=\n    'mdi:power-plug'),\
    \ SensorEntityDescription(key='max', name='Max',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, icon='mdi:arrow-up'), SensorEntityDescription(\n\
    \    key='min', name='Min', native_unit_of_measurement=UnitOfPower.WATT,\n   \
    \ device_class=SensorDeviceClass.POWER, icon='mdi:arrow-down'))"
  - "(SensorEntityDescription(key='averagePower', name='average power',\n    device_class=SensorDeviceClass.POWER,\
    \ native_unit_of_measurement=\n    UnitOfPower.WATT), SensorEntityDescription(key='power',\
    \ name='power',\n    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, native_unit_of_measurement=UnitOfPower.WATT),\n    SensorEntityDescription(key='powerProduction',\
    \ name='power production',\n    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n\
    \    MEASUREMENT, native_unit_of_measurement=UnitOfPower.WATT),\n    SensorEntityDescription(key='minPower',\
    \ name='min power', device_class=\n    SensorDeviceClass.POWER, native_unit_of_measurement=UnitOfPower.WATT),\n\
    \    SensorEntityDescription(key='maxPower', name='max power', device_class=\n\
    \    SensorDeviceClass.POWER, native_unit_of_measurement=UnitOfPower.WATT),\n\
    \    SensorEntityDescription(key='accumulatedConsumption', name=\n    'accumulated\
    \ consumption', device_class=SensorDeviceClass.ENERGY,\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ state_class=\n    SensorStateClass.TOTAL), SensorEntityDescription(key=\n  \
    \  'accumulatedConsumptionLastHour', name=\n    'accumulated consumption current\
    \ hour', device_class=SensorDeviceClass.\n    ENERGY, native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING), SensorEntityDescription\n\
    \    (key='estimatedHourConsumption', name=\n    'Estimated consumption current\
    \ hour', device_class=SensorDeviceClass.\n    ENERGY, native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR),\n\
    \    SensorEntityDescription(key='accumulatedProduction', name=\n    'accumulated\
    \ production', device_class=SensorDeviceClass.ENERGY,\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ state_class=\n    SensorStateClass.TOTAL), SensorEntityDescription(key=\n  \
    \  'accumulatedProductionLastHour', name=\n    'accumulated production current\
    \ hour', device_class=SensorDeviceClass.\n    ENERGY, native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING), SensorEntityDescription\n\
    \    (key='lastMeterConsumption', name='last meter consumption',\n    device_class=SensorDeviceClass.ENERGY,\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING), SensorEntityDescription(key='lastMeterProduction',\n \
    \   name='last meter production', device_class=SensorDeviceClass.ENERGY,\n   \
    \ native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, state_class=\n    SensorStateClass.TOTAL_INCREASING),\
    \ SensorEntityDescription(key=\n    'voltagePhase1', name='voltage phase1', device_class=SensorDeviceClass.\n\
    \    VOLTAGE, native_unit_of_measurement=UnitOfElectricPotential.VOLT,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'voltagePhase2', name='voltage phase2', device_class=SensorDeviceClass.\n\
    \    VOLTAGE, native_unit_of_measurement=UnitOfElectricPotential.VOLT,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'voltagePhase3', name='voltage phase3', device_class=SensorDeviceClass.\n\
    \    VOLTAGE, native_unit_of_measurement=UnitOfElectricPotential.VOLT,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'currentL1', name='current L1', device_class=SensorDeviceClass.CURRENT,\n\
    \    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE, state_class=\n \
    \   SensorStateClass.MEASUREMENT), SensorEntityDescription(key='currentL2',\n\
    \    name='current L2', device_class=SensorDeviceClass.CURRENT,\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key='currentL3',\n\
    \    name='current L3', device_class=SensorDeviceClass.CURRENT,\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'signalStrength', name='signal strength', device_class=\n    SensorDeviceClass.SIGNAL_STRENGTH,\
    \ native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC), SensorEntityDescription(key\n\
    \    ='accumulatedReward', name='accumulated reward', device_class=\n    SensorDeviceClass.MONETARY,\
    \ state_class=SensorStateClass.TOTAL),\n    SensorEntityDescription(key='accumulatedCost',\
    \ name='accumulated cost',\n    device_class=SensorDeviceClass.MONETARY, state_class=SensorStateClass.\n\
    \    TOTAL), SensorEntityDescription(key='powerFactor', name='power factor',\n\
    \    device_class=SensorDeviceClass.POWER_FACTOR, native_unit_of_measurement\n\
    \    =PERCENTAGE, state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='average_windspeed', name='Average windspeed',\n\
    \    device_class=SensorDeviceClass.WIND_SPEED, state_class=SensorStateClass\n\
    \    .MEASUREMENT, native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR),\
    \ SensorEntityDescription(key='barometric_pressure',\n    name='Barometric pressure',\
    \ device_class=SensorDeviceClass.PRESSURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfPressure.HPA), SensorEntityDescription(key='battery',\
    \ name=\n    'Battery', icon='mdi:battery'), SensorEntityDescription(key=\n  \
    \  'co2_air_quality', name='CO2 air quality', device_class=\n    SensorDeviceClass.CO2,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION),\n\
    \    SensorEntityDescription(key='command', name='Command', icon='mdi:text'),\n\
    \    SensorEntityDescription(key='current_phase_1', name='Current phase 1',\n\
    \    device_class=SensorDeviceClass.CURRENT, state_class=SensorStateClass.\n \
    \   MEASUREMENT, native_unit_of_measurement=UnitOfElectricCurrent.AMPERE),\n \
    \   SensorEntityDescription(key='current_phase_2', name='Current phase 2',\n \
    \   device_class=SensorDeviceClass.CURRENT, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, native_unit_of_measurement=UnitOfElectricCurrent.AMPERE),\n  \
    \  SensorEntityDescription(key='current_phase_3', name='Current phase 3',\n  \
    \  device_class=SensorDeviceClass.CURRENT, state_class=SensorStateClass.\n   \
    \ MEASUREMENT, native_unit_of_measurement=UnitOfElectricCurrent.AMPERE),\n   \
    \ SensorEntityDescription(key='distance', name='Distance', device_class=\n   \
    \ SensorDeviceClass.DISTANCE, state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfLength.MILLIMETERS),\n\
    \    SensorEntityDescription(key='doorbell_melody', name='Doorbell melody',\n\
    \    icon='mdi:bell'), SensorEntityDescription(key='firmware', name=\n    'Firmware',\
    \ icon='mdi:information-outline'), SensorEntityDescription(\n    key='hardware',\
    \ name='Hardware', icon='mdi:chip'),\n    SensorEntityDescription(key='humidity',\
    \ name='Humidity', device_class=\n    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=PERCENTAGE), SensorEntityDescription(key=\n  \
    \  'humidity_status', name='Humidity status', icon='mdi:water-percent'),\n   \
    \ SensorEntityDescription(key='kilowatt', name='Kilowatt', device_class=\n   \
    \ SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfPower.KILO_WATT),\n\
    \    SensorEntityDescription(key='light_intensity', name='Light intensity',\n\
    \    device_class=SensorDeviceClass.ILLUMINANCE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=LIGHT_LUX),\n    SensorEntityDescription(key='meter_value',\
    \ name='Meter value', icon=\n    'mdi:counter'), SensorEntityDescription(key='noise_level',\
    \ name=\n    'Noise level', icon='mdi:bell-alert'), SensorEntityDescription(key=\n\
    \    'rain_rate', name='Rain rate', device_class=SensorDeviceClass.\n    PRECIPITATION_INTENSITY,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR),\n\
    \    SensorEntityDescription(key='revision', name='Revision', icon=\n    'mdi:information'),\
    \ SensorEntityDescription(key='temperature', name=\n    'Temperature', device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS), SensorEntityDescription(key='total_rain',\n \
    \   name='Total rain', device_class=SensorDeviceClass.PRECIPITATION,\n    state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    native_unit_of_measurement=UnitOfPrecipitationDepth.MILLIMETERS),\n    SensorEntityDescription(key='uv_intensity',\
    \ name='UV intensity', icon=\n    'mdi:sunglasses', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UV_INDEX), SensorEntityDescription(key=\n    'version',\
    \ name='Version', icon='mdi:information'),\n    SensorEntityDescription(key='voltage',\
    \ name='Voltage', device_class=\n    SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfElectricPotential.VOLT),\n    SensorEntityDescription(key='watt',\
    \ name='Watt', device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfPower.WATT), SensorEntityDescription(\n\
    \    key='weather_forecast', name='Weather forecast', icon=\n    'mdi:weather-cloudy-clock'),\
    \ SensorEntityDescription(key='windchill',\n    name='Wind chill', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n \
    \   UnitOfTemperature.CELSIUS), SensorEntityDescription(key='winddirection',\n\
    \    name='Wind direction', icon='mdi:compass', state_class=SensorStateClass\n\
    \    .MEASUREMENT, native_unit_of_measurement=DEGREE),\n    SensorEntityDescription(key='windgusts',\
    \ name='Wind gusts',\n    device_class=SensorDeviceClass.WIND_SPEED, state_class=SensorStateClass\n\
    \    .MEASUREMENT, native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR),\
    \ SensorEntityDescription(key='windspeed', name=\n    'Wind speed', device_class=SensorDeviceClass.WIND_SPEED,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfSpeed.\n\
    \    KILOMETERS_PER_HOUR), SensorEntityDescription(key='windtemp', name=\n   \
    \ 'Wind temperature', device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS))"
  - "(SensorEntityDescription(key='battery', name='Battery',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:battery'),\n    SensorEntityDescription(key='state', name='State'),\n\
    \    SensorEntityDescription(key='capacity', name='Capacity'))"
  - "(SensorEntityDescription(key='battery', translation_key='battery',\n    device_class=SensorDeviceClass.VOLTAGE,\
    \ native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT), SensorEntityDescription(key='balance',\n\
    \    translation_key='balance', icon='mdi:cash-multiple'),\n    SensorEntityDescription(key='ctemp',\
    \ translation_key=\n    'interior_temperature', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n    SensorEntityDescription(key='etemp',\
    \ translation_key=\n    'engine_temperature', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n    SensorEntityDescription(key='gsm_lvl',\
    \ translation_key='gsm_signal',\n    native_unit_of_measurement=PERCENTAGE), SensorEntityDescription(key=\n\
    \    'fuel', translation_key='fuel', icon='mdi:fuel'),\n    SensorEntityDescription(key='errors',\
    \ translation_key='errors', icon=\n    'mdi:alert-octagon'), SensorEntityDescription(key='mileage',\n\
    \    translation_key='mileage', native_unit_of_measurement=UnitOfLength.\n   \
    \ KILOMETERS, device_class=SensorDeviceClass.DISTANCE, icon='mdi:counter'))"
  - "(SensorEntityDescription(key='battery_level', device_class=\n    SensorDeviceClass.BATTERY,\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT),)"
  - "(SensorEntityDescription(key='battery_level', native_unit_of_measurement=\n \
    \   PERCENTAGE, device_class=SensorDeviceClass.BATTERY),\n    SensorEntityDescription(key='last_activity_time',\
    \ translation_key=\n    'last_activity', icon='mdi:history'), SensorEntityDescription(key=\n\
    \    'recording', translation_key='recording_mode', icon='mdi:eye'),\n    SensorEntityDescription(key='signal_strength_category',\
    \ translation_key\n    ='wifi_signal_category', icon='mdi:wifi'), SensorEntityDescription(key=\n\
    \    'signal_strength_percentage', translation_key='wifi_signal_strength',\n \
    \   native_unit_of_measurement=PERCENTAGE, icon='mdi:wifi'),\n    SensorEntityDescription(key='streaming',\
    \ translation_key=\n    'streaming_mode', icon='mdi:camera'))"
  - "(SensorEntityDescription(key='black', name='Ink level Black', icon=\n    'mdi:water',\
    \ native_unit_of_measurement=PERCENTAGE),\n    SensorEntityDescription(key='photoblack',\
    \ name='Ink level Photoblack',\n    icon='mdi:water', native_unit_of_measurement=PERCENTAGE),\n\
    \    SensorEntityDescription(key='magenta', name='Ink level Magenta', icon=\n\
    \    'mdi:water', native_unit_of_measurement=PERCENTAGE),\n    SensorEntityDescription(key='cyan',\
    \ name='Ink level Cyan', icon=\n    'mdi:water', native_unit_of_measurement=PERCENTAGE),\n\
    \    SensorEntityDescription(key='yellow', name='Ink level Yellow', icon=\n  \
    \  'mdi:water', native_unit_of_measurement=PERCENTAGE),\n    SensorEntityDescription(key='clean',\
    \ name='Cleaning level', icon=\n    'mdi:water', native_unit_of_measurement=PERCENTAGE))"
  - "(SensorEntityDescription(key='ble_strength', translation_key='ble_strength',\n\
    \    device_class=SensorDeviceClass.SIGNAL_STRENGTH,\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\n\
    \    state_class=SensorStateClass.MEASUREMENT, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ entity_registry_enabled_default=False),\n    SensorEntityDescription(key='battery_percentage',\
    \ device_class=\n    SensorDeviceClass.BATTERY, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, native_unit_of_measurement=\n\
    \    PERCENTAGE))"
  - "(SensorEntityDescription(key='chlorine', translation_key='chlorine',\n    native_unit_of_measurement=UnitOfElectricPotential.MILLIVOLT,\
    \ icon=\n    'mdi:pool', state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='ph',\
    \ icon='mdi:pool', device_class=\n    SensorDeviceClass.PH, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='temperature', translation_key=\n    'water_temperature',\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key='date_time',\n\
    \    translation_key='last_measured', device_class=SensorDeviceClass.\n    TIMESTAMP),\
    \ SensorEntityDescription(key='red_ox', translation_key=\n    'red_ox', native_unit_of_measurement=UnitOfElectricPotential.MILLIVOLT,\n\
    \    icon='mdi:pool', state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='battery',\
    \ native_unit_of_measurement=\n    PERCENTAGE, state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.BATTERY))"
  - "(SensorEntityDescription(key='consumption_day', translation_key=\n    'consumption_day',\
    \ state_class=SensorStateClass.TOTAL_INCREASING,\n    native_unit_of_measurement=UnitOfVolume.LITERS,\
    \ device_class=\n    SensorDeviceClass.WATER), SensorEntityDescription(key=\n\
    \    'consumption_total', translation_key='consumption_total', state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING, native_unit_of_measurement=\n    UnitOfVolume.CUBIC_METERS,\
    \ device_class=SensorDeviceClass.WATER),\n    SensorEntityDescription(key='pulse_count',\
    \ translation_key='pulse_count'))"
  - "(SensorEntityDescription(key='control_signal', translation_key=\n    'control_signal',\
    \ native_unit_of_measurement=PERCENTAGE, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'current_power', translation_key='current_power',\
    \ device_class=\n    SensorDeviceClass.POWER, native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'raw_ambient_temperature', translation_key='uncalibrated_temperature',\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  entity_registry_enabled_default=False))"
  - "(SensorEntityDescription(key='cpu_temp', name='CPU Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, icon=\n    'mdi:checkbox-marked-circle-outline',\
    \ entity_registry_enabled_default=\n    False, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='cpu_usage', name='CPU Usage',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:chip', state_class=\n    SensorStateClass.MEASUREMENT, suggested_display_precision=0))"
  - "(SensorEntityDescription(key='current_interval', translation_key=\n    'current_interval',\
    \ suggested_display_precision=2,\n    native_unit_of_measurement=f'{UnitOfVolume.GALLONS}/m'),\n\
    \    SensorEntityDescription(key='month_to_date', translation_key=\n    'month_to_date',\
    \ suggested_display_precision=2,\n    native_unit_of_measurement=UnitOfVolume.GALLONS,\
    \ device_class=\n    SensorDeviceClass.WATER, state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    SensorEntityDescription(key='week_to_date', translation_key=\n    'week_to_date',\
    \ suggested_display_precision=2,\n    native_unit_of_measurement=UnitOfVolume.GALLONS,\
    \ device_class=\n    SensorDeviceClass.WATER, state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    SensorEntityDescription(key='today', translation_key='today',\n    suggested_display_precision=2,\
    \ native_unit_of_measurement=UnitOfVolume.\n    GALLONS, device_class=SensorDeviceClass.WATER,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), SensorEntityDescription(key=\n\
    \    'last_60_min', translation_key='last_60_min',\n    suggested_display_precision=2,\
    \ native_unit_of_measurement=\n    f'{UnitOfVolume.GALLONS}/h', state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='last_24_hrs', translation_key=\n    'last_24_hrs',\
    \ suggested_display_precision=2,\n    native_unit_of_measurement=f'{UnitOfVolume.GALLONS}/d',\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'last_30_days', translation_key='last_30_days',\n    suggested_display_precision=2,\
    \ native_unit_of_measurement=\n    f'{UnitOfVolume.GALLONS}/mo', state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='date', name='Date', icon='mdi:star-david'),\n \
    \   SensorEntityDescription(key='weekly_portion', name='Parshat Hashavua',\n \
    \   icon='mdi:book-open-variant'), SensorEntityDescription(key='holiday',\n  \
    \  name='Holiday', icon='mdi:calendar-star'), SensorEntityDescription(key=\n \
    \   'omer_count', name='Day of the Omer', icon='mdi:counter'),\n    SensorEntityDescription(key='daf_yomi',\
    \ name='Daf Yomi', icon=\n    'mdi:book-open-variant'))"
  - "(SensorEntityDescription(key='dist', native_unit_of_measurement=\n    UnitOfLength.CENTIMETERS,\
    \ device_class=SensorDeviceClass.DISTANCE,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'rssi', device_class=SensorDeviceClass.SIGNAL_STRENGTH,\
    \ entity_category\n    =EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n\
    \    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'temp', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key='humid',\n    device_class=SensorDeviceClass.HUMIDITY,\
    \ native_unit_of_measurement=\n    PERCENTAGE, state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='down_max_bandwidth', name=\n    'Maximum Download\
    \ Bandwidth', device_class=SensorDeviceClass.DATA_RATE,\n    native_unit_of_measurement=UnitOfDataRate.MEGABITS_PER_SECOND,\
    \ icon=\n    'mdi:download'), SensorEntityDescription(key='up_max_bandwidth',\
    \ name=\n    'Maximum Upload Bandwidth', device_class=SensorDeviceClass.DATA_RATE,\n\
    \    native_unit_of_measurement=UnitOfDataRate.MEGABITS_PER_SECOND, icon=\n  \
    \  'mdi:upload'), SensorEntityDescription(key='current_down_bandwidth',\n    name='Currently\
    \ Used Download Bandwidth', device_class=\n    SensorDeviceClass.DATA_RATE, native_unit_of_measurement=UnitOfDataRate.\n\
    \    MEGABITS_PER_SECOND, state_class=SensorStateClass.MEASUREMENT, icon=\n  \
    \  'mdi:download'), SensorEntityDescription(key='current_up_bandwidth',\n    name='Currently\
    \ Used Upload Bandwidth', device_class=SensorDeviceClass.\n    DATA_RATE, native_unit_of_measurement=UnitOfDataRate.\n\
    \    MEGABITS_PER_SECOND, state_class=SensorStateClass.MEASUREMENT, icon=\n  \
    \  'mdi:upload'), SensorEntityDescription(key='number_of_reboots', name=\n   \
    \ 'Number of reboot', icon='mdi:restart'))"
  - "(SensorEntityDescription(key='download', translation_key='download_speed'),\n\
    \    SensorEntityDescription(key='upload', translation_key='upload_speed'))"
  - "(SensorEntityDescription(key='drive_smart_status', name='SMART Status',\n   \
    \ icon='mdi:checkbox-marked-circle-outline',\n    entity_registry_enabled_default=False),\
    \ SensorEntityDescription(key=\n    'drive_temp', name='Temperature', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    icon='mdi:thermometer', entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='energy', name='Energy',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING\n\
    \    ), SensorEntityDescription(key='power', name='Power',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='exchangerate', name='Exchange rate (1 BTC)'),\n\
    \    SensorEntityDescription(key='trade_volume_btc', name='Trade volume',\n  \
    \  native_unit_of_measurement='BTC'), SensorEntityDescription(key=\n    'miners_revenue_usd',\
    \ name='Miners revenue', native_unit_of_measurement\n    ='USD'), SensorEntityDescription(key='btc_mined',\
    \ name='Mined',\n    native_unit_of_measurement='BTC'), SensorEntityDescription(key=\n\
    \    'trade_volume_usd', name='Trade volume', native_unit_of_measurement=\n  \
    \  'USD'), SensorEntityDescription(key='difficulty', name='Difficulty'),\n   \
    \ SensorEntityDescription(key='minutes_between_blocks', name=\n    'Time between\
    \ Blocks', native_unit_of_measurement=UnitOfTime.MINUTES),\n    SensorEntityDescription(key='number_of_transactions',\
    \ name=\n    'No. of Transactions'), SensorEntityDescription(key='hash_rate',\
    \ name=\n    'Hash rate', native_unit_of_measurement=f'PH/{UnitOfTime.SECONDS}'),\n\
    \    SensorEntityDescription(key='timestamp', name='Timestamp'),\n    SensorEntityDescription(key='mined_blocks',\
    \ name='Mined Blocks'),\n    SensorEntityDescription(key='blocks_size', name='Block\
    \ size'),\n    SensorEntityDescription(key='total_fees_btc', name='Total fees',\n\
    \    native_unit_of_measurement='BTC'), SensorEntityDescription(key=\n    'total_btc_sent',\
    \ name='Total sent', native_unit_of_measurement='BTC'),\n    SensorEntityDescription(key='estimated_btc_sent',\
    \ name='Estimated sent',\n    native_unit_of_measurement='BTC'), SensorEntityDescription(key=\n\
    \    'total_btc', name='Total', native_unit_of_measurement='BTC'),\n    SensorEntityDescription(key='total_blocks',\
    \ name='Total Blocks'),\n    SensorEntityDescription(key='next_retarget', name='Next\
    \ retarget'),\n    SensorEntityDescription(key='estimated_transaction_volume_usd',\
    \ name=\n    'Est. Transaction volume', native_unit_of_measurement='USD'),\n \
    \   SensorEntityDescription(key='miners_revenue_btc', name='Miners revenue',\n\
    \    native_unit_of_measurement='BTC'), SensorEntityDescription(key=\n    'market_price_usd',\
    \ name='Market price', native_unit_of_measurement='USD'))"
  - "(SensorEntityDescription(key='fido_dollar', name='Fido dollar',\n    native_unit_of_measurement=PRICE,\
    \ icon='mdi:cash'),\n    SensorEntityDescription(key='balance', name='Balance',\n\
    \    native_unit_of_measurement=PRICE, icon='mdi:cash'),\n    SensorEntityDescription(key='data_used',\
    \ name='Data used',\n    native_unit_of_measurement=UnitOfInformation.KILOBITS,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='data_limit',\
    \ name='Data limit',\n    native_unit_of_measurement=UnitOfInformation.KILOBITS,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='data_remaining',\
    \ name='Data remaining',\n    native_unit_of_measurement=UnitOfInformation.KILOBITS,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='text_used',\
    \ name='Text used',\n    native_unit_of_measurement=MESSAGES, icon='mdi:message-text'),\n\
    \    SensorEntityDescription(key='text_limit', name='Text limit',\n    native_unit_of_measurement=MESSAGES,\
    \ icon='mdi:message-text'),\n    SensorEntityDescription(key='text_remaining',\
    \ name='Text remaining',\n    native_unit_of_measurement=MESSAGES, icon='mdi:message-text'),\n\
    \    SensorEntityDescription(key='mms_used', name='MMS used',\n    native_unit_of_measurement=MESSAGES,\
    \ icon='mdi:message-image'),\n    SensorEntityDescription(key='mms_limit', name='MMS\
    \ limit',\n    native_unit_of_measurement=MESSAGES, icon='mdi:message-image'),\n\
    \    SensorEntityDescription(key='mms_remaining', name='MMS remaining',\n    native_unit_of_measurement=MESSAGES,\
    \ icon='mdi:message-image'),\n    SensorEntityDescription(key='text_int_used',\
    \ name=\n    'International text used', native_unit_of_measurement=MESSAGES, icon=\n\
    \    'mdi:message-alert'), SensorEntityDescription(key='text_int_limit',\n   \
    \ name='International text limit', native_unit_of_measurement=MESSAGES,\n    icon='mdi:message-alert'),\
    \ SensorEntityDescription(key=\n    'text_int_remaining', name='International\
    \ remaining',\n    native_unit_of_measurement=MESSAGES, icon='mdi:message-alert'),\n\
    \    SensorEntityDescription(key='talk_used', name='Talk used',\n    native_unit_of_measurement=UnitOfTime.MINUTES,\
    \ icon='mdi:cellphone'),\n    SensorEntityDescription(key='talk_limit', name='Talk\
    \ limit',\n    native_unit_of_measurement=UnitOfTime.MINUTES, icon='mdi:cellphone'),\n\
    \    SensorEntityDescription(key='talk_remaining', name='Talk remaining',\n  \
    \  native_unit_of_measurement=UnitOfTime.MINUTES, icon='mdi:cellphone'),\n   \
    \ SensorEntityDescription(key='other_talk_used', name='Other Talk used',\n   \
    \ native_unit_of_measurement=UnitOfTime.MINUTES, icon='mdi:cellphone'),\n    SensorEntityDescription(key='other_talk_limit',\
    \ name='Other Talk limit',\n    native_unit_of_measurement=UnitOfTime.MINUTES,\
    \ icon='mdi:cellphone'),\n    SensorEntityDescription(key='other_talk_remaining',\
    \ name=\n    'Other Talk remaining', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    icon='mdi:cellphone'))"
  - "(SensorEntityDescription(key='file', translation_key='size', icon=ICON,\n   \
    \ native_unit_of_measurement=UnitOfInformation.MEGABYTES, device_class=\n    SensorDeviceClass.DATA_SIZE,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='bytes',\
    \ translation_key='size_bytes',\n    entity_registry_enabled_default=False, icon=ICON,\n\
    \    native_unit_of_measurement=UnitOfInformation.BYTES, device_class=\n    SensorDeviceClass.DATA_SIZE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_category=EntityCategory.DIAGNOSTIC),\
    \ SensorEntityDescription(key\n    ='last_updated', translation_key='last_updated',\n\
    \    entity_registry_enabled_default=False, icon=ICON, device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ entity_category=EntityCategory.DIAGNOSTIC))"
  - "(SensorEntityDescription(key='first_light', name='Alot Hashachar', icon=\n  \
    \  'mdi:weather-sunset-up'), SensorEntityDescription(key='talit', name=\n    'Talit\
    \ and Tefillin', icon='mdi:calendar-clock'),\n    SensorEntityDescription(key='sunrise',\
    \ name='Hanetz Hachama', icon=\n    'mdi:calendar-clock'), SensorEntityDescription(key='gra_end_shma',\
    \ name\n    ='Latest time for Shma Gr\"a', icon='mdi:calendar-clock'),\n    SensorEntityDescription(key='mga_end_shma',\
    \ name=\n    'Latest time for Shma MG\"A', icon='mdi:calendar-clock'),\n    SensorEntityDescription(key='gra_end_tfila',\
    \ name=\n    'Latest time for Tefilla Gr\"a', icon='mdi:calendar-clock'),\n  \
    \  SensorEntityDescription(key='mga_end_tfila', name=\n    'Latest time for Tefilla\
    \ MG\"A', icon='mdi:calendar-clock'),\n    SensorEntityDescription(key='midday',\
    \ name='Chatzot Hayom', icon=\n    'mdi:calendar-clock'), SensorEntityDescription(key='big_mincha',\
    \ name=\n    'Mincha Gedola', icon='mdi:calendar-clock'), SensorEntityDescription(\n\
    \    key='small_mincha', name='Mincha Ketana', icon='mdi:calendar-clock'),\n \
    \   SensorEntityDescription(key='plag_mincha', name='Plag Hamincha', icon=\n \
    \   'mdi:weather-sunset-down'), SensorEntityDescription(key='sunset', name=\n\
    \    'Shkia', icon='mdi:weather-sunset'), SensorEntityDescription(key=\n    'first_stars',\
    \ name=\"T'set Hakochavim\", icon='mdi:weather-night'),\n    SensorEntityDescription(key='upcoming_shabbat_candle_lighting',\
    \ name=\n    'Upcoming Shabbat Candle Lighting', icon='mdi:candle'),\n    SensorEntityDescription(key='upcoming_shabbat_havdalah',\
    \ name=\n    'Upcoming Shabbat Havdalah', icon='mdi:weather-night'),\n    SensorEntityDescription(key='upcoming_candle_lighting',\
    \ name=\n    'Upcoming Candle Lighting', icon='mdi:candle'), SensorEntityDescription\n\
    \    (key='upcoming_havdalah', name='Upcoming Havdalah', icon=\n    'mdi:weather-night'))"
  - "(SensorEntityDescription(key='gas_consumption', translation_key=\n    'gas_consumption',\
    \ entity_registry_enabled_default=False,\n    native_unit_of_measurement=UnitOfVolume.CUBIC_METERS,\
    \ device_class=\n    SensorDeviceClass.GAS, state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    SensorEntityDescription(key='power_consumption', translation_key=\n    'power_consumption',\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    device_class=SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), SensorEntityDescription(key='energy_consumption_high',\n\
    \    translation_key='energy_consumption_high', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n   \
    \ state_class=SensorStateClass.TOTAL_INCREASING), SensorEntityDescription\n  \
    \  (key='energy_consumption_low', translation_key='energy_consumption_low',\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, device_class=\n \
    \   SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING\n\
    \    ), SensorEntityDescription(key='power_production', translation_key=\n   \
    \ 'power_production', native_unit_of_measurement=UnitOfPower.WATT,\n    device_class=SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), SensorEntityDescription(key='energy_production_high',\n\
    \    translation_key='energy_production_high', native_unit_of_measurement=\n \
    \   UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING),\
    \ SensorEntityDescription\n    (key='energy_production_low', translation_key='energy_production_low',\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, device_class=\n \
    \   SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING\n\
    \    ), SensorEntityDescription(key='energy_tariff_period', translation_key=\n\
    \    'energy_tariff_period', icon='mdi:calendar-clock'))"
  - "(SensorEntityDescription(key='gas_consumption_price', translation_key=\n    'gas_consumption_price',\
    \ entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfVolume.CUBIC_METERS}'),\n\
    \    SensorEntityDescription(key='energy_consumption_price_low',\n    translation_key='energy_consumption_price_low',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}'),\n    SensorEntityDescription(key='energy_consumption_price_high',\n\
    \    translation_key='energy_consumption_price_high', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}'),\n\
    \    SensorEntityDescription(key='energy_production_price_low',\n    translation_key='energy_production_price_low',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}'),\n    SensorEntityDescription(key='energy_production_price_high',\n\
    \    translation_key='energy_production_price_high', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    f'{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}'))"
  - "(SensorEntityDescription(key='inst_power'), SensorEntityDescription(key=\n  \
    \  'avg_power', name='Average', entity_registry_enabled_default=False),\n    SensorEntityDescription(key='max_power',\
    \ name='Max',\n    entity_registry_enabled_default=False))"
  - "(SensorEntityDescription(key='instant_readings', translation_key=\n    'instant_readings',\
    \ device_class=SensorDeviceClass.POWER,\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key='energy_day',\n\
    \    translation_key='energy_day', device_class=SensorDeviceClass.ENERGY,\n  \
    \  native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, state_class=\n    SensorStateClass.TOTAL_INCREASING,\
    \ entity_registry_enabled_default=\n    False), SensorEntityDescription(key='energy_week',\
    \ translation_key=\n    'energy_week', device_class=SensorDeviceClass.ENERGY,\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, state_class=\n  \
    \  SensorStateClass.TOTAL_INCREASING, entity_registry_enabled_default=\n    False),\
    \ SensorEntityDescription(key='energy_month', translation_key=\n    'energy_month',\
    \ device_class=SensorDeviceClass.ENERGY,\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), SensorEntityDescription(key=\n\
    \    'energy_year', translation_key='energy_year', device_class=\n    SensorDeviceClass.ENERGY,\
    \ native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    entity_registry_enabled_default=False), SensorEntityDescription(key=\n  \
    \  'budget', translation_key='budget', entity_registry_enabled_default=\n    False),\
    \ SensorEntityDescription(key='cost_day', translation_key=\n    'cost_day', device_class=SensorDeviceClass.MONETARY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, entity_registry_enabled_default=\n\
    \    False), SensorEntityDescription(key='cost_week', translation_key=\n    'cost_week',\
    \ device_class=SensorDeviceClass.MONETARY, state_class=\n    SensorStateClass.TOTAL_INCREASING,\
    \ entity_registry_enabled_default=\n    False), SensorEntityDescription(key='cost_month',\
    \ translation_key=\n    'cost_month', device_class=SensorDeviceClass.MONETARY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), SensorEntityDescription(key=\n\
    \    'cost_year', translation_key='cost_year', device_class=\n    SensorDeviceClass.MONETARY,\
    \ state_class=SensorStateClass.\n    TOTAL_INCREASING, entity_registry_enabled_default=False),\n\
    \    SensorEntityDescription(key=CONF_CURRENT_VALUES, name='Power Usage',\n  \
    \  device_class=SensorDeviceClass.POWER, native_unit_of_measurement=\n    UnitOfPower.WATT,\
    \ state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='last_build_id', name='Last Build ID', icon=\n \
    \   'mdi:card-account-details'), SensorEntityDescription(key=\n    'last_build_duration',\
    \ name='Last Build Duration',\n    native_unit_of_measurement=UnitOfTime.SECONDS,\
    \ icon='mdi:timelapse'),\n    SensorEntityDescription(key='last_build_finished_at',\
    \ name=\n    'Last Build Finished At', icon='mdi:timetable'),\n    SensorEntityDescription(key='last_build_started_at',\
    \ name=\n    'Last Build Started At', icon='mdi:timetable'), SensorEntityDescription\n\
    \    (key='last_build_state', name='Last Build State', icon='mdi:github'),\n \
    \   SensorEntityDescription(key='state', name='State', icon='mdi:github'))"
  - "(SensorEntityDescription(key='level', native_unit_of_measurement=PERCENTAGE,\n\
    \    device_class=SensorDeviceClass.BATTERY), SensorEntityDescription(key=\n \
    \   'state', translation_key='battery_state'))"
  - "(SensorEntityDescription(key='memory_free', name='Memory Available',\n    native_unit_of_measurement=UnitOfInformation.MEBIBYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:memory',\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, suggested_display_precision=1,\n\
    \    suggested_unit_of_measurement=UnitOfInformation.GIBIBYTES),\n    SensorEntityDescription(key='memory_used',\
    \ name='Memory Used',\n    native_unit_of_measurement=UnitOfInformation.MEBIBYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:memory',\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, suggested_display_precision=1,\n\
    \    suggested_unit_of_measurement=UnitOfInformation.GIBIBYTES),\n    SensorEntityDescription(key='memory_percent_used',\
    \ name='Memory Usage',\n    native_unit_of_measurement=PERCENTAGE, icon='mdi:memory',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, suggested_display_precision=0))"
  - "(SensorEntityDescription(key='missed', name='Freebox missed calls', icon=\n \
    \   'mdi:phone-missed'),)"
  - "(SensorEntityDescription(key='month_cost', name='Monthly cost',\n    device_class=SensorDeviceClass.MONETARY),\
    \ SensorEntityDescription(key=\n    'peak_hour', name='Monthly peak hour consumption',\
    \ device_class=\n    SensorDeviceClass.ENERGY, native_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR), SensorEntityDescription(key='peak_hour_time', name=\n  \
    \  'Time of max hour consumption', device_class=SensorDeviceClass.\n    TIMESTAMP),\
    \ SensorEntityDescription(key='month_cons', name=\n    'Monthly net consumption',\
    \ device_class=SensorDeviceClass.ENERGY,\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING))"
  - "(SensorEntityDescription(key='movies', name='Movie requests', icon=\n    'mdi:movie'),\
    \ SensorEntityDescription(key='tv', name='TV show requests',\n    icon='mdi:television-classic'),\
    \ SensorEntityDescription(key='music',\n    name='Music album requests', icon='mdi:album'),\
    \ SensorEntityDescription\n    (key='pending', name='Pending requests', icon='mdi:clock-alert-outline'\n\
    \    ), SensorEntityDescription(key='approved', name='Approved requests',\n  \
    \  icon='mdi:check'), SensorEntityDescription(key='available', name=\n    'Available\
    \ requests', icon='mdi:download'))"
  - "(SensorEntityDescription(key='name', name='Station name', icon=\n    'mdi:label-outline',\
    \ entity_registry_enabled_default=False),\n    SensorEntityDescription(key='weather',\
    \ name='Weather', icon=\n    'mdi:weather-sunny', entity_registry_enabled_default=True),\n\
    \    SensorEntityDescription(key='temperature', name='Temperature',\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, icon=None, entity_registry_enabled_default=\n\
    \    True), SensorEntityDescription(key='feels_like_temperature', name=\n    'Feels\
    \ like temperature', device_class=SensorDeviceClass.TEMPERATURE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ icon=None,\n    entity_registry_enabled_default=False), SensorEntityDescription(key=\n\
    \    'wind_speed', name='Wind speed', native_unit_of_measurement=UnitOfSpeed\n\
    \    .MILES_PER_HOUR, suggested_unit_of_measurement=UnitOfSpeed.\n    MILES_PER_HOUR,\
    \ device_class=SensorDeviceClass.WIND_SPEED,\n    entity_registry_enabled_default=True),\
    \ SensorEntityDescription(key=\n    'wind_direction', name='Wind direction', icon='mdi:compass-outline',\n\
    \    entity_registry_enabled_default=False), SensorEntityDescription(key=\n  \
    \  'wind_gust', name='Wind gust', native_unit_of_measurement=UnitOfSpeed.\n  \
    \  MILES_PER_HOUR, suggested_unit_of_measurement=UnitOfSpeed.\n    MILES_PER_HOUR,\
    \ device_class=SensorDeviceClass.WIND_SPEED,\n    entity_registry_enabled_default=False),\
    \ SensorEntityDescription(key=\n    'visibility', name='Visibility', icon='mdi:eye',\n\
    \    entity_registry_enabled_default=False), SensorEntityDescription(key=\n  \
    \  'visibility_distance', name='Visibility distance',\n    native_unit_of_measurement=UnitOfLength.KILOMETERS,\
    \ icon='mdi:eye',\n    entity_registry_enabled_default=False), SensorEntityDescription(key=\n\
    \    'uv', name='UV index', native_unit_of_measurement=UV_INDEX, icon=\n    'mdi:weather-sunny-alert',\
    \ entity_registry_enabled_default=True),\n    SensorEntityDescription(key='precipitation',\
    \ name=\n    'Probability of precipitation', native_unit_of_measurement=PERCENTAGE,\n\
    \    icon='mdi:weather-rainy', entity_registry_enabled_default=True),\n    SensorEntityDescription(key='humidity',\
    \ name='Humidity', device_class=\n    SensorDeviceClass.HUMIDITY, native_unit_of_measurement=PERCENTAGE,\
    \ icon\n    =None, entity_registry_enabled_default=False))"
  - "(SensorEntityDescription(key='network_link_status', name='Network Link',\n  \
    \  icon='mdi:checkbox-marked-circle-outline'), SensorEntityDescription(key\n \
    \   ='network_tx', name='Network Up', native_unit_of_measurement=\n    UnitOfDataRate.BITS_PER_SECOND,\
    \ device_class=SensorDeviceClass.\n    DATA_RATE, icon='mdi:upload', entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.MEASUREMENT, suggested_display_precision=1,\n\
    \    suggested_unit_of_measurement=UnitOfDataRate.MEGABITS_PER_SECOND),\n    SensorEntityDescription(key='network_rx',\
    \ name='Network Down',\n    native_unit_of_measurement=UnitOfDataRate.BITS_PER_SECOND,\
    \ device_class\n    =SensorDeviceClass.DATA_RATE, icon='mdi:download',\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, suggested_display_precision=1,\n\
    \    suggested_unit_of_measurement=UnitOfDataRate.MEGABITS_PER_SECOND))"
  - "(SensorEntityDescription(key='next_cycle', translation_key='next_cycle',\n  \
    \  device_class=SensorDeviceClass.TIMESTAMP), SensorEntityDescription(key=\n \
    \   'watering_time', translation_key='watering_time', icon='mdi:water-pump',\n\
    \    native_unit_of_measurement=UnitOfTime.MINUTES))"
  - "(SensorEntityDescription(key='partition_free_space', name='free space',\n   \
    \ native_unit_of_measurement=PERCENTAGE, icon='mdi:harddisk'),)"
  - "(SensorEntityDescription(key='pm', name=ATTR_PM2_5,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    icon='mdi:cloud'), SensorEntityDescription(key='tmp', name=\n    ATTR_TEMPERATURE,\
    \ native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    device_class=SensorDeviceClass.TEMPERATURE),\
    \ SensorEntityDescription(\n    key='hum', name=ATTR_HUMIDITY, native_unit_of_measurement=PERCENTAGE,\n\
    \    icon='mdi:water-percent'), SensorEntityDescription(key='co2', name=\n   \
    \ ATTR_CARBON_DIOXIDE, native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION,\
    \ icon='mdi:molecule-co2'),\n    SensorEntityDescription(key='voc', name=ATTR_VOLATILE_ORGANIC_COMPOUNDS,\n\
    \    native_unit_of_measurement=CONCENTRATION_PARTS_PER_BILLION, icon=\n    'mdi:cloud'),\
    \ SensorEntityDescription(key='allpollu', name=\n    ATTR_FOOBOT_INDEX, native_unit_of_measurement=PERCENTAGE,\
    \ icon=\n    'mdi:percent'))"
  - "(SensorEntityDescription(key='pm1', device_class=SensorDeviceClass.PM1,\n   \
    \ native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER),\n    SensorEntityDescription(key='pm2_5',\
    \ device_class=SensorDeviceClass.\n    PM25, native_unit_of_measurement=\n   \
    \ CONCENTRATION_MICROGRAMS_PER_CUBIC_METER), SensorEntityDescription(key=\n  \
    \  'pm10', device_class=SensorDeviceClass.PM10, native_unit_of_measurement\n \
    \   =CONCENTRATION_MICROGRAMS_PER_CUBIC_METER), SensorEntityDescription(key\n\
    \    ='temperature', device_class=SensorDeviceClass.TEMPERATURE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n\
    \    SensorEntityDescription(key='powerMeasurement', device_class=\n    SensorDeviceClass.ENERGY,\
    \ native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR, state_class=SensorStateClass.TOTAL),\n\
    \    SensorEntityDescription(key='humidity', device_class=SensorDeviceClass.\n\
    \    HUMIDITY, native_unit_of_measurement=PERCENTAGE),\n    SensorEntityDescription(key='wind_speed',\
    \ device_class=\n    SensorDeviceClass.WIND_SPEED, native_unit_of_measurement=UnitOfSpeed.\n\
    \    METERS_PER_SECOND))"
  - "(SensorEntityDescription(key='power', native_unit_of_measurement=\n    UnitOfPower.WATT,\
    \ device_class=SensorDeviceClass.POWER),)"
  - "(SensorEntityDescription(key='power', state_class=SensorStateClass.\n    MEASUREMENT,\
    \ device_class=SensorDeviceClass.POWER,\n    native_unit_of_measurement=UnitOfPower.WATT),)"
  - "(SensorEntityDescription(key='precipitationIntensity', device_class=\n    SensorDeviceClass.PRECIPITATION_INTENSITY,\
    \ state_class=SensorStateClass\n    .MEASUREMENT, native_unit_of_measurement=UnitOfVolumetricFlux.\n\
    \    MILLIMETERS_PER_HOUR), SensorEntityDescription(key='pressureTrend',\n   \
    \ device_class=SensorDeviceClass.ENUM, icon='mdi:gauge', options=[\n    'rising',\
    \ 'falling', 'steady'], translation_key='pressure_trend'))"
  - "(SensorEntityDescription(key='rate_down', name='Freebox download speed',\n  \
    \  device_class=SensorDeviceClass.DATA_RATE, native_unit_of_measurement=\n   \
    \ UnitOfDataRate.KILOBYTES_PER_SECOND, icon='mdi:download-network'),\n    SensorEntityDescription(key='rate_up',\
    \ name='Freebox upload speed',\n    device_class=SensorDeviceClass.DATA_RATE,\
    \ native_unit_of_measurement=\n    UnitOfDataRate.KILOBYTES_PER_SECOND, icon='mdi:upload-network'))"
  - "(SensorEntityDescription(key='rssi', entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.SIGNAL_STRENGTH,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT),\n\
    \    )"
  - "(SensorEntityDescription(key='stationname', translation_key='stationname'),\n\
    \    SensorEntityDescription(key='barometerfc', translation_key=\n    'barometerfc',\
    \ icon='mdi:gauge'), SensorEntityDescription(key=\n    'barometerfcname', translation_key='barometerfcname',\
    \ icon='mdi:gauge'),\n    SensorEntityDescription(key='barometerfcnamenl', translation_key=\n\
    \    'barometerfcnamenl', icon='mdi:gauge'), SensorEntityDescription(key=\n  \
    \  'condition', translation_key='condition', device_class=\n    SensorDeviceClass.ENUM,\
    \ options=STATE_CONDITIONS),\n    SensorEntityDescription(key='conditioncode',\
    \ translation_key=\n    'conditioncode', device_class=SensorDeviceClass.ENUM,\
    \ options=\n    STATE_CONDITION_CODES), SensorEntityDescription(key='conditiondetailed',\n\
    \    translation_key='conditiondetailed', device_class=SensorDeviceClass.\n  \
    \  ENUM, options=STATE_DETAILED_CONDITIONS), SensorEntityDescription(key=\n  \
    \  'conditionexact', translation_key='conditionexact'),\n    SensorEntityDescription(key='symbol',\
    \ translation_key='symbol'),\n    SensorEntityDescription(key='feeltemperature',\
    \ translation_key=\n    'feeltemperature', native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    device_class=SensorDeviceClass.TEMPERATURE), SensorEntityDescription(\n \
    \   key='humidity', device_class=SensorDeviceClass.HUMIDITY,\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:water-percent',\n    state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'temperature', native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n  \
    \  device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'groundtemperature', translation_key='groundtemperature',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n  \
    \  ), SensorEntityDescription(key='windspeed', native_unit_of_measurement=\n \
    \   UnitOfSpeed.KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.\n    WIND_SPEED,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='windforce',\
    \ translation_key='windforce',\n    native_unit_of_measurement='Bft', icon='mdi:weather-windy'),\n\
    \    SensorEntityDescription(key='winddirection', translation_key=\n    'winddirection',\
    \ icon='mdi:compass-outline'), SensorEntityDescription(\n    key='windazimuth',\
    \ translation_key='windazimuth',\n    native_unit_of_measurement=DEGREE, icon='mdi:compass-outline'),\n\
    \    SensorEntityDescription(key='pressure', device_class=SensorDeviceClass.\n\
    \    PRESSURE, native_unit_of_measurement=UnitOfPressure.HPA, icon=\n    'mdi:gauge',\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='visibility',\
    \ translation_key='visibility',\n    native_unit_of_measurement=UnitOfLength.KILOMETERS,\
    \ device_class=\n    SensorDeviceClass.DISTANCE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='windgust', translation_key='windgust',\n   \
    \ native_unit_of_measurement=UnitOfSpeed.KILOMETERS_PER_HOUR,\n    device_class=SensorDeviceClass.WIND_SPEED),\
    \ SensorEntityDescription(key\n    ='precipitation', native_unit_of_measurement=UnitOfVolumetricFlux.\n\
    \    MILLIMETERS_PER_HOUR, state_class=SensorStateClass.MEASUREMENT,\n    device_class=SensorDeviceClass.PRECIPITATION_INTENSITY),\n\
    \    SensorEntityDescription(key='irradiance', device_class=\n    SensorDeviceClass.IRRADIANCE,\
    \ native_unit_of_measurement=\n    UnitOfIrradiance.WATTS_PER_SQUARE_METER, state_class=SensorStateClass.\n\
    \    MEASUREMENT), SensorEntityDescription(key=\n    'precipitation_forecast_average',\
    \ translation_key=\n    'precipitation_forecast_average', native_unit_of_measurement=\n\
    \    UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR, device_class=\n    SensorDeviceClass.PRECIPITATION_INTENSITY),\
    \ SensorEntityDescription(key\n    ='precipitation_forecast_total', translation_key=\n\
    \    'precipitation_forecast_total', native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS,\
    \ device_class=SensorDeviceClass.\n    PRECIPITATION), SensorEntityDescription(key='rainlast24hour',\n\
    \    translation_key='rainlast24hour', native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS,\
    \ device_class=SensorDeviceClass.\n    PRECIPITATION), SensorEntityDescription(key='rainlasthour',\n\
    \    translation_key='rainlasthour', native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS,\
    \ device_class=SensorDeviceClass.\n    PRECIPITATION), SensorEntityDescription(key='temperature_1d',\n\
    \    translation_key='temperature_1d', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE),\n    SensorEntityDescription(key='temperature_2d',\
    \ translation_key=\n    'temperature_2d', native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n\
    \    device_class=SensorDeviceClass.TEMPERATURE), SensorEntityDescription(\n \
    \   key='temperature_3d', translation_key='temperature_3d',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE), SensorEntityDescription(key=\n\
    \    'temperature_4d', translation_key='temperature_4d',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE), SensorEntityDescription(key=\n\
    \    'temperature_5d', translation_key='temperature_5d',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE), SensorEntityDescription(key=\n\
    \    'mintemp_1d', translation_key='mintemp_1d', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE),\n\
    \    SensorEntityDescription(key='mintemp_2d', translation_key='mintemp_2d',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE), SensorEntityDescription(key=\n    'mintemp_3d',\
    \ translation_key='mintemp_3d', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE),\n    SensorEntityDescription(key='mintemp_4d',\
    \ translation_key='mintemp_4d',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE), SensorEntityDescription(key=\n\
    \    'mintemp_5d', translation_key='mintemp_5d', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE),\n\
    \    SensorEntityDescription(key='rain_1d', translation_key='rain_1d',\n    native_unit_of_measurement=UnitOfPrecipitationDepth.MILLIMETERS,\n\
    \    device_class=SensorDeviceClass.PRECIPITATION), SensorEntityDescription(\n\
    \    key='rain_2d', translation_key='rain_2d', native_unit_of_measurement=\n \
    \   UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n  \
    \  PRECIPITATION), SensorEntityDescription(key='rain_3d', translation_key=\n \
    \   'rain_3d', native_unit_of_measurement=UnitOfPrecipitationDepth.\n    MILLIMETERS,\
    \ device_class=SensorDeviceClass.PRECIPITATION),\n    SensorEntityDescription(key='rain_4d',\
    \ translation_key='rain_4d',\n    native_unit_of_measurement=UnitOfPrecipitationDepth.MILLIMETERS,\n\
    \    device_class=SensorDeviceClass.PRECIPITATION), SensorEntityDescription(\n\
    \    key='rain_5d', translation_key='rain_5d', native_unit_of_measurement=\n \
    \   UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n  \
    \  PRECIPITATION), SensorEntityDescription(key='minrain_1d',\n    translation_key='minrain_1d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='minrain_2d',\n    translation_key='minrain_2d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='minrain_3d',\n    translation_key='minrain_3d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='minrain_4d',\n    translation_key='minrain_4d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='minrain_5d',\n    translation_key='minrain_5d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='maxrain_1d',\n    translation_key='maxrain_1d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='maxrain_2d',\n    translation_key='maxrain_2d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='maxrain_3d',\n    translation_key='maxrain_3d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='maxrain_4d',\n    translation_key='maxrain_4d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='maxrain_5d',\n    translation_key='maxrain_5d',\
    \ native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION), SensorEntityDescription(key='rainchance_1d',\n    translation_key='rainchance_1d',\
    \ native_unit_of_measurement=PERCENTAGE,\n    icon='mdi:weather-pouring'), SensorEntityDescription(key=\n\
    \    'rainchance_2d', translation_key='rainchance_2d',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:weather-pouring'),\n    SensorEntityDescription(key='rainchance_3d',\
    \ translation_key=\n    'rainchance_3d', native_unit_of_measurement=PERCENTAGE,\
    \ icon=\n    'mdi:weather-pouring'), SensorEntityDescription(key='rainchance_4d',\n\
    \    translation_key='rainchance_4d', native_unit_of_measurement=PERCENTAGE,\n\
    \    icon='mdi:weather-pouring'), SensorEntityDescription(key=\n    'rainchance_5d',\
    \ translation_key='rainchance_5d',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:weather-pouring'),\n    SensorEntityDescription(key='sunchance_1d',\
    \ translation_key=\n    'sunchance_1d', native_unit_of_measurement=PERCENTAGE,\
    \ icon=\n    'mdi:weather-partly-cloudy'), SensorEntityDescription(key=\n    'sunchance_2d',\
    \ translation_key='sunchance_2d',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:weather-partly-cloudy'\n    ), SensorEntityDescription(key='sunchance_3d',\
    \ translation_key=\n    'sunchance_3d', native_unit_of_measurement=PERCENTAGE,\
    \ icon=\n    'mdi:weather-partly-cloudy'), SensorEntityDescription(key=\n    'sunchance_4d',\
    \ translation_key='sunchance_4d',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:weather-partly-cloudy'\n    ), SensorEntityDescription(key='sunchance_5d',\
    \ translation_key=\n    'sunchance_5d', native_unit_of_measurement=PERCENTAGE,\
    \ icon=\n    'mdi:weather-partly-cloudy'), SensorEntityDescription(key=\n    'windforce_1d',\
    \ translation_key='windforce_1d',\n    native_unit_of_measurement='Bft', icon='mdi:weather-windy'),\n\
    \    SensorEntityDescription(key='windforce_2d', translation_key=\n    'windforce_2d',\
    \ native_unit_of_measurement='Bft', icon=\n    'mdi:weather-windy'), SensorEntityDescription(key='windforce_3d',\n\
    \    translation_key='windforce_3d', native_unit_of_measurement='Bft', icon=\n\
    \    'mdi:weather-windy'), SensorEntityDescription(key='windforce_4d',\n    translation_key='windforce_4d',\
    \ native_unit_of_measurement='Bft', icon=\n    'mdi:weather-windy'), SensorEntityDescription(key='windforce_5d',\n\
    \    translation_key='windforce_5d', native_unit_of_measurement='Bft', icon=\n\
    \    'mdi:weather-windy'), SensorEntityDescription(key='windspeed_1d',\n    translation_key='windspeed_1d',\
    \ native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.WIND_SPEED),\n\
    \    SensorEntityDescription(key='windspeed_2d', translation_key=\n    'windspeed_2d',\
    \ native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.WIND_SPEED),\n\
    \    SensorEntityDescription(key='windspeed_3d', translation_key=\n    'windspeed_3d',\
    \ native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.WIND_SPEED),\n\
    \    SensorEntityDescription(key='windspeed_4d', translation_key=\n    'windspeed_4d',\
    \ native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.WIND_SPEED),\n\
    \    SensorEntityDescription(key='windspeed_5d', translation_key=\n    'windspeed_5d',\
    \ native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.WIND_SPEED),\n\
    \    SensorEntityDescription(key='winddirection_1d', translation_key=\n    'winddirection_1d',\
    \ icon='mdi:compass-outline'),\n    SensorEntityDescription(key='winddirection_2d',\
    \ translation_key=\n    'winddirection_2d', icon='mdi:compass-outline'),\n   \
    \ SensorEntityDescription(key='winddirection_3d', translation_key=\n    'winddirection_3d',\
    \ icon='mdi:compass-outline'),\n    SensorEntityDescription(key='winddirection_4d',\
    \ translation_key=\n    'winddirection_4d', icon='mdi:compass-outline'),\n   \
    \ SensorEntityDescription(key='winddirection_5d', translation_key=\n    'winddirection_5d',\
    \ icon='mdi:compass-outline'),\n    SensorEntityDescription(key='windazimuth_1d',\
    \ translation_key=\n    'windazimuth_1d', native_unit_of_measurement=DEGREE, icon=\n\
    \    'mdi:compass-outline'), SensorEntityDescription(key='windazimuth_2d',\n \
    \   translation_key='windazimuth_2d', native_unit_of_measurement=DEGREE,\n   \
    \ icon='mdi:compass-outline'), SensorEntityDescription(key=\n    'windazimuth_3d',\
    \ translation_key='windazimuth_3d',\n    native_unit_of_measurement=DEGREE, icon='mdi:compass-outline'),\n\
    \    SensorEntityDescription(key='windazimuth_4d', translation_key=\n    'windazimuth_4d',\
    \ native_unit_of_measurement=DEGREE, icon=\n    'mdi:compass-outline'), SensorEntityDescription(key='windazimuth_5d',\n\
    \    translation_key='windazimuth_5d', native_unit_of_measurement=DEGREE,\n  \
    \  icon='mdi:compass-outline'), SensorEntityDescription(key='condition_1d',\n\
    \    translation_key='condition_1d', device_class=SensorDeviceClass.ENUM,\n  \
    \  options=STATE_CONDITIONS), SensorEntityDescription(key='condition_2d',\n  \
    \  translation_key='condition_2d', device_class=SensorDeviceClass.ENUM,\n    options=STATE_CONDITIONS),\
    \ SensorEntityDescription(key='condition_3d',\n    translation_key='condition_3d',\
    \ device_class=SensorDeviceClass.ENUM,\n    options=STATE_CONDITIONS), SensorEntityDescription(key='condition_4d',\n\
    \    translation_key='condition_4d', device_class=SensorDeviceClass.ENUM,\n  \
    \  options=STATE_CONDITIONS), SensorEntityDescription(key='condition_5d',\n  \
    \  translation_key='condition_5d', device_class=SensorDeviceClass.ENUM,\n    options=STATE_CONDITIONS),\
    \ SensorEntityDescription(key=\n    'conditioncode_1d', translation_key='conditioncode_1d',\
    \ device_class=\n    SensorDeviceClass.ENUM, options=STATE_CONDITION_CODES),\n\
    \    SensorEntityDescription(key='conditioncode_2d', translation_key=\n    'conditioncode_2d',\
    \ device_class=SensorDeviceClass.ENUM, options=\n    STATE_CONDITION_CODES), SensorEntityDescription(key='conditioncode_3d',\n\
    \    translation_key='conditioncode_3d', device_class=SensorDeviceClass.ENUM,\n\
    \    options=STATE_CONDITION_CODES), SensorEntityDescription(key=\n    'conditioncode_4d',\
    \ translation_key='conditioncode_4d', device_class=\n    SensorDeviceClass.ENUM,\
    \ options=STATE_CONDITION_CODES),\n    SensorEntityDescription(key='conditioncode_5d',\
    \ translation_key=\n    'conditioncode_5d', device_class=SensorDeviceClass.ENUM,\
    \ options=\n    STATE_CONDITION_CODES), SensorEntityDescription(key=\n    'conditiondetailed_1d',\
    \ translation_key='conditiondetailed_1d',\n    device_class=SensorDeviceClass.ENUM,\
    \ options=STATE_DETAILED_CONDITIONS),\n    SensorEntityDescription(key='conditiondetailed_2d',\
    \ translation_key=\n    'conditiondetailed_2d', device_class=SensorDeviceClass.ENUM,\
    \ options=\n    STATE_DETAILED_CONDITIONS), SensorEntityDescription(key=\n   \
    \ 'conditiondetailed_3d', translation_key='conditiondetailed_3d',\n    device_class=SensorDeviceClass.ENUM,\
    \ options=STATE_DETAILED_CONDITIONS),\n    SensorEntityDescription(key='conditiondetailed_4d',\
    \ translation_key=\n    'conditiondetailed_4d', device_class=SensorDeviceClass.ENUM,\
    \ options=\n    STATE_DETAILED_CONDITIONS), SensorEntityDescription(key=\n   \
    \ 'conditiondetailed_5d', translation_key='conditiondetailed_5d',\n    device_class=SensorDeviceClass.ENUM,\
    \ options=STATE_DETAILED_CONDITIONS),\n    SensorEntityDescription(key='conditionexact_1d',\
    \ translation_key=\n    'conditionexact_1d'), SensorEntityDescription(key='conditionexact_2d',\n\
    \    translation_key='conditionexact_2d'), SensorEntityDescription(key=\n    'conditionexact_3d',\
    \ translation_key='conditionexact_3d'),\n    SensorEntityDescription(key='conditionexact_4d',\
    \ translation_key=\n    'conditionexact_4d'), SensorEntityDescription(key='conditionexact_5d',\n\
    \    translation_key='conditionexact_5d'), SensorEntityDescription(key=\n    'symbol_1d',\
    \ translation_key='symbol_1d'), SensorEntityDescription(key=\n    'symbol_2d',\
    \ translation_key='symbol_2d'), SensorEntityDescription(key=\n    'symbol_3d',\
    \ translation_key='symbol_3d'), SensorEntityDescription(key=\n    'symbol_4d',\
    \ translation_key='symbol_4d'), SensorEntityDescription(key=\n    'symbol_5d',\
    \ translation_key='symbol_5d'))"
  - "(SensorEntityDescription(key='status', name='Charging Status'),\n    SensorEntityDescription(key='charge_time',\
    \ name='Charge Time Elapsed',\n    native_unit_of_measurement=UnitOfTime.MINUTES,\
    \ device_class=\n    SensorDeviceClass.DURATION, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='ambient_temp', name='Ambient Temperature',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n  \
    \  ), SensorEntityDescription(key='ir_temp', name='IR Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key='rtc_temp', name='RTC Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key='usage_session', name=\n    'Usage this Session',\
    \ native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), SensorEntityDescription(key=\n\
    \    'usage_total', name='Total Usage', native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING))"
  - "(SensorEntityDescription(key='status', name='Charging Status'),\n    SensorEntityDescription(key='temperature',\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'voltage', native_unit_of_measurement=UnitOfElectricPotential.VOLT,\n   \
    \ device_class=SensorDeviceClass.VOLTAGE), SensorEntityDescription(key=\n    'amps',\
    \ native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\n    device_class=SensorDeviceClass.CURRENT,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), SensorEntityDescription(key='watts',\n\
    \    native_unit_of_measurement=UnitOfPower.WATT, device_class=\n    SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='charge_time',\
    \ translation_key=\n    'charge_time', native_unit_of_measurement=UnitOfTime.SECONDS,\
    \ icon=\n    'mdi:timer-outline'), SensorEntityDescription(key='energy_added',\n\
    \    translation_key='energy_added', native_unit_of_measurement=UnitOfEnergy\n\
    \    .WATT_HOUR, device_class=SensorDeviceClass.ENERGY, state_class=\n    SensorStateClass.TOTAL_INCREASING))"
  - "(SensorEntityDescription(key='status', name='Status', icon=\n    'mdi:checkbox-marked-circle-outline'),\
    \ SensorEntityDescription(key=\n    'system_temp', name='System Temperature',\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    icon='mdi:thermometer', state_class=SensorStateClass.MEASUREMENT))"
  - (SensorEntityDescription(key='status', translation_key='transmission_status'),)
  - "(SensorEntityDescription(key='tank_health', name='tank_health',\n    native_unit_of_measurement=PERCENTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), SensorEntityDescription(key='tank_hot_water_availability',\n\
    \    name='available_hot_water', native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'compressor_health', name='compressor_health',\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT), SensorEntityDescription(key='override_status', name=\n    'override_status'),\
    \ SensorEntityDescription(key='todays_water_usage',\n    name='water_usage_today',\
    \ native_unit_of_measurement=UnitOfVolume.\n    GALLONS, device_class=SensorDeviceClass.WATER,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), SensorEntityDescription(key=\n\
    \    'todays_energy_usage', name='power_usage_today',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING\n\
    \    ), SensorEntityDescription(key='alert_count', name='alert_count'),\n    SensorEntityDescription(key='wifi_signal',\
    \ name='wifi_signal',\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS,\
    \ device_class=\n    SensorDeviceClass.SIGNAL_STRENGTH, state_class=SensorStateClass.\n\
    \    MEASUREMENT, entity_registry_enabled_default=False, entity_category=\n  \
    \  EntityCategory.DIAGNOSTIC), SensorEntityDescription(key='running_state',\n\
    \    name='running_state'))"
  - "(SensorEntityDescription(key='temp_current', name='Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key='temp_max', name='Daily Max Temperature',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE), SensorEntityDescription(key='temp_min',\n  \
    \  name='Daily Min Temperature', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE),\n    SensorEntityDescription(key='humidity_current',\
    \ name='Humidity',\n    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='humidity_max',\
    \ name='Daily Max Humidity',\n    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    HUMIDITY), SensorEntityDescription(key='humidity_min', name=\n    'Daily\
    \ Min Humidity', native_unit_of_measurement=PERCENTAGE,\n    device_class=SensorDeviceClass.HUMIDITY),\
    \ SensorEntityDescription(key=\n    'pressure_current', name='Pressure', native_unit_of_measurement=\n\
    \    UnitOfPressure.HPA, device_class=SensorDeviceClass.PRESSURE,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'pressure_max', name='Daily Max Pressure',\
    \ native_unit_of_measurement=\n    UnitOfPressure.HPA, device_class=SensorDeviceClass.PRESSURE),\n\
    \    SensorEntityDescription(key='pressure_min', name='Daily Min Pressure',\n\
    \    native_unit_of_measurement=UnitOfPressure.HPA, device_class=\n    SensorDeviceClass.PRESSURE),\
    \ SensorEntityDescription(key='wind_current',\n    name='Wind Speed', native_unit_of_measurement=UnitOfSpeed.\n\
    \    KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.WIND_SPEED,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'wind_max', name='Daily Max Wind Speed', native_unit_of_measurement=\n\
    \    UnitOfSpeed.KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.\n    WIND_SPEED),\
    \ SensorEntityDescription(key='wind_bearing', name=\n    'Wind Bearing', native_unit_of_measurement=DEGREE,\
    \ icon=\n    'mdi:weather-windy'), SensorEntityDescription(key='rain', name=\n\
    \    'Daily Precipitation', native_unit_of_measurement=\n    UnitOfPrecipitationDepth.MILLIMETERS,\
    \ device_class=SensorDeviceClass.\n    PRECIPITATION))"
  - "(SensorEntityDescription(key='temperature', name='Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key='humidity', name='Humidity',\n    native_unit_of_measurement=PERCENTAGE,\
    \ device_class=SensorDeviceClass.\n    HUMIDITY, state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='temperature', native_unit_of_measurement=\n   \
    \ UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n   \
    \ state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n  \
    \  'air_quality', device_class=SensorDeviceClass.AQI),\n    SensorEntityDescription(key='humidity',\
    \ native_unit_of_measurement=\n    PERCENTAGE, device_class=SensorDeviceClass.HUMIDITY,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key='light',\n\
    \    translation_key='light'), SensorEntityDescription(key='noise',\n    translation_key='noise'),\
    \ SensorEntityDescription(key='power',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='volt', native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT,\
    \ device_class=SensorDeviceClass.VOLTAGE,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'current', native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\n\
    \    device_class=SensorDeviceClass.CURRENT, state_class=SensorStateClass.\n \
    \   MEASUREMENT), SensorEntityDescription(key='overload', translation_key=\n \
    \   'overload', native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\n   \
    \ device_class=SensorDeviceClass.CURRENT, state_class=SensorStateClass.\n    MEASUREMENT),\
    \ SensorEntityDescription(key='totalconsum',\n    translation_key='total_consumption',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING))"
  - "(SensorEntityDescription(key='temperature', native_unit_of_measurement=\n   \
    \ UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n   \
    \ state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n  \
    \  'humidity', native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='pressure',\
    \ native_unit_of_measurement=\n    UnitOfPressure.PA, device_class=SensorDeviceClass.PRESSURE,\
    \ state_class\n    =SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'pressure_at_sealevel', translation_key='pressure_at_sealevel',\n    native_unit_of_measurement=UnitOfPressure.PA,\
    \ device_class=\n    SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='P1', native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\
    \ device_class=\n    SensorDeviceClass.PM10, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='P2', native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\
    \ device_class=\n    SensorDeviceClass.PM25, state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='temperature', native_unit_of_measurement=\n   \
    \ UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n   \
    \ state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n  \
    \  'orp', translation_key='oxydo_reduction_potential',\n    native_unit_of_measurement=UnitOfElectricPotential.MILLIVOLT,\
    \ icon=\n    'mdi:pool', state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='ph',\
    \ translation_key='ph', icon='mdi:pool',\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    'tds', translation_key='tds', native_unit_of_measurement=\n\
    \    CONCENTRATION_PARTS_PER_MILLION, icon='mdi:pool', state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key='battery',\n    native_unit_of_measurement=PERCENTAGE,\
    \ device_class=SensorDeviceClass.\n    BATTERY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='rssi', translation_key='rssi', icon=\n    'mdi:wifi',\
    \ native_unit_of_measurement=PERCENTAGE, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key='salt',\n    translation_key='salt', native_unit_of_measurement='mg/L',\
    \ icon=\n    'mdi:pool', state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='timeremaining', translation_key='end_time',\n \
    \   device_class=SensorDeviceClass.TIMESTAMP),)"
  - (SensorEntityDescription(key='uptime', name='Uptime', icon='mdi:clock'),)
  - "(SensorEntityDescription(key='usage', name='Usage Ratio',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:percent'),\n    SensorEntityDescription(key='usage_gb', name='Usage',\n\
    \    native_unit_of_measurement=UnitOfInformation.GIGABYTES, device_class=\n \
    \   SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='limit',\
    \ name='Data limit',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='used_download',\
    \ name='Used Download',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='used_upload',\
    \ name='Used Upload',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:upload'),\n    SensorEntityDescription(key='used_total',\
    \ name='Used Total',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='grace_download',\
    \ name='Grace Download',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='grace_upload',\
    \ name='Grace Upload',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:upload'),\n    SensorEntityDescription(key='grace_total',\
    \ name='Grace Total',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='total_download',\
    \ name='Total Download',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='total_upload',\
    \ name='Total Upload',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='used_remaining',\
    \ name='Remaining',\n    native_unit_of_measurement=UnitOfInformation.GIGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'))"
  - "(SensorEntityDescription(key='usage', name='Usage',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:percent'),\n    SensorEntityDescription(key='balance', name='Balance',\n\
    \    native_unit_of_measurement=PRICE, icon='mdi:cash'),\n    SensorEntityDescription(key='limit',\
    \ name='Data limit',\n    native_unit_of_measurement=UnitOfInformation.GIGABITS,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='days_left',\
    \ name='Days left',\n    native_unit_of_measurement=UnitOfTime.DAYS, icon='mdi:calendar-today'),\n\
    \    SensorEntityDescription(key='before_offpeak_download', name=\n    'Download\
    \ before offpeak', native_unit_of_measurement=UnitOfInformation\n    .GIGABITS,\
    \ device_class=SensorDeviceClass.DATA_SIZE, icon=\n    'mdi:download'), SensorEntityDescription(key='before_offpeak_upload',\n\
    \    name='Upload before offpeak', native_unit_of_measurement=\n    UnitOfInformation.GIGABITS,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    icon='mdi:upload'), SensorEntityDescription(key='before_offpeak_total',\n\
    \    name='Total before offpeak', native_unit_of_measurement=\n    UnitOfInformation.GIGABITS,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    icon='mdi:download'), SensorEntityDescription(key='offpeak_download',\n\
    \    name='Offpeak download', native_unit_of_measurement=UnitOfInformation.\n\
    \    GIGABITS, device_class=SensorDeviceClass.DATA_SIZE, icon='mdi:download'\n\
    \    ), SensorEntityDescription(key='offpeak_upload', name='Offpeak Upload',\n\
    \    native_unit_of_measurement=UnitOfInformation.GIGABITS, device_class=\n  \
    \  SensorDeviceClass.DATA_SIZE, icon='mdi:upload'),\n    SensorEntityDescription(key='offpeak_total',\
    \ name='Offpeak Total',\n    native_unit_of_measurement=UnitOfInformation.GIGABITS,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='download',\
    \ name='Download',\n    native_unit_of_measurement=UnitOfInformation.GIGABITS,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:download'),\n    SensorEntityDescription(key='upload',\
    \ name='Upload',\n    native_unit_of_measurement=UnitOfInformation.GIGABITS, device_class=\n\
    \    SensorDeviceClass.DATA_SIZE, icon='mdi:upload'),\n    SensorEntityDescription(key='total',\
    \ name='Total',\n    native_unit_of_measurement=UnitOfInformation.GIGABITS, device_class=\n\
    \    SensorDeviceClass.DATA_SIZE, icon='mdi:download'))"
  - "(SensorEntityDescription(key='voltage_phase_l1', translation_key=\n    'voltage_phase_l1',\
    \ native_unit_of_measurement=UnitOfElectricPotential.\n    VOLT, device_class=SensorDeviceClass.VOLTAGE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'voltage_phase_l2', translation_key='voltage_phase_l2',\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ device_class=\n    SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='voltage_phase_l3', translation_key=\n    'voltage_phase_l3',\
    \ native_unit_of_measurement=UnitOfElectricPotential.\n    VOLT, device_class=SensorDeviceClass.VOLTAGE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'current_phase_l1', translation_key='current_phase_l1',\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\
    \ device_class=\n    SensorDeviceClass.CURRENT, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='current_phase_l2', translation_key=\n    'current_phase_l2',\
    \ native_unit_of_measurement=UnitOfElectricCurrent.\n    AMPERE, device_class=SensorDeviceClass.CURRENT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'current_phase_l3', translation_key='current_phase_l3',\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\
    \ device_class=\n    SensorDeviceClass.CURRENT, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='power_consumed_phase_l1', translation_key=\n\
    \    'power_consumed_phase_l1', native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n   \
    \ MEASUREMENT), SensorEntityDescription(key='power_consumed_phase_l2',\n    translation_key='power_consumed_phase_l2',\
    \ native_unit_of_measurement=\n    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'power_consumed_phase_l3', translation_key='power_consumed_phase_l3',\n \
    \   native_unit_of_measurement=UnitOfPower.WATT, device_class=\n    SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key='power_produced_phase_l1',\
    \ translation_key=\n    'power_produced_phase_l1', native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n   \
    \ MEASUREMENT), SensorEntityDescription(key='power_produced_phase_l2',\n    translation_key='power_produced_phase_l2',\
    \ native_unit_of_measurement=\n    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    'power_produced_phase_l3', translation_key='power_produced_phase_l3',\n \
    \   native_unit_of_measurement=UnitOfPower.WATT, device_class=\n    SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key='volume_size_used', name='Used Space',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:chart-pie',\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, suggested_display_precision=1,\n\
    \    suggested_unit_of_measurement=UnitOfInformation.GIBIBYTES),\n    SensorEntityDescription(key='volume_size_free',\
    \ name='Free Space',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:chart-pie',\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, suggested_display_precision=1,\n\
    \    suggested_unit_of_measurement=UnitOfInformation.GIBIBYTES),\n    SensorEntityDescription(key='volume_percentage_used',\
    \ name=\n    'Volume Used', native_unit_of_measurement=PERCENTAGE, icon=\n   \
    \ 'mdi:chart-pie', state_class=SensorStateClass.MEASUREMENT,\n    suggested_display_precision=0))"
  - "(SensorEntityDescription(key='wattsIn', translation_key='watts_in',\n    device_class=SensorDeviceClass.POWER,\
    \ native_unit_of_measurement=\n    UnitOfPower.WATT, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key='ampsIn', translation_key='amps_in',\n    device_class=SensorDeviceClass.CURRENT,\
    \ native_unit_of_measurement=\n    UnitOfElectricCurrent.AMPERE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_registry_enabled_default=False), SensorEntityDescription(key=\n  \
    \  'wattsOut', translation_key='watts_out', device_class=SensorDeviceClass\n \
    \   .POWER, native_unit_of_measurement=UnitOfPower.WATT, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key='ampsOut',\n    translation_key='amps_out', device_class=SensorDeviceClass.CURRENT,\n\
    \    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE, state_class=\n \
    \   SensorStateClass.MEASUREMENT, entity_registry_enabled_default=False),\n  \
    \  SensorEntityDescription(key='whOut', translation_key='wh_out',\n    device_class=SensorDeviceClass.ENERGY,\
    \ native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    entity_registry_enabled_default=False), SensorEntityDescription(key=\n  \
    \  'whStored', translation_key='wh_stored', device_class=SensorDeviceClass\n \
    \   .ENERGY, native_unit_of_measurement=UnitOfEnergy.WATT_HOUR, state_class\n\
    \    =SensorStateClass.TOTAL), SensorEntityDescription(key='volts',\n    device_class=SensorDeviceClass.VOLTAGE,\
    \ native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT, entity_registry_enabled_default=False),\n\
    \    SensorEntityDescription(key='socPercent', translation_key='soc_percent',\n\
    \    device_class=SensorDeviceClass.BATTERY, native_unit_of_measurement=\n   \
    \ PERCENTAGE), SensorEntityDescription(key='timeToEmptyFull',\n    translation_key='time_to_empty_full',\
    \ device_class=SensorDeviceClass.\n    DURATION, native_unit_of_measurement=UnitOfTime.MINUTES),\n\
    \    SensorEntityDescription(key='temperature', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    SensorEntityDescription(key='wifiStrength', translation_key=\n    'wifi_strength',\
    \ device_class=SensorDeviceClass.SIGNAL_STRENGTH,\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS,\n\
    \    entity_registry_enabled_default=False, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC), SensorEntityDescription(key='timestamp', translation_key=\n\
    \    'timestamp', native_unit_of_measurement=UnitOfTime.SECONDS,\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC), SensorEntityDescription(key='ssid',\
    \ translation_key='ssid',\n    entity_registry_enabled_default=False, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC), SensorEntityDescription(key='ipAddr', translation_key=\n   \
    \ 'ip_addr', entity_registry_enabled_default=False, entity_category=\n    EntityCategory.DIAGNOSTIC))"
  - "(SensorEntityDescription(key='zigbee:InstantaneousDemand', translation_key=\n\
    \    'power_demand', native_unit_of_measurement=UnitOfPower.KILO_WATT,\n    device_class=SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), SensorEntityDescription(key=\n\
    \    'zigbee:CurrentSummationDelivered', translation_key=\n    'total_energy_delivered',\
    \ native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), SensorEntityDescription(key=\n\
    \    'zigbee:CurrentSummationReceived', translation_key=\n    'total_energy_received',\
    \ native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING))"
  - "(SensorEntityDescription(key=ATTR_API_CONDITION, name='Condition'),\n    SensorEntityDescription(key=ATTR_API_HUMIDITY,\
    \ name='Humidity',\n    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=ATTR_API_PRESSURE,\
    \ name='Pressure',\n    native_unit_of_measurement=UnitOfPressure.HPA, device_class=\n\
    \    SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=ATTR_API_RAIN, name='Rain',\n    native_unit_of_measurement=UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR,\n\
    \    device_class=SensorDeviceClass.PRECIPITATION_INTENSITY),\n    SensorEntityDescription(key=ATTR_API_RAIN_PROB,\
    \ name='Rain probability',\n    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n\
    \    MEASUREMENT), SensorEntityDescription(key=ATTR_API_SNOW, name='Snow',\n \
    \   native_unit_of_measurement=UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR,\n  \
    \  device_class=SensorDeviceClass.PRECIPITATION_INTENSITY),\n    SensorEntityDescription(key=ATTR_API_SNOW_PROB,\
    \ name='Snow probability',\n    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n\
    \    MEASUREMENT), SensorEntityDescription(key=ATTR_API_STATION_ID, name=\n  \
    \  'Station ID'), SensorEntityDescription(key=ATTR_API_STATION_NAME, name=\n \
    \   'Station name'), SensorEntityDescription(key=ATTR_API_STATION_TIMESTAMP,\n\
    \    name='Station timestamp', device_class=SensorDeviceClass.TIMESTAMP),\n  \
    \  SensorEntityDescription(key=ATTR_API_STORM_PROB, name=\n    'Storm probability',\
    \ native_unit_of_measurement=PERCENTAGE, state_class\n    =SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    ATTR_API_TEMPERATURE, name='Temperature',\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    ATTR_API_TEMPERATURE_FEELING, name='Temperature feeling',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key=ATTR_API_TOWN_ID, name='Town ID'),\n    SensorEntityDescription(key=ATTR_API_TOWN_NAME,\
    \ name='Town name'),\n    SensorEntityDescription(key=ATTR_API_TOWN_TIMESTAMP,\
    \ name=\n    'Town timestamp', device_class=SensorDeviceClass.TIMESTAMP),\n  \
    \  SensorEntityDescription(key=ATTR_API_WIND_BEARING, name='Wind bearing',\n \
    \   native_unit_of_measurement=DEGREE, state_class=SensorStateClass.\n    MEASUREMENT),\
    \ SensorEntityDescription(key=ATTR_API_WIND_MAX_SPEED, name\n    ='Wind max speed',\
    \ native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.WIND_SPEED,\n\
    \    state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    ATTR_API_WIND_SPEED, name='Wind speed', native_unit_of_measurement=\n   \
    \ UnitOfSpeed.KILOMETERS_PER_HOUR, device_class=SensorDeviceClass.\n    WIND_SPEED,\
    \ state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key=ATTR_API_FORECAST_CONDITION, name='Condition'),\n\
    \    SensorEntityDescription(key=ATTR_API_FORECAST_PRECIPITATION, name=\n    'Precipitation',\
    \ device_class=SensorDeviceClass.PRECIPITATION,\n    native_unit_of_measurement=UnitOfPrecipitationDepth.MILLIMETERS),\n\
    \    SensorEntityDescription(key=ATTR_API_FORECAST_PRECIPITATION_PROBABILITY,\n\
    \    name='Precipitation probability', native_unit_of_measurement=PERCENTAGE\n\
    \    ), SensorEntityDescription(key=ATTR_API_FORECAST_PRESSURE, name=\n    'Pressure',\
    \ native_unit_of_measurement=UnitOfPressure.HPA, device_class\n    =SensorDeviceClass.PRESSURE),\
    \ SensorEntityDescription(key=\n    ATTR_API_FORECAST_TEMP, name='Temperature',\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE),\n\
    \    SensorEntityDescription(key=ATTR_API_FORECAST_TEMP_LOW, name=\n    'Temperature\
    \ Low', native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    device_class=SensorDeviceClass.TEMPERATURE),\
    \ SensorEntityDescription(\n    key=ATTR_API_FORECAST_TIME, name='Time', device_class=SensorDeviceClass\n\
    \    .TIMESTAMP), SensorEntityDescription(key=ATTR_API_WIND_BEARING, name=\n \
    \   'Wind bearing', native_unit_of_measurement=DEGREE),\n    SensorEntityDescription(key=ATTR_API_WIND_SPEED,\
    \ name='Wind speed',\n    native_unit_of_measurement=UnitOfSpeed.METERS_PER_SECOND,\
    \ device_class=\n    SensorDeviceClass.WIND_SPEED), SensorEntityDescription(key=\n\
    \    ATTR_API_CLOUDS, name='Cloud coverage', native_unit_of_measurement=\n   \
    \ PERCENTAGE))"
  - "(SensorEntityDescription(key=ATTR_API_FORECAST_CONDITION, name='Condition'),\n\
    \    SensorEntityDescription(key=ATTR_API_FORECAST_PRECIPITATION, name=\n    'Precipitation',\
    \ native_unit_of_measurement=UnitOfVolumetricFlux.\n    MILLIMETERS_PER_HOUR,\
    \ device_class=SensorDeviceClass.\n    PRECIPITATION_INTENSITY), SensorEntityDescription(key=\n\
    \    ATTR_API_FORECAST_PRECIPITATION_PROBABILITY, name=\n    'Precipitation probability',\
    \ native_unit_of_measurement=PERCENTAGE),\n    SensorEntityDescription(key=ATTR_API_FORECAST_TEMP,\
    \ name='Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE), SensorEntityDescription(key=\n\
    \    ATTR_API_FORECAST_TEMP_LOW, name='Temperature Low',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE), SensorEntityDescription(key=\n\
    \    ATTR_API_FORECAST_TIME, name='Time', device_class=SensorDeviceClass.\n  \
    \  TIMESTAMP), SensorEntityDescription(key=ATTR_API_FORECAST_WIND_BEARING,\n \
    \   name='Wind bearing', native_unit_of_measurement=DEGREE),\n    SensorEntityDescription(key=ATTR_API_FORECAST_WIND_MAX_SPEED,\
    \ name=\n    'Wind max speed', native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR,\
    \ device_class=SensorDeviceClass.WIND_SPEED),\n    SensorEntityDescription(key=ATTR_API_FORECAST_WIND_SPEED,\
    \ name=\n    'Wind speed', native_unit_of_measurement=UnitOfSpeed.\n    KILOMETERS_PER_HOUR,\
    \ device_class=SensorDeviceClass.WIND_SPEED))"
  - "(SensorEntityDescription(key=ATTR_API_WEATHER, name='Weather'),\n    SensorEntityDescription(key=ATTR_API_DEW_POINT,\
    \ name='Dew Point',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key=ATTR_API_TEMPERATURE, name='Temperature',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n  \
    \  ), SensorEntityDescription(key=ATTR_API_FEELS_LIKE_TEMPERATURE, name=\n   \
    \ 'Feels like temperature', native_unit_of_measurement=UnitOfTemperature.\n  \
    \  CELSIUS, device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    ATTR_API_WIND_SPEED, name='Wind speed', native_unit_of_measurement=\n\
    \    UnitOfSpeed.METERS_PER_SECOND, device_class=SensorDeviceClass.\n    WIND_SPEED,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=ATTR_API_WIND_BEARING,\
    \ name='Wind bearing',\n    native_unit_of_measurement=DEGREE, state_class=SensorStateClass.\n\
    \    MEASUREMENT), SensorEntityDescription(key=ATTR_API_HUMIDITY, name=\n    'Humidity',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=ATTR_API_PRESSURE,\
    \ name='Pressure',\n    native_unit_of_measurement=UnitOfPressure.HPA, device_class=\n\
    \    SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=ATTR_API_CLOUDS, name='Cloud coverage',\n   \
    \ native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n    MEASUREMENT),\
    \ SensorEntityDescription(key=ATTR_API_RAIN, name='Rain',\n    native_unit_of_measurement=UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR,\n\
    \    device_class=SensorDeviceClass.PRECIPITATION_INTENSITY, state_class=\n  \
    \  SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n    ATTR_API_SNOW,\
    \ name='Snow', native_unit_of_measurement=\n    UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR,\
    \ device_class=\n    SensorDeviceClass.PRECIPITATION_INTENSITY, state_class=SensorStateClass\n\
    \    .MEASUREMENT), SensorEntityDescription(key=ATTR_API_PRECIPITATION_KIND,\n\
    \    name='Precipitation kind'), SensorEntityDescription(key=\n    ATTR_API_UV_INDEX,\
    \ name='UV Index', native_unit_of_measurement=UV_INDEX,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    ATTR_API_VISIBILITY_DISTANCE, name='Visibility',\n\
    \    native_unit_of_measurement=UnitOfLength.METERS, device_class=\n    SensorDeviceClass.DISTANCE,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=ATTR_API_CONDITION,\
    \ name='Condition'),\n    SensorEntityDescription(key=ATTR_API_WEATHER_CODE, name='Weather\
    \ Code'))"
  - "(SensorEntityDescription(key=ATTR_CURRENT_BANDWIDTH_USED, name=\n    'Current\
    \ Bandwidth Used', native_unit_of_measurement=UnitOfInformation.\n    GIGABYTES,\
    \ device_class=SensorDeviceClass.DATA_SIZE, icon=\n    'mdi:chart-histogram'),\
    \ SensorEntityDescription(key=\n    ATTR_PENDING_CHARGES, name='Pending Charges',\n\
    \    native_unit_of_measurement='US$', icon='mdi:currency-usd'))"
  - "(SensorEntityDescription(key=CONF_FIVE_MINUTE, name='ComEd 5 Minute Price',\n\
    \    native_unit_of_measurement='c'), SensorEntityDescription(key=\n    CONF_CURRENT_HOUR_AVERAGE,\
    \ name='ComEd Current Hour Average Price',\n    native_unit_of_measurement='c'))"
  - "(SensorEntityDescription(key=CONSUMPTION_YEAR, translation_key=\n    'year_consumption',\
    \ device_class=SensorDeviceClass.ENERGY,\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), SensorEntityDescription(key=\n\
    \    CONSUMPTION_TODAY, translation_key='day_consumption', device_class=\n   \
    \ SensorDeviceClass.ENERGY, native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR,\
    \ state_class=SensorStateClass.TOTAL_INCREASING))"
  - "(SensorEntityDescription(key=CURRENT_WARNING_SENSOR, translation_key=\n    CURRENT_WARNING_SENSOR,\
    \ icon='mdi:close-octagon-outline'),\n    SensorEntityDescription(key=ADVANCE_WARNING_SENSOR,\
    \ translation_key=\n    ADVANCE_WARNING_SENSOR, icon='mdi:close-octagon-outline'))"
  - "(SensorEntityDescription(key=SENSOR_COLLECTION_TYPE, name='Collection',\n   \
    \ icon=ICON_RECORD, native_unit_of_measurement=UNIT_RECORDS),\n    SensorEntityDescription(key=SENSOR_WANTLIST_TYPE,\
    \ name='Wantlist', icon\n    =ICON_RECORD, native_unit_of_measurement=UNIT_RECORDS),\n\
    \    SensorEntityDescription(key=SENSOR_RANDOM_RECORD_TYPE, name=\n    'Random\
    \ Record', icon=ICON_PLAYER))"
  - "(SensorEntityDescription(key=SENSOR_KIND_BATTERY, device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT),\n\
    \    SensorEntityDescription(key=SENSOR_KIND_TEMPERATURE, device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.FAHRENHEIT, state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key=SENSOR_KIND_LEVEL, name='Air pollution level',\n\
    \    icon='mdi:gauge', device_class=SensorDeviceClass.ENUM, options=['good',\n\
    \    'moderate', 'unhealthy', 'unhealthy_sensitive', 'very_unhealthy',\n    'hazardous'],\
    \ translation_key='pollutant_level'),\n    SensorEntityDescription(key=SENSOR_KIND_AQI,\
    \ name='Air quality index',\n    device_class=SensorDeviceClass.AQI, state_class=SensorStateClass.\n\
    \    MEASUREMENT), SensorEntityDescription(key=SENSOR_KIND_POLLUTANT, name=\n\
    \    'Main pollutant', icon='mdi:chemical-weapon', device_class=\n    SensorDeviceClass.ENUM,\
    \ options=['co', 'n2', 'o3', 'p1', 'p2', 's2'],\n    translation_key='pollutant_label'))"
  - "(SensorEntityDescription(key=SENSOR_PTZ_PRESET, name='PTZ Preset', icon=\n  \
    \  'mdi:camera-iris'), SensorEntityDescription(key=SENSOR_SDCARD, name=\n    'SD\
    \ Used', native_unit_of_measurement=PERCENTAGE, icon='mdi:sd'))"
  - "(SensorEntityDescription(key=SENSOR_TYPE_CURRENT_PICKUP, translation_key=\n \
    \   SENSOR_TYPE_CURRENT_PICKUP), SensorEntityDescription(key=\n    SENSOR_TYPE_NEXT_PICKUP,\
    \ translation_key=SENSOR_TYPE_NEXT_PICKUP))"
  - "(SensorEntityDescription(key=SENSOR_TYPE_CURRENT_STATUS, name='Status'),\n  \
    \  SensorEntityDescription(key=SENSOR_TYPE_DOWNLOAD_SPEED, name=\n    'Down Speed',\
    \ device_class=SensorDeviceClass.DATA_RATE,\n    native_unit_of_measurement=UnitOfDataRate.KILOBYTES_PER_SECOND),\n\
    \    SensorEntityDescription(key=SENSOR_TYPE_UPLOAD_SPEED, name='Up Speed',\n\
    \    device_class=SensorDeviceClass.DATA_RATE, native_unit_of_measurement=\n \
    \   UnitOfDataRate.KILOBYTES_PER_SECOND), SensorEntityDescription(key=\n    SENSOR_TYPE_ALL_TORRENTS,\
    \ name='All Torrents'), SensorEntityDescription\n    (key=SENSOR_TYPE_STOPPED_TORRENTS,\
    \ name='Stopped Torrents'),\n    SensorEntityDescription(key=SENSOR_TYPE_COMPLETE_TORRENTS,\
    \ name=\n    'Complete Torrents'), SensorEntityDescription(key=\n    SENSOR_TYPE_UPLOADING_TORRENTS,\
    \ name='Uploading Torrents'),\n    SensorEntityDescription(key=SENSOR_TYPE_DOWNLOADING_TORRENTS,\
    \ name=\n    'Downloading Torrents'), SensorEntityDescription(key=\n    SENSOR_TYPE_ACTIVE_TORRENTS,\
    \ name='Active Torrents'))"
  - "(SensorEntityDescription(key=SENSOR_TYPE_REALTIME_EMISSIONS_MOER,\n    translation_key='marginal_operating_emissions_rate',\
    \ icon='mdi:blur',\n    native_unit_of_measurement=f'{UnitOfMass.POUNDS} CO2/MWh',\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    SENSOR_TYPE_REALTIME_EMISSIONS_PERCENT, translation_key=\n    'relative_marginal_emissions_intensity',\
    \ icon='mdi:blur',\n    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n\
    \    MEASUREMENT))"
  - "(SensorEntityDescription(key=TEMPERATURE, device_class=SensorDeviceClass.\n \
    \   TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    HUMIDITY, device_class=SensorDeviceClass.HUMIDITY,\n\
    \    native_unit_of_measurement=PERCENTAGE, state_class=SensorStateClass.\n  \
    \  MEASUREMENT), SensorEntityDescription(key=BATTERY, device_class=\n    SensorDeviceClass.BATTERY,\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC), SensorEntityDescription(key=ECO2,\n\
    \    device_class=SensorDeviceClass.CO2, native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION,\
    \ translation_key='estimated_co2',\n    state_class=SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    TVOC, native_unit_of_measurement=CONCENTRATION_PARTS_PER_BILLION,\n\
    \    translation_key='tvoc', state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key=TYPE_24HOURRAININ, translation_key=\n    '24_hour_rain',\
    \ native_unit_of_measurement=UnitOfPrecipitationDepth.\n    INCHES, device_class=SensorDeviceClass.PRECIPITATION,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), SensorEntityDescription(key=\n\
    \    TYPE_AQI_PM25, translation_key='pm25_aqi', device_class=\n    SensorDeviceClass.AQI,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_AQI_PM25_24H,\
    \ translation_key=\n    'pm25_aqi_24h_average', device_class=SensorDeviceClass.AQI),\n\
    \    SensorEntityDescription(key=TYPE_AQI_PM25_IN, translation_key=\n    'pm25_indoor_aqi',\
    \ device_class=SensorDeviceClass.AQI, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    TYPE_AQI_PM25_IN_24H, translation_key='pm25_indoor_aqi_24h_average',\n\
    \    device_class=SensorDeviceClass.AQI), SensorEntityDescription(key=\n    TYPE_BAROMABSIN,\
    \ translation_key='absolute_pressure',\n    native_unit_of_measurement=UnitOfPressure.INHG,\
    \ device_class=\n    SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_BAROMRELIN, translation_key=\n    'relative_pressure',\
    \ native_unit_of_measurement=UnitOfPressure.INHG,\n    device_class=SensorDeviceClass.PRESSURE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), SensorEntityDescription(key=TYPE_CO2,\n\
    \    native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION,\n    device_class=SensorDeviceClass.CO2,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), SensorEntityDescription(key=TYPE_DAILYRAININ,\n\
    \    translation_key='daily_rain', native_unit_of_measurement=\n    UnitOfPrecipitationDepth.INCHES,\
    \ device_class=SensorDeviceClass.\n    PRECIPITATION, state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    SensorEntityDescription(key=TYPE_DEWPOINT, translation_key='dew_point',\n\
    \    native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT, device_class=\n\
    \    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key=TYPE_EVENTRAININ, translation_key=\n    'event_rain',\
    \ native_unit_of_measurement=UnitOfPrecipitationDepth.\n    INCHES, device_class=SensorDeviceClass.PRECIPITATION,\
    \ state_class=\n    SensorStateClass.TOTAL), SensorEntityDescription(key=TYPE_FEELSLIKE,\n\
    \    translation_key='feels_like', native_unit_of_measurement=\n    UnitOfTemperature.FAHRENHEIT,\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_HOURLYRAININ,\n    native_unit_of_measurement=UnitOfVolumetricFlux.INCHES_PER_HOUR,\n\
    \    state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.PRECIPITATION_INTENSITY),\
    \ SensorEntityDescription(key\n    =TYPE_HUMIDITY10, translation_key='humidity_10',\n\
    \    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_HUMIDITY1,\
    \ translation_key=\n    'humidity_1', native_unit_of_measurement=PERCENTAGE, device_class=\n\
    \    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_HUMIDITY2, translation_key=\n    'humidity_2',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_HUMIDITY3,\
    \ translation_key=\n    'humidity_3', native_unit_of_measurement=PERCENTAGE, device_class=\n\
    \    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_HUMIDITY4, translation_key=\n    'humidity_4',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_HUMIDITY5,\
    \ translation_key=\n    'humidity_5', native_unit_of_measurement=PERCENTAGE, device_class=\n\
    \    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_HUMIDITY6, translation_key=\n    'humidity_6',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_HUMIDITY7,\
    \ translation_key=\n    'humidity_7', native_unit_of_measurement=PERCENTAGE, device_class=\n\
    \    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_HUMIDITY8, translation_key=\n    'humidity_8',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_HUMIDITY9,\
    \ translation_key=\n    'humidity_9', native_unit_of_measurement=PERCENTAGE, device_class=\n\
    \    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_HUMIDITY, native_unit_of_measurement=\n\
    \    PERCENTAGE, device_class=SensorDeviceClass.HUMIDITY, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    TYPE_HUMIDITYIN, translation_key='humidity_indoor',\n\
    \    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_LASTRAIN,\
    \ translation_key='last_rain',\n    icon='mdi:water', device_class=SensorDeviceClass.TIMESTAMP),\n\
    \    SensorEntityDescription(key=TYPE_LIGHTNING_PER_DAY, translation_key=\n  \
    \  'lightning_strikes_per_day', icon='mdi:lightning-bolt',\n    native_unit_of_measurement='strikes',\
    \ state_class=SensorStateClass.\n    TOTAL), SensorEntityDescription(key=TYPE_LIGHTNING_PER_HOUR,\n\
    \    translation_key='lightning_strikes_per_hour', icon='mdi:lightning-bolt',\n\
    \    native_unit_of_measurement='strikes', state_class=SensorStateClass.\n   \
    \ TOTAL), SensorEntityDescription(key=TYPE_MAXDAILYGUST, translation_key=\n  \
    \  'max_gust', native_unit_of_measurement=UnitOfSpeed.MILES_PER_HOUR,\n    device_class=SensorDeviceClass.WIND_SPEED,\
    \ state_class=SensorStateClass\n    .MEASUREMENT), SensorEntityDescription(key=TYPE_MONTHLYRAININ,\n\
    \    translation_key='monthly_rain', native_unit_of_measurement=\n    UnitOfPrecipitationDepth.INCHES,\
    \ device_class=SensorDeviceClass.\n    PRECIPITATION, state_class=SensorStateClass.TOTAL),\n\
    \    SensorEntityDescription(key=TYPE_PM25_24H, translation_key=\n    'pm25_24h_average',\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, device_class=\n\
    \    SensorDeviceClass.PM25), SensorEntityDescription(key=TYPE_PM25_IN,\n    translation_key='pm25_indoor',\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, device_class=\n\
    \    SensorDeviceClass.PM25, state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_PM25_IN_24H,\
    \ translation_key=\n    'pm25_indoor_24h_average', native_unit_of_measurement=\n\
    \    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, device_class=\n    SensorDeviceClass.PM25),\
    \ SensorEntityDescription(key=TYPE_PM25,\n    native_unit_of_measurement=CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\n\
    \    device_class=SensorDeviceClass.PM25, state_class=SensorStateClass.\n    MEASUREMENT),\
    \ SensorEntityDescription(key=TYPE_SOILHUM10,\n    translation_key='soil_humidity_10',\
    \ native_unit_of_measurement=\n    PERCENTAGE, device_class=SensorDeviceClass.HUMIDITY,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    TYPE_SOILHUM1, translation_key='soil_humidity_1',\n    native_unit_of_measurement=PERCENTAGE,\
    \ device_class=SensorDeviceClass.\n    HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_SOILHUM2, translation_key=\n    'soil_humidity_2',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_SOILHUM3,\
    \ translation_key=\n    'soil_humidity_3', native_unit_of_measurement=PERCENTAGE,\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_SOILHUM4, translation_key=\n    'soil_humidity_4',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_SOILHUM5,\
    \ translation_key=\n    'soil_humidity_5', native_unit_of_measurement=PERCENTAGE,\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_SOILHUM6, translation_key=\n    'soil_humidity_6',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_SOILHUM7,\
    \ translation_key=\n    'soil_humidity_7', native_unit_of_measurement=PERCENTAGE,\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_SOILHUM8, translation_key=\n    'soil_humidity_8',\
    \ native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_SOILHUM9,\
    \ translation_key=\n    'soil_humidity_9', native_unit_of_measurement=PERCENTAGE,\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_SOILTEMP10F, translation_key=\n    'soil_temperature_10',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    TYPE_SOILTEMP1F, translation_key='soil_temperature_1',\n    native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key=TYPE_SOILTEMP2F, translation_key=\n    'soil_temperature_2',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    TYPE_SOILTEMP3F, translation_key='soil_temperature_3',\n    native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key=TYPE_SOILTEMP4F, translation_key=\n    'soil_temperature_4',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    TYPE_SOILTEMP5F, translation_key='soil_temperature_5',\n    native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key=TYPE_SOILTEMP6F, translation_key=\n    'soil_temperature_6',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    TYPE_SOILTEMP7F, translation_key='soil_temperature_7',\n    native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key=TYPE_SOILTEMP8F, translation_key=\n    'soil_temperature_8',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    TYPE_SOILTEMP9F, translation_key='soil_temperature_9',\n    native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), SensorEntityDescription(key=TYPE_SOLARRADIATION,\n    native_unit_of_measurement=UnitOfIrradiance.WATTS_PER_SQUARE_METER,\n\
    \    device_class=SensorDeviceClass.IRRADIANCE, state_class=SensorStateClass\n\
    \    .MEASUREMENT), SensorEntityDescription(key=TYPE_SOLARRADIATION_LX,\n    native_unit_of_measurement=LIGHT_LUX,\
    \ device_class=SensorDeviceClass.\n    ILLUMINANCE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_TEMP10F, translation_key=\n    'temperature_10',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=TYPE_TEMP1F,\n\
    \    translation_key='temperature_1', native_unit_of_measurement=\n    UnitOfTemperature.FAHRENHEIT,\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_TEMP2F, translation_key=\n    'temperature_2',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=TYPE_TEMP3F,\n\
    \    translation_key='temperature_3', native_unit_of_measurement=\n    UnitOfTemperature.FAHRENHEIT,\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_TEMP4F, translation_key=\n    'temperature_4',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=TYPE_TEMP5F,\n\
    \    translation_key='temperature_5', native_unit_of_measurement=\n    UnitOfTemperature.FAHRENHEIT,\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_TEMP6F, translation_key=\n    'temperature_6',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=TYPE_TEMP7F,\n\
    \    translation_key='temperature_7', native_unit_of_measurement=\n    UnitOfTemperature.FAHRENHEIT,\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_TEMP8F, translation_key=\n    'temperature_8',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SensorEntityDescription(key=TYPE_TEMP9F,\n\
    \    translation_key='temperature_9', native_unit_of_measurement=\n    UnitOfTemperature.FAHRENHEIT,\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_TEMPF, native_unit_of_measurement=\n   \
    \ UnitOfTemperature.FAHRENHEIT, device_class=SensorDeviceClass.\n    TEMPERATURE,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    SensorEntityDescription(key=TYPE_TEMPINF,\
    \ translation_key=\n    'inside_temperature', native_unit_of_measurement=UnitOfTemperature.\n\
    \    FAHRENHEIT, device_class=SensorDeviceClass.TEMPERATURE, state_class=\n  \
    \  SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n    TYPE_TOTALRAININ,\
    \ translation_key='lifetime_rain',\n    native_unit_of_measurement=UnitOfPrecipitationDepth.INCHES,\n\
    \    device_class=SensorDeviceClass.PRECIPITATION, state_class=\n    SensorStateClass.TOTAL_INCREASING),\
    \ SensorEntityDescription(key=TYPE_UV,\n    translation_key='uv_index', native_unit_of_measurement='Index',\n\
    \    state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    TYPE_WEEKLYRAININ, translation_key='weekly_rain',\n    native_unit_of_measurement=UnitOfPrecipitationDepth.INCHES,\n\
    \    device_class=SensorDeviceClass.PRECIPITATION, state_class=\n    SensorStateClass.TOTAL),\
    \ SensorEntityDescription(key=TYPE_WINDDIR,\n    translation_key='wind_direction',\
    \ icon='mdi:weather-windy',\n    native_unit_of_measurement=DEGREE), SensorEntityDescription(key=\n\
    \    TYPE_WINDDIR_AVG10M, translation_key='wind_direction_average_10m', icon\n\
    \    ='mdi:weather-windy', native_unit_of_measurement=DEGREE),\n    SensorEntityDescription(key=TYPE_WINDDIR_AVG2M,\
    \ translation_key=\n    'wind_direction_average_2m', icon='mdi:weather-windy',\n\
    \    native_unit_of_measurement=DEGREE), SensorEntityDescription(key=\n    TYPE_WINDGUSTDIR,\
    \ translation_key='wind_gust_direction', icon=\n    'mdi:weather-windy', native_unit_of_measurement=DEGREE),\n\
    \    SensorEntityDescription(key=TYPE_WINDGUSTMPH, translation_key=\n    'wind_gust',\
    \ native_unit_of_measurement=UnitOfSpeed.MILES_PER_HOUR,\n    device_class=SensorDeviceClass.WIND_SPEED,\
    \ state_class=SensorStateClass\n    .MEASUREMENT), SensorEntityDescription(key=TYPE_WINDSPDMPH_AVG10M,\n\
    \    translation_key='wind_average_10m', native_unit_of_measurement=\n    UnitOfSpeed.MILES_PER_HOUR,\
    \ device_class=SensorDeviceClass.WIND_SPEED),\n    SensorEntityDescription(key=TYPE_WINDSPDMPH_AVG2M,\
    \ translation_key=\n    'wind_average_2m', native_unit_of_measurement=UnitOfSpeed.\n\
    \    MILES_PER_HOUR, device_class=SensorDeviceClass.WIND_SPEED),\n    SensorEntityDescription(key=TYPE_WINDSPEEDMPH,\n\
    \    native_unit_of_measurement=UnitOfSpeed.MILES_PER_HOUR, device_class=\n  \
    \  SensorDeviceClass.WIND_SPEED, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SensorEntityDescription(key=TYPE_YEARLYRAININ, translation_key=\n    'yearly_rain',\
    \ native_unit_of_measurement=UnitOfPrecipitationDepth.\n    INCHES, device_class=SensorDeviceClass.PRECIPITATION,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING))"
  - "(SensorEntityDescription(key=TYPE_ALLERGY_FORECAST, name=\n    'Allergy index:\
    \ forecasted average', icon='mdi:flower'),\n    SensorEntityDescription(key=TYPE_ASTHMA_FORECAST,\
    \ name=\n    'Asthma index: forecasted average', icon='mdi:flower'),\n    SensorEntityDescription(key=TYPE_DISEASE_FORECAST,\
    \ name=\n    'Cold & flu: forecasted average', icon='mdi:snowflake'))"
  - "(SensorEntityDescription(key=TYPE_ALLERGY_TODAY, name=\n    'Allergy index: today',\
    \ icon='mdi:flower', state_class=SensorStateClass\n    .MEASUREMENT), SensorEntityDescription(key=TYPE_ALLERGY_TOMORROW,\
    \ name=\n    'Allergy index: tomorrow', icon='mdi:flower'), SensorEntityDescription(\n\
    \    key=TYPE_ASTHMA_TODAY, name='Asthma index: today', icon='mdi:flower',\n \
    \   state_class=SensorStateClass.MEASUREMENT), SensorEntityDescription(key=\n\
    \    TYPE_ASTHMA_TOMORROW, name='Asthma index: tomorrow', icon='mdi:flower'),\n\
    \    SensorEntityDescription(key=TYPE_DISEASE_TODAY, name=\n    'Cold & flu index:\
    \ today', icon='mdi:pill', state_class=\n    SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(key=TYPE_TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.FAHRENHEIT, device_class=SensorDeviceClass.\n    TEMPERATURE,\
    \ entity_category=EntityCategory.DIAGNOSTIC, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ SensorEntityDescription(key=\n    TYPE_WIFI_STRENGTH, translation_key='wifi_rssi',\n\
    \    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\n    device_class=SensorDeviceClass.SIGNAL_STRENGTH,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT))"
  - "(SensorEntityDescription(translation_key='duration', icon=ICONS.get(\n    travel_mode,\
    \ ICON_CAR), key=ATTR_DURATION, state_class=SensorStateClass\n    .MEASUREMENT,\
    \ native_unit_of_measurement=UnitOfTime.MINUTES),\n    SensorEntityDescription(translation_key='duration_in_traffic',\
    \ icon=\n    ICONS.get(travel_mode, ICON_CAR), key=ATTR_DURATION_IN_TRAFFIC,\n\
    \    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n \
    \   UnitOfTime.MINUTES), SensorEntityDescription(translation_key='distance',\n\
    \    icon=ICONS.get(travel_mode, ICON_CAR), key=ATTR_DISTANCE, state_class=\n\
    \    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.DISTANCE,\n\
    \    native_unit_of_measurement=UnitOfLength.KILOMETERS))"
  - (SensorEntityDescription, ...)
  - (SensorInfo, SensorState)
  - (SensorKind, str)
  - (SensorProSensorDeviceClass.BATTERY, Units.PERCENTAGE)
  - (SensorProSensorDeviceClass.HUMIDITY, Units.PERCENTAGE)
  - "(SensorProSensorDeviceClass.SIGNAL_STRENGTH, Units.\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT)"
  - (SensorProSensorDeviceClass.TEMPERATURE, Units.TEMP_CELSIUS)
  - (SensorProSensorDeviceClass.VOLTAGE, Units.ELECTRIC_POTENTIAL_VOLT)
  - "(SensorValueEntityDescription(key='usedMb', translation_key='data_used',\n  \
    \  state_class=SensorStateClass.TOTAL_INCREASING,\n    native_unit_of_measurement=UnitOfInformation.MEGABYTES,\
    \ device_class=\n    SensorDeviceClass.DATA_SIZE, icon='mdi:network'),\n    SensorValueEntityDescription(key='downloadedMb',\
    \ translation_key=\n    'downloaded', state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    native_unit_of_measurement=UnitOfInformation.MEGABYTES, device_class=\n \
    \   SensorDeviceClass.DATA_SIZE, icon='mdi:download-network'),\n    SensorValueEntityDescription(key='uploadedMb',\
    \ translation_key=\n    'uploaded', state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    native_unit_of_measurement=UnitOfInformation.MEGABYTES, device_class=\n \
    \   SensorDeviceClass.DATA_SIZE, icon='mdi:upload-network'),\n    SensorValueEntityDescription(key='national',\
    \ translation_key=\n    'national_calls', state_class=SensorStateClass.TOTAL_INCREASING,\
    \ icon=\n    'mdi:phone', value=lambda x: x.get('calls')),\n    SensorValueEntityDescription(key='mobile',\
    \ translation_key=\n    'mobile_calls', state_class=SensorStateClass.TOTAL_INCREASING,\
    \ icon=\n    'mdi:phone', value=lambda x: x.get('calls')),\n    SensorValueEntityDescription(key='international',\
    \ translation_key=\n    'international_calls', entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, icon='mdi:phone-plus',\n \
    \   value=lambda x: x.get('calls')), SensorValueEntityDescription(key='sms',\n\
    \    translation_key='sms_sent', state_class=SensorStateClass.\n    TOTAL_INCREASING,\
    \ icon='mdi:message-processing', value=lambda x: x.get(\n    'calls')), SensorValueEntityDescription(key='internet',\
    \ translation_key\n    ='data_used', state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    native_unit_of_measurement=UnitOfInformation.KILOBYTES, device_class=\n \
    \   SensorDeviceClass.DATA_SIZE, icon='mdi:network', value=lambda x: x.get(\n\
    \    'kbytes')), SensorValueEntityDescription(key='voicemail',\n    translation_key='voicemail_calls',\
    \ entity_registry_enabled_default=\n    False, state_class=SensorStateClass.TOTAL_INCREASING,\
    \ icon='mdi:phone',\n    value=lambda x: x.get('calls')), SensorValueEntityDescription(key=\n\
    \    'other', translation_key='other_calls', entity_registry_enabled_default\n\
    \    =False, state_class=SensorStateClass.TOTAL_INCREASING, icon='mdi:phone',\n\
    \    value=lambda x: x.get('calls')), SensorValueEntityDescription(key=\n    'daysTotal',\
    \ translation_key='billing_cycle_length',\n    native_unit_of_measurement=UnitOfTime.DAYS,\
    \ icon='mdi:calendar-range'),\n    SensorValueEntityDescription(key='daysRemaining',\
    \ translation_key=\n    'billing_cycle_remaining', native_unit_of_measurement=UnitOfTime.DAYS,\n\
    \    icon='mdi:calendar-clock'))"
  - (SensorValueEntityDescription, ...)
  - "(SkybellSensorEntityDescription(key='chime_level', translation_key=\n    'chime_level',\
    \ icon='mdi:bell-ring', value_fn=lambda device: device.\n    outdoor_chime_level),\
    \ SkybellSensorEntityDescription(key=\n    'last_button_event', translation_key='last_button_event',\
    \ icon=\n    'mdi:clock', device_class=SensorDeviceClass.TIMESTAMP, value_fn=lambda\n\
    \    device: device.latest('button').get(CONST.CREATED_AT)),\n    SkybellSensorEntityDescription(key='last_motion_event',\
    \ translation_key\n    ='last_motion_event', icon='mdi:clock', device_class=SensorDeviceClass.\n\
    \    TIMESTAMP, value_fn=lambda device: device.latest('motion').get(CONST.\n \
    \   CREATED_AT)), SkybellSensorEntityDescription(key=CONST.\n    ATTR_LAST_CHECK_IN,\
    \ translation_key='last_check_in', icon='mdi:clock',\n    entity_registry_enabled_default=False,\
    \ device_class=SensorDeviceClass.\n    TIMESTAMP, entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda\n    device: device.last_check_in), SkybellSensorEntityDescription(key=\n\
    \    'motion_threshold', translation_key='motion_threshold', icon='mdi:walk',\n\
    \    entity_registry_enabled_default=False, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, value_fn=lambda device: device.motion_threshold),\n    SkybellSensorEntityDescription(key='video_profile',\
    \ translation_key=\n    'video_profile', entity_registry_enabled_default=False,\
    \ entity_category\n    =EntityCategory.DIAGNOSTIC, value_fn=lambda device: device.\n\
    \    video_profile), SkybellSensorEntityDescription(key=CONST.ATTR_WIFI_SSID,\n\
    \    translation_key='wifi_ssid', icon='mdi:wifi-settings',\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, value_fn=lambda device: device.wifi_ssid),\n\
    \    SkybellSensorEntityDescription(key=CONST.ATTR_WIFI_STATUS,\n    translation_key='wifi_status',\
    \ icon='mdi:wifi-strength-3',\n    entity_registry_enabled_default=False, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, value_fn=lambda device: device.wifi_status))"
  - (SkybellSensorEntityDescription, ...)
  - "(SmappeePollingSensorEntityDescription(key='solar_power', name=\n    'Total production\
    \ - Active power', native_unit_of_measurement=\n    UnitOfPower.WATT, sensor_id='solar_power',\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n\
    \    local_polling=True), SmappeePollingSensorEntityDescription(key=\n    'solar_today',\
    \ name='Total production - Today',\n    native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\
    \ sensor_id=\n    'solar_today', device_class=SensorDeviceClass.ENERGY, state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING),\n    SmappeePollingSensorEntityDescription(key='solar_current_hour',\
    \ name=\n    'Total production - Current hour', native_unit_of_measurement=\n\
    \    UnitOfEnergy.WATT_HOUR, sensor_id='solar_current_hour', device_class=\n \
    \   SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING))"
  - "(SmappeePollingSensorEntityDescription(key='total_power', name=\n    'Total consumption\
    \ - Active power', native_unit_of_measurement=\n    UnitOfPower.WATT, sensor_id='total_power',\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT,\n\
    \    local_polling=True), SmappeePollingSensorEntityDescription(key=\n    'alwayson',\
    \ name='Always on - Active power', native_unit_of_measurement\n    =UnitOfPower.WATT,\
    \ sensor_id='alwayson', device_class=SensorDeviceClass\n    .POWER, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SmappeePollingSensorEntityDescription(key='power_today', name=\n    'Total\
    \ consumption - Today', native_unit_of_measurement=UnitOfEnergy.\n    WATT_HOUR,\
    \ sensor_id='power_today', device_class=SensorDeviceClass.\n    ENERGY, state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    SmappeePollingSensorEntityDescription(key='power_current_hour', name=\n \
    \   'Total consumption - Current hour', native_unit_of_measurement=\n    UnitOfEnergy.WATT_HOUR,\
    \ sensor_id='power_current_hour', device_class=\n    SensorDeviceClass.ENERGY,\
    \ state_class=SensorStateClass.TOTAL_INCREASING\n    ), SmappeePollingSensorEntityDescription(key='power_last_5_minutes',\n\
    \    name='Total consumption - Last 5 minutes', native_unit_of_measurement=\n\
    \    UnitOfEnergy.WATT_HOUR, sensor_id='power_last_5_minutes', device_class=\n\
    \    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING\n\
    \    ), SmappeePollingSensorEntityDescription(key='alwayson_today', name=\n  \
    \  'Always on - Today', native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n \
    \   sensor_id='alwayson_today', device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING))"
  - (SmappeePollingSensorEntityDescription, ...)
  - "(SmappeeSensorEntityDescription(key='total_reactive_power', name=\n    'Total\
    \ consumption - Reactive power', native_unit_of_measurement=\n    UnitOfPower.WATT,\
    \ sensor_id='total_reactive_power', device_class=\n    SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT),)"
  - (SmappeeSensorEntityDescription, ...)
  - "(SmappeeVoltageSensorEntityDescription(key='phase_voltages_a', name=\n    'Phase\
    \ voltages - A', native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT,\
    \ sensor_id='phase_voltage_a', device_class\n    =SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    phase_types={'ONE', 'TWO', 'THREE_STAR', 'THREE_DELTA'}),\n    SmappeeVoltageSensorEntityDescription(key='phase_voltages_b',\
    \ name=\n    'Phase voltages - B', native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT,\
    \ sensor_id='phase_voltage_b', device_class\n    =SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    phase_types={'TWO', 'THREE_STAR', 'THREE_DELTA'}),\n    SmappeeVoltageSensorEntityDescription(key='phase_voltages_c',\
    \ name=\n    'Phase voltages - C', native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT,\
    \ sensor_id='phase_voltage_c', device_class\n    =SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    phase_types={'THREE_STAR'}), SmappeeVoltageSensorEntityDescription(key=\n\
    \    'line_voltages_a', name='Line voltages - A', native_unit_of_measurement\n\
    \    =UnitOfElectricPotential.VOLT, sensor_id='line_voltage_a', device_class\n\
    \    =SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n \
    \   phase_types={'ONE', 'TWO', 'THREE_STAR', 'THREE_DELTA'}),\n    SmappeeVoltageSensorEntityDescription(key='line_voltages_b',\
    \ name=\n    'Line voltages - B', native_unit_of_measurement=UnitOfElectricPotential\n\
    \    .VOLT, sensor_id='line_voltage_b', device_class=SensorDeviceClass.\n    VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT, phase_types={'TWO',\n    'THREE_STAR',\
    \ 'THREE_DELTA'}), SmappeeVoltageSensorEntityDescription(\n    key='line_voltages_c',\
    \ name='Line voltages - C',\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ sensor_id=\n    'line_voltage_c', device_class=SensorDeviceClass.VOLTAGE, state_class=\n\
    \    SensorStateClass.MEASUREMENT, phase_types={'THREE_STAR', 'THREE_DELTA'}))"
  - (SmappeeVoltageSensorEntityDescription, ...)
  - (SolarEdgeDetailsSensor, details)
  - (SolarEdgeEnergyDetailsSensor, energy)
  - (SolarEdgeInventorySensor, inventory)
  - "(SolarEdgeLocalSensorEntityDescription(key='currentPowerexport', name=\n    'current\
    \ export Power', native_unit_of_measurement=UnitOfPower.WATT,\n    device_class=SensorDeviceClass.POWER,\
    \ icon='mdi:arrow-expand-up'),\n    SolarEdgeLocalSensorEntityDescription(key='totalEnergyexport',\
    \ name=\n    'total export Energy', native_unit_of_measurement=UnitOfEnergy.\n\
    \    WATT_HOUR, device_class=SensorDeviceClass.ENERGY, icon='mdi:counter'))"
  - "(SolarEdgeLocalSensorEntityDescription(key='currentPowerimport', name=\n    'current\
    \ import Power', native_unit_of_measurement=UnitOfPower.WATT,\n    device_class=SensorDeviceClass.POWER,\
    \ icon='mdi:arrow-collapse-down'),\n    SolarEdgeLocalSensorEntityDescription(key='totalEnergyimport',\
    \ name=\n    'total import Energy', native_unit_of_measurement=UnitOfEnergy.\n\
    \    WATT_HOUR, device_class=SensorDeviceClass.ENERGY, icon='mdi:counter'))"
  - "(SolarEdgeLocalSensorEntityDescription(key='gridvoltage', name=\n    'Grid Voltage',\
    \ native_unit_of_measurement=UnitOfElectricPotential.VOLT,\n    device_class=SensorDeviceClass.VOLTAGE,\
    \ icon='mdi:current-ac'),\n    SolarEdgeLocalSensorEntityDescription(key='dcvoltage',\
    \ name=\n    'DC Voltage', native_unit_of_measurement=UnitOfElectricPotential.VOLT,\n\
    \    device_class=SensorDeviceClass.VOLTAGE, icon='mdi:current-dc'),\n    SolarEdgeLocalSensorEntityDescription(key='gridfrequency',\
    \ name=\n    'Grid Frequency', native_unit_of_measurement=UnitOfFrequency.HERTZ,\n\
    \    device_class=SensorDeviceClass.FREQUENCY),\n    SolarEdgeLocalSensorEntityDescription(key='currentPower',\
    \ name=\n    'Current Power', native_unit_of_measurement=UnitOfPower.WATT,\n \
    \   device_class=SensorDeviceClass.POWER, icon='mdi:solar-power'),\n    SolarEdgeLocalSensorEntityDescription(key='energyThisMonth',\
    \ name=\n    'Energy This Month', native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n\
    \    device_class=SensorDeviceClass.ENERGY, icon='mdi:solar-power'),\n    SolarEdgeLocalSensorEntityDescription(key='energyThisYear',\
    \ name=\n    'Energy This Year', native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n\
    \    device_class=SensorDeviceClass.ENERGY, icon='mdi:solar-power'),\n    SolarEdgeLocalSensorEntityDescription(key='energyToday',\
    \ name=\n    'Energy Today', native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n\
    \    device_class=SensorDeviceClass.ENERGY, icon='mdi:solar-power'),\n    SolarEdgeLocalSensorEntityDescription(key='energyTotal',\
    \ name=\n    'Lifetime Energy', native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,\n\
    \    device_class=SensorDeviceClass.ENERGY, icon='mdi:solar-power'),\n    SolarEdgeLocalSensorEntityDescription(key='optimizers',\
    \ name=\n    'Optimizers Online', native_unit_of_measurement='optimizers', icon=\n\
    \    'mdi:solar-panel', extra_attribute='optimizers_connected'),\n    SolarEdgeLocalSensorEntityDescription(key='optimizercurrent',\
    \ name=\n    'Average Optimizer Current', native_unit_of_measurement=\n    UnitOfElectricCurrent.AMPERE,\
    \ device_class=SensorDeviceClass.CURRENT,\n    icon='mdi:solar-panel'), SolarEdgeLocalSensorEntityDescription(key=\n\
    \    'optimizerpower', name='Average Optimizer Power',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, icon='mdi:solar-panel'),\n    SolarEdgeLocalSensorEntityDescription(key='optimizertemperature',\
    \ name=\n    'Average Optimizer Temperature', native_unit_of_measurement=\n  \
    \  UnitOfTemperature.CELSIUS, icon='mdi:solar-panel', device_class=\n    SensorDeviceClass.TEMPERATURE),\
    \ SolarEdgeLocalSensorEntityDescription(\n    key='optimizervoltage', name='Average\
    \ Optimizer Voltage',\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ device_class=\n    SensorDeviceClass.VOLTAGE, icon='mdi:solar-panel'))"
  - (SolarEdgeLocalSensorEntityDescription, ...)
  - (SolarEdgeOverviewSensor, overview)
  - (SolarEdgePowerFlowSensor, flow)
  - (SolarEdgeStorageLevelSensor, flow)
  - "(SolarLogSensorEntityDescription(key='time', translation_key='last_update',\n\
    \    device_class=SensorDeviceClass.TIMESTAMP, value=as_local),\n    SolarLogSensorEntityDescription(key='power_ac',\
    \ translation_key=\n    'power_ac', icon='mdi:solar-power', native_unit_of_measurement=\n\
    \    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER, state_class=\n  \
    \  SensorStateClass.MEASUREMENT), SolarLogSensorEntityDescription(key=\n    'power_dc',\
    \ translation_key='power_dc', icon='mdi:solar-power',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SolarLogSensorEntityDescription(key='voltage_ac', translation_key=\n    'voltage_ac',\
    \ native_unit_of_measurement=UnitOfElectricPotential.VOLT,\n    device_class=SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), SolarLogSensorEntityDescription(key='voltage_dc',\n\
    \    translation_key='voltage_dc', native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT,\
    \ device_class=SensorDeviceClass.VOLTAGE,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    SolarLogSensorEntityDescription(key='yield_day', translation_key=\n    'yield_day',\
    \ icon='mdi:solar-power', native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY,\n    value=lambda value: round(value\
    \ / 1000, 3)),\n    SolarLogSensorEntityDescription(key='yield_yesterday', translation_key=\n\
    \    'yield_yesterday', icon='mdi:solar-power', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n   \
    \ value=lambda value: round(value / 1000, 3)),\n    SolarLogSensorEntityDescription(key='yield_month',\
    \ translation_key=\n    'yield_month', icon='mdi:solar-power', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n   \
    \ value=lambda value: round(value / 1000, 3)),\n    SolarLogSensorEntityDescription(key='yield_year',\
    \ translation_key=\n    'yield_year', icon='mdi:solar-power', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n   \
    \ value=lambda value: round(value / 1000, 3)),\n    SolarLogSensorEntityDescription(key='yield_total',\
    \ translation_key=\n    'yield_total', icon='mdi:solar-power', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n   \
    \ state_class=SensorStateClass.TOTAL, value=lambda value: round(value / \n   \
    \ 1000, 3)), SolarLogSensorEntityDescription(key='consumption_ac',\n    translation_key='consumption_ac',\
    \ native_unit_of_measurement=\n    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SolarLogSensorEntityDescription(key=\n\
    \    'consumption_day', translation_key='consumption_day',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, value=lambda value: round(value\
    \ / 1000, 3)),\n    SolarLogSensorEntityDescription(key='consumption_yesterday',\n\
    \    translation_key='consumption_yesterday', native_unit_of_measurement=\n  \
    \  UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n    value=lambda\
    \ value: round(value / 1000, 3)),\n    SolarLogSensorEntityDescription(key='consumption_month',\n\
    \    translation_key='consumption_month', native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY,\n    value=lambda value: round(value\
    \ / 1000, 3)),\n    SolarLogSensorEntityDescription(key='consumption_year', translation_key\n\
    \    ='consumption_year', native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY, value=lambda\n    value: round(value\
    \ / 1000, 3)), SolarLogSensorEntityDescription(key=\n    'consumption_total',\
    \ translation_key='consumption_total',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL,\
    \ value=lambda\n    value: round(value / 1000, 3)), SolarLogSensorEntityDescription(key=\n\
    \    'total_power', translation_key='total_power', icon='mdi:solar-power',\n \
    \   native_unit_of_measurement=UnitOfPower.WATT, device_class=\n    SensorDeviceClass.POWER),\
    \ SolarLogSensorEntityDescription(key=\n    'alternator_loss', translation_key='alternator_loss',\
    \ icon=\n    'mdi:solar-power', native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n   \
    \ MEASUREMENT), SolarLogSensorEntityDescription(key='capacity',\n    translation_key='capacity',\
    \ icon='mdi:solar-power',\n    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    POWER_FACTOR, state_class=SensorStateClass.MEASUREMENT, value=lambda\n  \
    \  value: round(value * 100, 1)), SolarLogSensorEntityDescription(key=\n    'efficiency',\
    \ translation_key='efficiency', native_unit_of_measurement=\n    PERCENTAGE, device_class=SensorDeviceClass.POWER_FACTOR,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, value=lambda value: round(value\
    \ * 100, 1)\n    ), SolarLogSensorEntityDescription(key='power_available',\n \
    \   translation_key='power_available', icon='mdi:solar-power',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT),\n\
    \    SolarLogSensorEntityDescription(key='usage', translation_key='usage',\n \
    \   native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n \
    \   POWER_FACTOR, state_class=SensorStateClass.MEASUREMENT, value=lambda\n   \
    \ value: round(value * 100, 1)))"
  - (SolarLogSensorEntityDescription, ...)
  - "(SourceAdapter('grid', 'flow_from', 'stat_energy_from', 'stat_cost', 'Cost',\n\
    \    'cost'), SourceAdapter('grid', 'flow_to', 'stat_energy_to',\n    'stat_compensation',\
    \ 'Compensation', 'compensation'), SourceAdapter(\n    'gas', None, 'stat_energy_from',\
    \ 'stat_cost', 'Cost', 'cost'),\n    SourceAdapter('water', None, 'stat_energy_from',\
    \ 'stat_cost', 'Cost',\n    'cost'))"
  - "(SpeedtestSensorEntityDescription(key='ping', translation_key='ping',\n    native_unit_of_measurement=UnitOfTime.MILLISECONDS,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.DURATION),\n\
    \    SpeedtestSensorEntityDescription(key='download', translation_key=\n    'download',\
    \ native_unit_of_measurement=UnitOfDataRate.\n    MEGABITS_PER_SECOND, state_class=SensorStateClass.MEASUREMENT,\n\
    \    device_class=SensorDeviceClass.DATA_RATE, value=lambda value: round(\n  \
    \  value / 10 ** 6, 2)), SpeedtestSensorEntityDescription(key='upload',\n    translation_key='upload',\
    \ native_unit_of_measurement=UnitOfDataRate.\n    MEGABITS_PER_SECOND, state_class=SensorStateClass.MEASUREMENT,\n\
    \    device_class=SensorDeviceClass.DATA_RATE, value=lambda value: round(\n  \
    \  value / 10 ** 6, 2)))"
  - (SpeedtestSensorEntityDescription, ...)
  - "(StarlinkSensorEntityDescription(key='ping', translation_key='ping', icon=\n\
    \    'mdi:speedometer', state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfTime.MILLISECONDS,\n\
    \    suggested_display_precision=0, value_fn=lambda data: data.status[\n    'pop_ping_latency_ms']),\
    \ StarlinkSensorEntityDescription(key='azimuth',\n    translation_key='azimuth',\
    \ icon='mdi:compass', state_class=\n    SensorStateClass.MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    native_unit_of_measurement=DEGREE, entity_registry_enabled_default=\n   \
    \ False, suggested_display_precision=0, value_fn=lambda data: data.status\n  \
    \  ['direction_azimuth']), StarlinkSensorEntityDescription(key='elevation',\n\
    \    translation_key='elevation', icon='mdi:compass', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=DEGREE,\
    \ entity_registry_enabled_default=\n    False, suggested_display_precision=0,\
    \ value_fn=lambda data: data.status\n    ['direction_elevation']), StarlinkSensorEntityDescription(key=\n\
    \    'uplink_throughput', translation_key='uplink_throughput', icon=\n    'mdi:upload',\
    \ state_class=SensorStateClass.MEASUREMENT, device_class=\n    SensorDeviceClass.DATA_RATE,\
    \ native_unit_of_measurement=UnitOfDataRate.\n    BITS_PER_SECOND, suggested_display_precision=0,\
    \ value_fn=lambda data:\n    data.status['uplink_throughput_bps']), StarlinkSensorEntityDescription(\n\
    \    key='downlink_throughput', translation_key='downlink_throughput', icon=\n\
    \    'mdi:download', state_class=SensorStateClass.MEASUREMENT, device_class=\n\
    \    SensorDeviceClass.DATA_RATE, native_unit_of_measurement=UnitOfDataRate.\n\
    \    BITS_PER_SECOND, suggested_display_precision=0, value_fn=lambda data:\n \
    \   data.status['downlink_throughput_bps']),\n    StarlinkSensorEntityDescription(key='last_boot_time',\
    \ translation_key=\n    'last_boot_time', icon='mdi:clock', device_class=SensorDeviceClass.\n\
    \    TIMESTAMP, entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda\n \
    \   data: now() - timedelta(seconds=data.status['uptime'])),\n    StarlinkSensorEntityDescription(key='ping_drop_rate',\
    \ translation_key=\n    'ping_drop_rate', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=PERCENTAGE, value_fn=lambda data: data.\n    status['pop_ping_drop_rate']\
    \ * 100))"
  - (StarlinkSensorEntityDescription, ...)
  - (StateType, UnitOfFrequency)
  - (StateType, dict[str, Any])
  - (StateType, str | None)
  - "(SteamistSensorEntityDescription(key=_KEY_MINUTES_REMAIN, name=\n    'Steam Minutes\
    \ Remain', native_unit_of_measurement=UnitOfTime.MINUTES,\n    value_fn=lambda\
    \ status: status.minutes_remain),\n    SteamistSensorEntityDescription(key=_KEY_TEMP,\
    \ name='Steam Temperature',\n    device_class=SensorDeviceClass.TEMPERATURE, state_class=\n\
    \    SensorStateClass.MEASUREMENT, value_fn=lambda status: status.temp))"
  - (SteamistSensorEntityDescription, ...)
  - "(SunSensorEntityDescription(key='next_dawn', device_class=SensorDeviceClass\n\
    \    .TIMESTAMP, translation_key='next_dawn', icon='mdi:sun-clock', value_fn\n\
    \    =lambda data: data.next_dawn, signal=SIGNAL_EVENTS_CHANGED),\n    SunSensorEntityDescription(key='next_dusk',\
    \ device_class=\n    SensorDeviceClass.TIMESTAMP, translation_key='next_dusk',\
    \ icon=\n    'mdi:sun-clock', value_fn=lambda data: data.next_dusk, signal=\n\
    \    SIGNAL_EVENTS_CHANGED), SunSensorEntityDescription(key='next_midnight',\n\
    \    device_class=SensorDeviceClass.TIMESTAMP, translation_key=\n    'next_midnight',\
    \ icon='mdi:sun-clock', value_fn=lambda data: data.\n    next_midnight, signal=SIGNAL_EVENTS_CHANGED),\n\
    \    SunSensorEntityDescription(key='next_noon', device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ translation_key='next_noon', icon=\n    'mdi:sun-clock', value_fn=lambda data:\
    \ data.next_noon, signal=\n    SIGNAL_EVENTS_CHANGED), SunSensorEntityDescription(key='next_rising',\n\
    \    device_class=SensorDeviceClass.TIMESTAMP, translation_key='next_rising',\n\
    \    icon='mdi:sun-clock', value_fn=lambda data: data.next_rising, signal=\n \
    \   SIGNAL_EVENTS_CHANGED), SunSensorEntityDescription(key='next_setting',\n \
    \   device_class=SensorDeviceClass.TIMESTAMP, translation_key=\n    'next_setting',\
    \ icon='mdi:sun-clock', value_fn=lambda data: data.\n    next_setting, signal=SIGNAL_EVENTS_CHANGED),\
    \ SunSensorEntityDescription\n    (key='solar_elevation', translation_key='solar_elevation',\
    \ icon=\n    'mdi:theme-light-dark', state_class=SensorStateClass.MEASUREMENT,\n\
    \    value_fn=lambda data: data.solar_elevation,\n    entity_registry_enabled_default=False,\
    \ native_unit_of_measurement=\n    DEGREE, signal=SIGNAL_POSITION_CHANGED), SunSensorEntityDescription(key\n\
    \    ='solar_azimuth', translation_key='solar_azimuth', icon='mdi:sun-angle',\n\
    \    state_class=SensorStateClass.MEASUREMENT, value_fn=lambda data: data.\n \
    \   solar_azimuth, entity_registry_enabled_default=False,\n    native_unit_of_measurement=DEGREE,\
    \ signal=SIGNAL_POSITION_CHANGED),\n    SunSensorEntityDescription(key='solar_rising',\
    \ translation_key=\n    'solar_rising', icon='mdi:sun-clock', value_fn=lambda\
    \ data: data.rising,\n    entity_registry_enabled_default=False, signal=SIGNAL_EVENTS_CHANGED))"
  - (SunSensorEntityDescription, ...)
  - "(SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n  \
    \  key='cpu_other_load', translation_key='cpu_other_load',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:chip',\n    entity_registry_enabled_default=False, state_class=SensorStateClass.\n\
    \    MEASUREMENT), SynologyDSMSensorEntityDescription(api_key=\n    SynoCoreUtilization.API_KEY,\
    \ key='cpu_user_load', translation_key=\n    'cpu_user_load', native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:chip',\n    state_class=SensorStateClass.MEASUREMENT),\n    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='cpu_system_load', translation_key='cpu_system_load',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:chip',\n    entity_registry_enabled_default=False, state_class=SensorStateClass.\n\
    \    MEASUREMENT), SynologyDSMSensorEntityDescription(api_key=\n    SynoCoreUtilization.API_KEY,\
    \ key='cpu_total_load', translation_key=\n    'cpu_total_load', native_unit_of_measurement=PERCENTAGE,\
    \ icon=\n    'mdi:chip', state_class=SensorStateClass.MEASUREMENT),\n    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='cpu_1min_load', translation_key='cpu_1min_load',\n    native_unit_of_measurement=ENTITY_UNIT_LOAD,\
    \ icon='mdi:chip',\n    entity_registry_enabled_default=False),\n    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='cpu_5min_load', translation_key='cpu_5min_load',\n    native_unit_of_measurement=ENTITY_UNIT_LOAD,\
    \ icon='mdi:chip'),\n    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='cpu_15min_load', translation_key='cpu_15min_load',\n    native_unit_of_measurement=ENTITY_UNIT_LOAD,\
    \ icon='mdi:chip'),\n    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='memory_real_usage', translation_key='memory_real_usage',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:memory', state_class=\n    SensorStateClass.MEASUREMENT), SynologyDSMSensorEntityDescription(\n\
    \    api_key=SynoCoreUtilization.API_KEY, key='memory_size', translation_key\n\
    \    ='memory_size', native_unit_of_measurement=UnitOfInformation.BYTES,\n   \
    \ suggested_unit_of_measurement=UnitOfInformation.MEGABYTES,\n    suggested_display_precision=1,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    icon='mdi:memory', entity_registry_enabled_default=False,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), SynologyDSMSensorEntityDescription(\n\
    \    api_key=SynoCoreUtilization.API_KEY, key='memory_cached',\n    translation_key='memory_cached',\
    \ native_unit_of_measurement=\n    UnitOfInformation.BYTES, suggested_unit_of_measurement=\n\
    \    UnitOfInformation.MEGABYTES, suggested_display_precision=1,\n    device_class=SensorDeviceClass.DATA_SIZE,\
    \ icon='mdi:memory',\n    entity_registry_enabled_default=False, state_class=SensorStateClass.\n\
    \    MEASUREMENT), SynologyDSMSensorEntityDescription(api_key=\n    SynoCoreUtilization.API_KEY,\
    \ key='memory_available_swap',\n    translation_key='memory_available_swap', native_unit_of_measurement=\n\
    \    UnitOfInformation.BYTES, suggested_unit_of_measurement=\n    UnitOfInformation.MEGABYTES,\
    \ suggested_display_precision=1,\n    device_class=SensorDeviceClass.DATA_SIZE,\
    \ icon='mdi:memory',\n    state_class=SensorStateClass.MEASUREMENT),\n    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='memory_available_real', translation_key='memory_available_real',\n \
    \   native_unit_of_measurement=UnitOfInformation.BYTES,\n    suggested_unit_of_measurement=UnitOfInformation.MEGABYTES,\n\
    \    suggested_display_precision=1, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    icon='mdi:memory', state_class=SensorStateClass.MEASUREMENT),\n    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='memory_total_swap', translation_key='memory_total_swap',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\n\
    \    suggested_unit_of_measurement=UnitOfInformation.MEGABYTES,\n    suggested_display_precision=1,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    icon='mdi:memory', state_class=SensorStateClass.MEASUREMENT),\n\
    \    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='memory_total_real', translation_key='memory_total_real',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\n\
    \    suggested_unit_of_measurement=UnitOfInformation.MEGABYTES,\n    suggested_display_precision=1,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    icon='mdi:memory', state_class=SensorStateClass.MEASUREMENT),\n\
    \    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='network_up', translation_key='network_up',\n    native_unit_of_measurement=UnitOfDataRate.BYTES_PER_SECOND,\n\
    \    suggested_unit_of_measurement=UnitOfDataRate.KILOBYTES_PER_SECOND,\n    suggested_display_precision=1,\
    \ device_class=SensorDeviceClass.DATA_RATE,\n    icon='mdi:upload', state_class=SensorStateClass.MEASUREMENT),\n\
    \    SynologyDSMSensorEntityDescription(api_key=SynoCoreUtilization.API_KEY,\n\
    \    key='network_down', translation_key='network_down',\n    native_unit_of_measurement=UnitOfDataRate.BYTES_PER_SECOND,\n\
    \    suggested_unit_of_measurement=UnitOfDataRate.KILOBYTES_PER_SECOND,\n    suggested_display_precision=1,\
    \ device_class=SensorDeviceClass.DATA_RATE,\n    icon='mdi:download', state_class=SensorStateClass.MEASUREMENT))"
  - "(SynologyDSMSensorEntityDescription(api_key=SynoDSMInformation.API_KEY, key\n\
    \    ='temperature', translation_key='temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC),\n    SynologyDSMSensorEntityDescription(api_key=SynoDSMInformation.API_KEY,\n\
    \    key='uptime', translation_key='uptime', device_class=SensorDeviceClass.\n\
    \    TIMESTAMP, entity_registry_enabled_default=False, entity_category=\n    EntityCategory.DIAGNOSTIC))"
  - "(SynologyDSMSensorEntityDescription(api_key=SynoStorage.API_KEY, key=\n    'disk_smart_status',\
    \ translation_key='disk_smart_status', icon=\n    'mdi:checkbox-marked-circle-outline',\
    \ entity_registry_enabled_default=\n    False, entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    SynologyDSMSensorEntityDescription(api_key=SynoStorage.API_KEY, key=\n  \
    \  'disk_status', translation_key='disk_status', icon=\n    'mdi:checkbox-marked-circle-outline',\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC), SynologyDSMSensorEntityDescription(api_key=SynoStorage.\n\
    \    API_KEY, key='disk_temp', translation_key='disk_temp',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC))"
  - "(SynologyDSMSensorEntityDescription(api_key=SynoStorage.API_KEY, key=\n    'volume_status',\
    \ translation_key='volume_status', icon=\n    'mdi:checkbox-marked-circle-outline'),\n\
    \    SynologyDSMSensorEntityDescription(api_key=SynoStorage.API_KEY, key=\n  \
    \  'volume_size_total', translation_key='volume_size_total',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\n\
    \    suggested_unit_of_measurement=UnitOfInformation.TERABYTES,\n    suggested_display_precision=2,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    icon='mdi:chart-pie', entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.MEASUREMENT),\n    SynologyDSMSensorEntityDescription(api_key=SynoStorage.API_KEY,\
    \ key=\n    'volume_size_used', translation_key='volume_size_used',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\n\
    \    suggested_unit_of_measurement=UnitOfInformation.TERABYTES,\n    suggested_display_precision=2,\
    \ device_class=SensorDeviceClass.DATA_SIZE,\n    icon='mdi:chart-pie', state_class=SensorStateClass.MEASUREMENT),\n\
    \    SynologyDSMSensorEntityDescription(api_key=SynoStorage.API_KEY, key=\n  \
    \  'volume_percentage_used', translation_key='volume_percentage_used',\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:chart-pie'),\n    SynologyDSMSensorEntityDescription(api_key=SynoStorage.API_KEY,\
    \ key=\n    'volume_disk_temp_avg', translation_key='volume_disk_temp_avg',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, entity_category=EntityCategory.\n    DIAGNOSTIC),\
    \ SynologyDSMSensorEntityDescription(api_key=SynoStorage.\n    API_KEY, key='volume_disk_temp_max',\
    \ translation_key=\n    'volume_disk_temp_max', native_unit_of_measurement=UnitOfTemperature.\n\
    \    CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n    entity_registry_enabled_default=False,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC))"
  - (SynologyDSMSensorEntityDescription, ...)
  - "(SystemBridgeSensorEntityDescription(key='battery', device_class=\n    SensorDeviceClass.BATTERY,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=PERCENTAGE,\
    \ value=lambda data: data.battery.\n    percentage), SystemBridgeSensorEntityDescription(key=\n\
    \    'battery_time_remaining', translation_key='battery_time_remaining',\n   \
    \ device_class=SensorDeviceClass.TIMESTAMP, value=battery_time_remaining))"
  - "(SystemBridgeSensorEntityDescription(key='boot_time', translation_key=\n    'boot_time',\
    \ device_class=SensorDeviceClass.TIMESTAMP, icon=\n    'mdi:av-timer', value=lambda\
    \ data: datetime.fromtimestamp(data.system.\n    boot_time, tz=UTC)), SystemBridgeSensorEntityDescription(key=\n\
    \    'cpu_power_package', translation_key='cpu_power_package',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, suggested_display_precision=2,\
    \ icon=\n    'mdi:chip', value=cpu_power_package),\n    SystemBridgeSensorEntityDescription(key='cpu_speed',\
    \ translation_key=\n    'cpu_speed', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=UnitOfFrequency.GIGAHERTZ, device_class=\n   \
    \ SensorDeviceClass.FREQUENCY, icon='mdi:speedometer', value=cpu_speed),\n   \
    \ SystemBridgeSensorEntityDescription(key='cpu_temperature',\n    translation_key='cpu_temperature',\
    \ entity_registry_enabled_default=\n    False, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value=lambda data: data.cpu.temperature),\n  \
    \  SystemBridgeSensorEntityDescription(key='cpu_voltage', translation_key=\n \
    \   'cpu_voltage', entity_registry_enabled_default=False, device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ value=lambda\n    data: data.cpu.voltage), SystemBridgeSensorEntityDescription(key=\n\
    \    'kernel', translation_key='kernel', icon='mdi:devices', value=lambda\n  \
    \  data: data.system.platform), SystemBridgeSensorEntityDescription(key=\n   \
    \ 'memory_free', translation_key='memory_free', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfInformation.GIGABYTES, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    icon='mdi:memory', value=memory_free),\n    SystemBridgeSensorEntityDescription(key='memory_used_percentage',\n\
    \    translation_key='memory_used', state_class=SensorStateClass.MEASUREMENT,\n\
    \    native_unit_of_measurement=PERCENTAGE, icon='mdi:memory', value=lambda\n\
    \    data: data.memory.virtual_percent), SystemBridgeSensorEntityDescription\n\
    \    (key='memory_used', translation_key='amount_memory_used',\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, native_unit_of_measurement=UnitOfInformation.GIGABYTES,\n\
    \    device_class=SensorDeviceClass.DATA_SIZE, icon='mdi:memory', value=\n   \
    \ memory_used), SystemBridgeSensorEntityDescription(key='os',\n    translation_key='os',\
    \ icon='mdi:devices', value=lambda data:\n    f'{data.system.platform} {data.system.platform_version}'),\n\
    \    SystemBridgeSensorEntityDescription(key='processes_count',\n    translation_key='processes',\
    \ state_class=SensorStateClass.MEASUREMENT,\n    icon='mdi:counter', value=lambda\
    \ data: int(data.processes.count)),\n    SystemBridgeSensorEntityDescription(key='processes_load',\n\
    \    translation_key='load', state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=PERCENTAGE,\
    \ icon='mdi:percent', value=lambda\n    data: data.cpu.usage), SystemBridgeSensorEntityDescription(key=\n\
    \    'version', translation_key='version', icon='mdi:counter', value=lambda\n\
    \    data: data.system.version), SystemBridgeSensorEntityDescription(key=\n  \
    \  'version_latest', translation_key='version_latest', icon='mdi:counter',\n \
    \   value=lambda data: data.system.version_latest))"
  - (SystemBridgeSensorEntityDescription, ...)
  - (TIBBER_DOMAIN, home.home_id)
  - (TIBBER_DOMAIN, old_id)
  - (TIBBER_DOMAIN, self._tibber_home.home_id)
  - (TO_GRID_ID, TO_GRID_NAME)
  - "(TPLinkSensorEntityDescription(key=ATTR_CURRENT_POWER_W, translation_key=\n \
    \   'current_consumption', native_unit_of_measurement=UnitOfPower.WATT,\n    device_class=SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, emeter_attr='power', precision=1),\n\
    \    TPLinkSensorEntityDescription(key=ATTR_TOTAL_ENERGY_KWH,\n    translation_key='total_consumption',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, emeter_attr='total',\n   \
    \ precision=3), TPLinkSensorEntityDescription(key=ATTR_TODAY_ENERGY_KWH,\n   \
    \ translation_key='today_consumption', native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING,\
    \ precision=3),\n    TPLinkSensorEntityDescription(key=ATTR_VOLTAGE,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ device_class=\n    SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    emeter_attr='voltage', precision=1), TPLinkSensorEntityDescription(key=\n\
    \    ATTR_CURRENT_A, native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\n\
    \    device_class=SensorDeviceClass.CURRENT, state_class=SensorStateClass.\n \
    \   MEASUREMENT, emeter_attr='current', precision=2))"
  - (TPLinkSensorEntityDescription, ...)
  - "(TVCameraSensorEntityDescription(key='direction', translation_key=\n    'direction',\
    \ native_unit_of_measurement=DEGREE, icon=\n    'mdi:sign-direction', value_fn=lambda\
    \ data: data.data.direction),\n    TVCameraSensorEntityDescription(key='modified',\
    \ translation_key=\n    'modified', icon='mdi:camera-retake-outline', device_class=\n\
    \    SensorDeviceClass.TIMESTAMP, value_fn=lambda data: data.data.modified,\n\
    \    entity_registry_enabled_default=False), TVCameraSensorEntityDescription\n\
    \    (key='photo_time', translation_key='photo_time', icon=\n    'mdi:camera-timer',\
    \ device_class=SensorDeviceClass.TIMESTAMP, value_fn=\n    lambda data: data.data.phototime),\
    \ TVCameraSensorEntityDescription(key=\n    'photo_url', translation_key='photo_url',\
    \ icon='mdi:camera-outline',\n    value_fn=lambda data: data.data.photourl,\n\
    \    entity_registry_enabled_default=False), TVCameraSensorEntityDescription\n\
    \    (key='status', translation_key='status', icon='mdi:camera-outline',\n   \
    \ value_fn=lambda data: data.data.status, entity_registry_enabled_default\n  \
    \  =False), TVCameraSensorEntityDescription(key='camera_type',\n    translation_key='camera_type',\
    \ icon='mdi:camera-iris', value_fn=lambda\n    data: data.data.camera_type, entity_registry_enabled_default=False))"
  - (TVCameraSensorEntityDescription, ...)
  - (TYPE_ALLERGY_TODAY, TYPE_ALLERGY_TOMORROW)
  - (TYPE_ASTHMA_TODAY, TYPE_ASTHMA_TOMORROW)
  - "(TailscaleSensorEntityDescription(key='expires', translation_key='expires',\n\
    \    device_class=SensorDeviceClass.TIMESTAMP, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ value_fn=lambda device: device.expires),\n    TailscaleSensorEntityDescription(key='ip',\
    \ translation_key='ip', icon=\n    'mdi:ip-network', entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=\n    lambda device: device.addresses[0] if device.addresses else None),\n\
    \    TailscaleSensorEntityDescription(key='last_seen', translation_key=\n    'last_seen',\
    \ device_class=SensorDeviceClass.TIMESTAMP, value_fn=lambda\n    device: device.last_seen))"
  - (TailscaleSensorEntityDescription, ...)
  - "(TautulliSensorEntityDescription(icon='mdi:plex', key='watching_count',\n   \
    \ translation_key='watching_count', native_unit_of_measurement='Watching',\n \
    \   value_fn=lambda home_stats, activity, _: cast(int, activity.\n    stream_count)),\
    \ TautulliSensorEntityDescription(icon='mdi:plex', key=\n    'stream_count_direct_play',\
    \ translation_key='stream_count_direct_play',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ native_unit_of_measurement=\n    'Streams', entity_registry_enabled_default=False,\
    \ value_fn=lambda\n    home_stats, activity, _: cast(int, activity.stream_count_direct_play)),\n\
    \    TautulliSensorEntityDescription(icon='mdi:plex', key=\n    'stream_count_direct_stream',\
    \ translation_key=\n    'stream_count_direct_stream', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    native_unit_of_measurement='Streams', entity_registry_enabled_default=\n\
    \    False, value_fn=lambda home_stats, activity, _: cast(int, activity.\n   \
    \ stream_count_direct_stream)), TautulliSensorEntityDescription(icon=\n    'mdi:plex',\
    \ key='stream_count_transcode', translation_key=\n    'stream_count_transcode',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement='Streams',\
    \ entity_registry_enabled_default=\n    False, value_fn=lambda home_stats, activity,\
    \ _: cast(int, activity.\n    stream_count_transcode)), TautulliSensorEntityDescription(key=\n\
    \    'total_bandwidth', translation_key='total_bandwidth', entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, native_unit_of_measurement=UnitOfInformation\n\
    \    .KILOBITS, device_class=SensorDeviceClass.DATA_SIZE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda home_stats, activity, _:\n    cast(int, activity.total_bandwidth)),\
    \ TautulliSensorEntityDescription(\n    key='lan_bandwidth', translation_key='lan_bandwidth',\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, native_unit_of_measurement=UnitOfInformation\n\
    \    .KILOBITS, device_class=SensorDeviceClass.DATA_SIZE,\n    entity_registry_enabled_default=False,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, value_fn=lambda home_stats,\
    \ activity, _: cast(int,\n    activity.lan_bandwidth)), TautulliSensorEntityDescription(key=\n\
    \    'wan_bandwidth', translation_key='wan_bandwidth', entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ native_unit_of_measurement=UnitOfInformation\n    .KILOBITS, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, value_fn=lambda home_stats, activity, _: cast(int,\n    activity.wan_bandwidth)),\
    \ TautulliSensorEntityDescription(icon=\n    'mdi:movie-open', key='top_movies',\
    \ translation_key='top_movies',\n    entity_registry_enabled_default=False, value_fn=get_top_stats),\n\
    \    TautulliSensorEntityDescription(icon='mdi:television', key='top_tv',\n  \
    \  translation_key='top_tv', entity_registry_enabled_default=False,\n    value_fn=get_top_stats),\
    \ TautulliSensorEntityDescription(icon=\n    'mdi:walk', key=ATTR_TOP_USER, translation_key='top_user',\n\
    \    entity_registry_enabled_default=False, value_fn=get_top_stats))"
  - (TautulliSensorEntityDescription, ...)
  - "(TautulliSessionSensorEntityDescription(icon='mdi:plex', key='state',\n    translation_key='state',\
    \ value_fn=lambda session: cast(str, session.\n    state)), TautulliSessionSensorEntityDescription(key='full_title',\n\
    \    translation_key='full_title', entity_registry_enabled_default=False,\n  \
    \  value_fn=lambda session: cast(str, session.full_title)),\n    TautulliSessionSensorEntityDescription(icon='mdi:progress-clock',\
    \ key=\n    'progress', translation_key='progress', native_unit_of_measurement=\n\
    \    PERCENTAGE, entity_registry_enabled_default=False, value_fn=lambda\n    session:\
    \ cast(str, session.progress_percent)),\n    TautulliSessionSensorEntityDescription(key='stream_resolution',\n\
    \    translation_key='stream_resolution', entity_category=EntityCategory.\n  \
    \  DIAGNOSTIC, entity_registry_enabled_default=False, value_fn=lambda\n    session:\
    \ cast(str, session.stream_video_resolution)),\n    TautulliSessionSensorEntityDescription(icon='mdi:plex',\
    \ key=\n    'transcode_decision', translation_key='transcode_decision',\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda session: cast(\n \
    \   str, session.transcode_decision)),\n    TautulliSessionSensorEntityDescription(key='session_thumb',\n\
    \    translation_key='session_thumb', entity_category=EntityCategory.\n    DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, value_fn=lambda\n    session: cast(str,\
    \ session.user_thumb)),\n    TautulliSessionSensorEntityDescription(key='video_resolution',\n\
    \    translation_key='video_resolution', entity_category=EntityCategory.\n   \
    \ DIAGNOSTIC, entity_registry_enabled_default=False, value_fn=lambda\n    session:\
    \ cast(str, session.video_resolution)))"
  - (TautulliSessionSensorEntityDescription, ...)
  - (TextSensorInfo, TextSensorState)
  - (ThermoBeaconSensorDeviceClass.BATTERY, Units.PERCENTAGE)
  - (ThermoBeaconSensorDeviceClass.HUMIDITY, Units.PERCENTAGE)
  - "(ThermoBeaconSensorDeviceClass.SIGNAL_STRENGTH, Units.\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT)"
  - (ThermoBeaconSensorDeviceClass.TEMPERATURE, Units.TEMP_CELSIUS)
  - (ThermoBeaconSensorDeviceClass.VOLTAGE, Units.ELECTRIC_POTENTIAL_VOLT)
  - (ThermoProSensorDeviceClass.HUMIDITY, Units.PERCENTAGE)
  - "(ThermoProSensorDeviceClass.SIGNAL_STRENGTH, Units.\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT)"
  - (ThermoProSensorDeviceClass.TEMPERATURE, Units.TEMP_CELSIUS)
  - "(ToloSensorEntityDescription(key='water_level', translation_key=\n    'water_level',\
    \ entity_category=EntityCategory.DIAGNOSTIC, icon=\n    'mdi:waves-arrow-up',\
    \ native_unit_of_measurement=PERCENTAGE, getter=lambda\n    status: status.water_level_percent,\
    \ availability_checker=None),\n    ToloSensorEntityDescription(key='tank_temperature',\
    \ translation_key=\n    'tank_temperature', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, getter=lambda status: status.\n    tank_temperature,\
    \ availability_checker=None),\n    ToloSensorEntityDescription(key='power_timer_remaining',\n\
    \    translation_key='power_timer_remaining', entity_category=EntityCategory\n\
    \    .DIAGNOSTIC, icon='mdi:power-settings', native_unit_of_measurement=\n   \
    \ UnitOfTime.MINUTES, getter=lambda status: status.power_timer,\n    availability_checker=lambda\
    \ settings, status: status.power_on and \n    settings.power_timer is not None),\
    \ ToloSensorEntityDescription(key=\n    'salt_bath_timer_remaining', translation_key=\n\
    \    'salt_bath_timer_remaining', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    icon='mdi:shaker-outline', native_unit_of_measurement=UnitOfTime.\n    MINUTES,\
    \ getter=lambda status: status.salt_bath_timer,\n    availability_checker=lambda\
    \ settings, status: status.salt_bath_on and \n    settings.salt_bath_timer is\
    \ not None), ToloSensorEntityDescription(key=\n    'fan_timer_remaining', translation_key='fan_timer_remaining',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, icon='mdi:fan-auto',\n    native_unit_of_measurement=UnitOfTime.MINUTES,\
    \ getter=lambda status:\n    status.fan_timer, availability_checker=lambda settings,\
    \ status: status.\n    fan_on and settings.fan_timer is not None))"
  - "(TomorrowioSensorEntityDescription(key='feels_like', translation_key=\n    'feels_like',\
    \ attribute=TMRW_ATTR_FEELS_LIKE,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), TomorrowioSensorEntityDescription(key='dew_point', translation_key=\n\
    \    'dew_point', attribute=TMRW_ATTR_DEW_POINT, icon=\n    'mdi:thermometer-water',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), TomorrowioSensorEntityDescription(key=\n\
    \    'pressure_surface_level', attribute=TMRW_ATTR_PRESSURE_SURFACE_LEVEL,\n \
    \   native_unit_of_measurement=UnitOfPressure.HPA, device_class=\n    SensorDeviceClass.PRESSURE,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TomorrowioSensorEntityDescription(key='global_horizontal_irradiance',\n\
    \    attribute=TMRW_ATTR_SOLAR_GHI, unit_imperial=UnitOfIrradiance.\n    BTUS_PER_HOUR_SQUARE_FOOT,\
    \ unit_metric=UnitOfIrradiance.\n    WATTS_PER_SQUARE_METER, imperial_conversion=1\
    \ / 3.15459, device_class=\n    SensorDeviceClass.IRRADIANCE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    TomorrowioSensorEntityDescription(key='cloud_base', translation_key=\n  \
    \  'cloud_base', attribute=TMRW_ATTR_CLOUD_BASE, icon=\n    'mdi:cloud-arrow-down',\
    \ unit_imperial=UnitOfLength.MILES, unit_metric=\n    UnitOfLength.KILOMETERS,\
    \ device_class=SensorDeviceClass.DISTANCE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ imperial_conversion=lambda\n    val: DistanceConverter.convert(val, UnitOfLength.KILOMETERS,\n\
    \    UnitOfLength.MILES)), TomorrowioSensorEntityDescription(key=\n    'cloud_ceiling',\
    \ translation_key='cloud_ceiling', attribute=\n    TMRW_ATTR_CLOUD_CEILING, icon='mdi:cloud-arrow-up',\
    \ unit_imperial=\n    UnitOfLength.MILES, unit_metric=UnitOfLength.KILOMETERS,\
    \ device_class=\n    SensorDeviceClass.DISTANCE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    imperial_conversion=lambda val: DistanceConverter.convert(val,\n    UnitOfLength.KILOMETERS,\
    \ UnitOfLength.MILES)),\n    TomorrowioSensorEntityDescription(key='cloud_cover',\
    \ translation_key=\n    'cloud_cover', attribute=TMRW_ATTR_CLOUD_COVER, icon=\n\
    \    'mdi:cloud-percent', native_unit_of_measurement=PERCENTAGE),\n    TomorrowioSensorEntityDescription(key='wind_gust',\
    \ translation_key=\n    'wind_gust', attribute=TMRW_ATTR_WIND_GUST, icon='mdi:weather-windy',\n\
    \    unit_imperial=UnitOfSpeed.MILES_PER_HOUR, unit_metric=UnitOfSpeed.\n    METERS_PER_SECOND,\
    \ device_class=SensorDeviceClass.SPEED, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ imperial_conversion=lambda val:\n    SpeedConverter.convert(val, UnitOfSpeed.METERS_PER_SECOND,\
    \ UnitOfSpeed.\n    MILES_PER_HOUR)), TomorrowioSensorEntityDescription(key=\n\
    \    'precipitation_type', translation_key='precipitation_type', attribute=\n\
    \    TMRW_ATTR_PRECIPITATION_TYPE, value_map=PrecipitationType, icon=\n    'mdi:weather-snowy-rainy'),\
    \ TomorrowioSensorEntityDescription(key=\n    'ozone', attribute=TMRW_ATTR_OZONE,\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, multiplication_factor=\n\
    \    convert_ppb_to_ugm3(48), device_class=SensorDeviceClass.OZONE,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    TomorrowioSensorEntityDescription(key='particulate_matter_2_5_mm',\n    attribute=TMRW_ATTR_PARTICULATE_MATTER_25,\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, device_class=\n\
    \    SensorDeviceClass.PM25, state_class=SensorStateClass.MEASUREMENT),\n    TomorrowioSensorEntityDescription(key='particulate_matter_10_mm',\n\
    \    attribute=TMRW_ATTR_PARTICULATE_MATTER_10, native_unit_of_measurement=\n\
    \    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, device_class=\n    SensorDeviceClass.PM10,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TomorrowioSensorEntityDescription(key='nitrogen_dioxide',\
    \ attribute=\n    TMRW_ATTR_NITROGEN_DIOXIDE, native_unit_of_measurement=\n  \
    \  CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, multiplication_factor=\n    convert_ppb_to_ugm3(46.01),\
    \ device_class=SensorDeviceClass.\n    NITROGEN_DIOXIDE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    TomorrowioSensorEntityDescription(key='carbon_monoxide', attribute=\n   \
    \ TMRW_ATTR_CARBON_MONOXIDE, native_unit_of_measurement=\n    CONCENTRATION_PARTS_PER_MILLION,\
    \ multiplication_factor=1 / 1000,\n    device_class=SensorDeviceClass.CO, state_class=SensorStateClass.\n\
    \    MEASUREMENT), TomorrowioSensorEntityDescription(key='sulphur_dioxide',\n\
    \    attribute=TMRW_ATTR_SULPHUR_DIOXIDE, native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,\
    \ multiplication_factor=\n    convert_ppb_to_ugm3(64.07), device_class=SensorDeviceClass.\n\
    \    SULPHUR_DIOXIDE, state_class=SensorStateClass.MEASUREMENT),\n    TomorrowioSensorEntityDescription(key='us_epa_air_quality_index',\n\
    \    translation_key='us_epa_air_quality_index', attribute=TMRW_ATTR_EPA_AQI,\n\
    \    device_class=SensorDeviceClass.AQI, state_class=SensorStateClass.\n    MEASUREMENT),\
    \ TomorrowioSensorEntityDescription(key=\n    'us_epa_primary_pollutant', translation_key='primary_pollutant',\n\
    \    attribute=TMRW_ATTR_EPA_PRIMARY_POLLUTANT, value_map=\n    PrimaryPollutantType),\
    \ TomorrowioSensorEntityDescription(key=\n    'us_epa_health_concern', translation_key='health_concern',\
    \ attribute=\n    TMRW_ATTR_EPA_HEALTH_CONCERN, value_map=HealthConcernType, icon=\n\
    \    'mdi:hospital'), TomorrowioSensorEntityDescription(key=\n    'china_mep_air_quality_index',\
    \ translation_key=\n    'china_mep_air_quality_index', attribute=TMRW_ATTR_CHINA_AQI,\n\
    \    device_class=SensorDeviceClass.AQI), TomorrowioSensorEntityDescription(\n\
    \    key='china_mep_primary_pollutant', translation_key=\n    'china_mep_primary_pollutant',\
    \ attribute=\n    TMRW_ATTR_CHINA_PRIMARY_POLLUTANT, value_map=PrimaryPollutantType),\n\
    \    TomorrowioSensorEntityDescription(key='china_mep_health_concern',\n    translation_key='china_mep_health_concern',\
    \ attribute=\n    TMRW_ATTR_CHINA_HEALTH_CONCERN, value_map=HealthConcernType,\
    \ icon=\n    'mdi:hospital'), TomorrowioSensorEntityDescription(key=\n    'tree_pollen_index',\
    \ translation_key='pollen_index', attribute=\n    TMRW_ATTR_POLLEN_TREE, icon='mdi:tree',\
    \ value_map=PollenIndex),\n    TomorrowioSensorEntityDescription(key='weed_pollen_index',\n\
    \    translation_key='weed_pollen_index', attribute=TMRW_ATTR_POLLEN_WEED,\n \
    \   value_map=PollenIndex, icon='mdi:flower-pollen'),\n    TomorrowioSensorEntityDescription(key='grass_pollen_index',\n\
    \    translation_key='grass_pollen_index', attribute=TMRW_ATTR_POLLEN_GRASS,\n\
    \    icon='mdi:grass', value_map=PollenIndex),\n    TomorrowioSensorEntityDescription(key='fire_index',\
    \ translation_key=\n    'fire_index', attribute=TMRW_ATTR_FIRE_INDEX, icon='mdi:fire'),\n\
    \    TomorrowioSensorEntityDescription(key='uv_index', translation_key=\n    'uv_index',\
    \ attribute=TMRW_ATTR_UV_INDEX, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ icon='mdi:sun-wireless'),\n    TomorrowioSensorEntityDescription(key='uv_radiation_health_concern',\n\
    \    translation_key='uv_radiation_health_concern', attribute=\n    TMRW_ATTR_UV_HEALTH_CONCERN,\
    \ value_map=UVDescription, icon=\n    'mdi:weather-sunny-alert'))"
  - "(ToonSensorEntityDescription(key='current_display_temperature', name=\n    'Temperature',\
    \ section='thermostat', measurement=\n    'current_display_temperature', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, cls=ToonDisplayDeviceSensor), ToonSensorEntityDescription(\n \
    \   key='current_humidity', name='Humidity', section='thermostat',\n    measurement='current_humidity',\
    \ native_unit_of_measurement=PERCENTAGE,\n    device_class=SensorDeviceClass.HUMIDITY,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, cls=ToonDisplayDeviceSensor), ToonSensorEntityDescription(\n \
    \   key='gas_average', name='Average Gas Usage', section='gas_usage',\n    measurement='average',\
    \ native_unit_of_measurement=VOLUME_CM3, icon=\n    'mdi:gas-cylinder', cls=ToonGasMeterDeviceSensor),\n\
    \    ToonSensorEntityDescription(key='gas_average_daily', name=\n    'Average\
    \ Daily Gas Usage', section='gas_usage', measurement=\n    'day_average', device_class=SensorDeviceClass.GAS,\n\
    \    native_unit_of_measurement=UnitOfVolume.CUBIC_METERS,\n    entity_registry_enabled_default=False,\
    \ cls=ToonGasMeterDeviceSensor),\n    ToonSensorEntityDescription(key='gas_daily_usage',\
    \ name=\n    'Gas Usage Today', section='gas_usage', measurement='day_usage',\n\
    \    device_class=SensorDeviceClass.GAS, native_unit_of_measurement=\n    UnitOfVolume.CUBIC_METERS,\
    \ cls=ToonGasMeterDeviceSensor),\n    ToonSensorEntityDescription(key='gas_daily_cost',\
    \ name='Gas Cost Today',\n    section='gas_usage', measurement='day_cost', device_class=\n\
    \    SensorDeviceClass.MONETARY, state_class=SensorStateClass.TOTAL,\n    native_unit_of_measurement=CURRENCY_EUR,\
    \ icon='mdi:gas-cylinder', cls=\n    ToonGasMeterDeviceSensor), ToonSensorEntityDescription(key=\n\
    \    'gas_meter_reading', name='Gas Meter', section='gas_usage', measurement\n\
    \    ='meter', native_unit_of_measurement=UnitOfVolume.CUBIC_METERS,\n    state_class=SensorStateClass.TOTAL_INCREASING,\
    \ device_class=\n    SensorDeviceClass.GAS, cls=ToonGasMeterDeviceSensor),\n \
    \   ToonSensorEntityDescription(key='gas_value', name='Current Gas Usage',\n \
    \   section='gas_usage', measurement='current', native_unit_of_measurement=\n\
    \    VOLUME_CM3, icon='mdi:gas-cylinder', cls=ToonGasMeterDeviceSensor),\n   \
    \ ToonSensorEntityDescription(key='power_average', name=\n    'Average Power Usage',\
    \ section='power_usage', measurement='average',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ device_class=\n    SensorDeviceClass.POWER, entity_registry_enabled_default=False,\
    \ cls=\n    ToonElectricityMeterDeviceSensor), ToonSensorEntityDescription(key=\n\
    \    'power_average_daily', name='Average Daily Energy Usage', section=\n    'power_usage',\
    \ measurement='day_average', native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY,\n    entity_registry_enabled_default=False,\
    \ cls=\n    ToonElectricityMeterDeviceSensor), ToonSensorEntityDescription(key=\n\
    \    'power_daily_cost', name='Energy Cost Today', section='power_usage',\n  \
    \  measurement='day_cost', device_class=SensorDeviceClass.MONETARY,\n    state_class=SensorStateClass.TOTAL,\
    \ native_unit_of_measurement=\n    CURRENCY_EUR, icon='mdi:power-plug', cls=\n\
    \    ToonElectricityMeterDeviceSensor), ToonSensorEntityDescription(key=\n   \
    \ 'power_daily_value', name='Energy Usage Today', section='power_usage',\n   \
    \ measurement='day_usage', native_unit_of_measurement=UnitOfEnergy.\n    KILO_WATT_HOUR,\
    \ device_class=SensorDeviceClass.ENERGY, cls=\n    ToonElectricityMeterDeviceSensor),\
    \ ToonSensorEntityDescription(key=\n    'power_meter_reading', name='Electricity\
    \ Meter Feed IN Tariff 1',\n    section='power_usage', measurement='meter_high',\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, device_class=\n \
    \   SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    cls=ToonElectricityMeterDeviceSensor), ToonSensorEntityDescription(key=\n\
    \    'power_meter_reading_low', name='Electricity Meter Feed IN Tariff 2',\n \
    \   section='power_usage', measurement='meter_low',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ device_class=\n    SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    cls=ToonElectricityMeterDeviceSensor), ToonSensorEntityDescription(key=\n\
    \    'power_value', name='Current Power Usage', section='power_usage',\n    measurement='current',\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    device_class=SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, cls=ToonElectricityMeterDeviceSensor),\n\
    \    ToonSensorEntityDescription(key='solar_meter_reading_produced', name=\n \
    \   'Electricity Meter Feed OUT Tariff 1', section='power_usage',\n    measurement='meter_produced_high',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, cls=\n    ToonElectricityMeterDeviceSensor),\
    \ ToonSensorEntityDescription(key=\n    'solar_meter_reading_low_produced', name=\n\
    \    'Electricity Meter Feed OUT Tariff 2', section='power_usage',\n    measurement='meter_produced_low',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING, cls=\n    ToonElectricityMeterDeviceSensor),\
    \ ToonSensorEntityDescription(key=\n    'water_average', name='Average Water Usage',\
    \ section='water_usage',\n    measurement='average', native_unit_of_measurement=VOLUME_LMIN,\
    \ icon=\n    'mdi:water', entity_registry_enabled_default=False, cls=\n    ToonWaterMeterDeviceSensor),\
    \ ToonSensorEntityDescription(key=\n    'water_average_daily', name='Average Daily\
    \ Water Usage', section=\n    'water_usage', measurement='day_average', native_unit_of_measurement=\n\
    \    UnitOfVolume.CUBIC_METERS, icon='mdi:water',\n    entity_registry_enabled_default=False,\
    \ cls=ToonWaterMeterDeviceSensor,\n    device_class=SensorDeviceClass.WATER),\
    \ ToonSensorEntityDescription(key=\n    'water_daily_usage', name='Water Usage\
    \ Today', section='water_usage',\n    measurement='day_usage', native_unit_of_measurement=UnitOfVolume.\n\
    \    CUBIC_METERS, icon='mdi:water', entity_registry_enabled_default=False,\n\
    \    cls=ToonWaterMeterDeviceSensor, device_class=SensorDeviceClass.WATER),\n\
    \    ToonSensorEntityDescription(key='water_meter_reading', name=\n    'Water\
    \ Meter', section='water_usage', measurement='meter',\n    native_unit_of_measurement=UnitOfVolume.CUBIC_METERS,\
    \ icon='mdi:water',\n    entity_registry_enabled_default=False, state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, cls=ToonWaterMeterDeviceSensor, device_class=\n    SensorDeviceClass.WATER),\
    \ ToonSensorEntityDescription(key='water_value',\n    name='Current Water Usage',\
    \ section='water_usage', measurement=\n    'current', native_unit_of_measurement=VOLUME_LMIN,\
    \ icon=\n    'mdi:water-pump', entity_registry_enabled_default=False, state_class=\n\
    \    SensorStateClass.MEASUREMENT, cls=ToonWaterMeterDeviceSensor),\n    ToonSensorEntityDescription(key='water_daily_cost',\
    \ name=\n    'Water Cost Today', section='water_usage', measurement='day_cost',\n\
    \    device_class=SensorDeviceClass.MONETARY, state_class=SensorStateClass.\n\
    \    TOTAL, native_unit_of_measurement=CURRENCY_EUR, icon='mdi:water-pump',\n\
    \    entity_registry_enabled_default=False, cls=ToonWaterMeterDeviceSensor))"
  - "(ToonSensorEntityDescription(key='solar_value', name=\n    'Current Solar Power\
    \ Production', section='power_usage', measurement=\n    'current_solar', native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n   \
    \ MEASUREMENT, cls=ToonSolarDeviceSensor), ToonSensorEntityDescription(\n    key='solar_maximum',\
    \ name='Max Solar Power Production Today', section=\n    'power_usage', measurement='day_max_solar',\
    \ native_unit_of_measurement=\n    UnitOfPower.WATT, device_class=SensorDeviceClass.POWER,\
    \ cls=\n    ToonSolarDeviceSensor), ToonSensorEntityDescription(key=\n    'solar_produced',\
    \ name='Solar Power Production to Grid', section=\n    'power_usage', measurement='current_produced',\n\
    \    native_unit_of_measurement=UnitOfPower.WATT, device_class=\n    SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT, cls=\n    ToonSolarDeviceSensor),\
    \ ToonSensorEntityDescription(key=\n    'power_usage_day_produced_solar', name='Solar\
    \ Energy Produced Today',\n    section='power_usage', measurement='day_produced_solar',\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, device_class=\n \
    \   SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    cls=ToonSolarDeviceSensor), ToonSensorEntityDescription(key=\n    'power_usage_day_to_grid_usage',\
    \ name='Energy Produced To Grid Today',\n    section='power_usage', measurement='day_to_grid_usage',\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, device_class=\n \
    \   SensorDeviceClass.ENERGY, entity_registry_enabled_default=False, cls=\n  \
    \  ToonSolarDeviceSensor), ToonSensorEntityDescription(key=\n    'power_usage_day_from_grid_usage',\
    \ name='Energy Usage From Grid Today',\n    section='power_usage', measurement='day_from_grid_usage',\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, device_class=\n \
    \   SensorDeviceClass.ENERGY, entity_registry_enabled_default=False, cls=\n  \
    \  ToonSolarDeviceSensor), ToonSensorEntityDescription(key=\n    'solar_average_produced',\
    \ name='Average Solar Power Production to Grid',\n    section='power_usage', measurement='average_produced',\n\
    \    native_unit_of_measurement=UnitOfPower.WATT, device_class=\n    SensorDeviceClass.POWER,\
    \ entity_registry_enabled_default=False, cls=\n    ToonSolarDeviceSensor), ToonSensorEntityDescription(key=\n\
    \    'power_usage_current_covered_by_solar', name=\n    'Current Power Usage Covered\
    \ By Solar', section='power_usage',\n    measurement='current_covered_by_solar',\
    \ native_unit_of_measurement=\n    PERCENTAGE, icon='mdi:solar-power', state_class=SensorStateClass.\n\
    \    MEASUREMENT, cls=ToonSolarDeviceSensor))"
  - "(ToonSensorEntityDescription(key='thermostat_info_current_modulation_level',\n\
    \    name='Boiler Modulation Level', section='thermostat', measurement=\n    'current_modulation_level',\
    \ native_unit_of_measurement=PERCENTAGE, icon\n    ='mdi:percent', entity_registry_enabled_default=False,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, cls=ToonBoilerDeviceSensor),)"
  - (ToonSensorEntityDescription, ...)
  - "(TractiveSensorEntityDescription(key=ATTR_BATTERY_LEVEL, translation_key=\n \
    \   'tracker_battery_level', native_unit_of_measurement=PERCENTAGE,\n    device_class=SensorDeviceClass.BATTERY,\
    \ signal_prefix=\n    TRACKER_HARDWARE_STATUS_UPDATED, hardware_sensor=True, entity_category=\n\
    \    EntityCategory.DIAGNOSTIC), TractiveSensorEntityDescription(key=\n    ATTR_TRACKER_STATE,\
    \ translation_key='tracker_state', signal_prefix=\n    TRACKER_HARDWARE_STATUS_UPDATED,\
    \ hardware_sensor=True, icon='mdi:radar',\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ device_class=\n    SensorDeviceClass.ENUM, options=['not_reporting', 'operational',\n\
    \    'system_shutdown_user', 'system_startup']),\n    TractiveSensorEntityDescription(key=ATTR_MINUTES_ACTIVE,\n\
    \    translation_key='activity_time', icon='mdi:clock-time-eight-outline',\n \
    \   native_unit_of_measurement=UnitOfTime.MINUTES, signal_prefix=\n    TRACKER_ACTIVITY_STATUS_UPDATED,\
    \ state_class=SensorStateClass.TOTAL),\n    TractiveSensorEntityDescription(key=ATTR_MINUTES_REST,\
    \ translation_key=\n    'rest_time', icon='mdi:clock-time-eight-outline',\n  \
    \  native_unit_of_measurement=UnitOfTime.MINUTES, signal_prefix=\n    TRACKER_WELLNESS_STATUS_UPDATED,\
    \ state_class=SensorStateClass.TOTAL),\n    TractiveSensorEntityDescription(key=ATTR_CALORIES,\
    \ translation_key=\n    'calories', icon='mdi:fire', native_unit_of_measurement='kcal',\n\
    \    signal_prefix=TRACKER_WELLNESS_STATUS_UPDATED, state_class=\n    SensorStateClass.TOTAL),\
    \ TractiveSensorEntityDescription(key=\n    ATTR_DAILY_GOAL, translation_key='daily_goal',\
    \ icon=\n    'mdi:flag-checkered', native_unit_of_measurement=UnitOfTime.MINUTES,\n\
    \    signal_prefix=TRACKER_ACTIVITY_STATUS_UPDATED),\n    TractiveSensorEntityDescription(key=ATTR_MINUTES_DAY_SLEEP,\n\
    \    translation_key='minutes_day_sleep', icon='mdi:sleep',\n    native_unit_of_measurement=UnitOfTime.MINUTES,\
    \ signal_prefix=\n    TRACKER_WELLNESS_STATUS_UPDATED, state_class=SensorStateClass.TOTAL),\n\
    \    TractiveSensorEntityDescription(key=ATTR_MINUTES_NIGHT_SLEEP,\n    translation_key='minutes_night_sleep',\
    \ icon='mdi:sleep',\n    native_unit_of_measurement=UnitOfTime.MINUTES, signal_prefix=\n\
    \    TRACKER_WELLNESS_STATUS_UPDATED, state_class=SensorStateClass.TOTAL),\n \
    \   TractiveSensorEntityDescription(key=ATTR_SLEEP_LABEL, translation_key=\n \
    \   'sleep', icon='mdi:sleep', signal_prefix=\n    TRACKER_WELLNESS_STATUS_UPDATED,\
    \ value_fn=lambda state: state.lower() if\n    isinstance(state, str) else state,\
    \ device_class=SensorDeviceClass.ENUM,\n    options=['good', 'low', 'ok']), TractiveSensorEntityDescription(key=\n\
    \    ATTR_ACTIVITY_LABEL, translation_key='activity', icon='mdi:run',\n    signal_prefix=TRACKER_WELLNESS_STATUS_UPDATED,\
    \ value_fn=lambda state: \n    state.lower() if isinstance(state, str) else state,\
    \ device_class=\n    SensorDeviceClass.ENUM, options=['good', 'low', 'ok']))"
  - (TractiveSensorEntityDescription, ...)
  - "(TradfriSensorEntityDescription(key='aqi', translation_key='aqi',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, icon='mdi:air-filter',\
    \ value=\n    _get_air_quality), TradfriSensorEntityDescription(key=\n    'filter_life_remaining',\
    \ translation_key='filter_life_remaining',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfTime.HOURS, icon='mdi:clock-outline',\
    \ value=_get_filter_time_left))"
  - "(TradfriSensorEntityDescription(key='battery_level', device_class=\n    SensorDeviceClass.BATTERY,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=PERCENTAGE,\
    \ value=lambda device: cast(int,\n    device.device_info.battery_level)),)"
  - (TradfriSensorEntityDescription, ...)
  - "(TrafikverketSensorEntityDescription(key='air_temp', translation_key=\n    'air_temperature',\
    \ api_key='air_temp', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    TrafikverketSensorEntityDescription(key='road_temp', translation_key=\n \
    \   'road_temperature', api_key='road_temp', native_unit_of_measurement=\n   \
    \ UnitOfTemperature.CELSIUS, device_class=SensorDeviceClass.TEMPERATURE,\n   \
    \ state_class=SensorStateClass.MEASUREMENT),\n    TrafikverketSensorEntityDescription(key='precipitation',\n\
    \    translation_key='precipitation', api_key='precipitationtype_translated',\n\
    \    name='Precipitation type', icon='mdi:weather-snowy-rainy',\n    entity_registry_enabled_default=False,\
    \ options=PRECIPITATION_TYPE,\n    device_class=SensorDeviceClass.ENUM),\n   \
    \ TrafikverketSensorEntityDescription(key='wind_direction',\n    translation_key='wind_direction',\
    \ api_key='winddirection', name=\n    'Wind direction', native_unit_of_measurement=DEGREE,\
    \ icon=\n    'mdi:flag-triangle', state_class=SensorStateClass.MEASUREMENT),\n\
    \    TrafikverketSensorEntityDescription(key='wind_direction_text',\n    translation_key='wind_direction_text',\
    \ api_key=\n    'winddirectiontext_translated', name='Wind direction text', icon=\n\
    \    'mdi:flag-triangle', options=WIND_DIRECTIONS, device_class=\n    SensorDeviceClass.ENUM),\
    \ TrafikverketSensorEntityDescription(key=\n    'wind_speed', api_key='windforce',\
    \ native_unit_of_measurement=\n    UnitOfSpeed.METERS_PER_SECOND, device_class=SensorDeviceClass.\n\
    \    WIND_SPEED, state_class=SensorStateClass.MEASUREMENT),\n    TrafikverketSensorEntityDescription(key='wind_speed_max',\n\
    \    translation_key='wind_speed_max', api_key='windforcemax',\n    native_unit_of_measurement=UnitOfSpeed.METERS_PER_SECOND,\
    \ device_class=\n    SensorDeviceClass.WIND_SPEED, icon='mdi:weather-windy-variant',\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  MEASUREMENT), TrafikverketSensorEntityDescription(key='humidity',\n    api_key='humidity',\
    \ native_unit_of_measurement=PERCENTAGE, device_class\n    =SensorDeviceClass.HUMIDITY,\
    \ entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT),\n\
    \    TrafikverketSensorEntityDescription(key='precipitation_amount', api_key\n\
    \    ='precipitation_amount', native_unit_of_measurement=\n    UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR,\
    \ device_class=\n    SensorDeviceClass.PRECIPITATION_INTENSITY, state_class=SensorStateClass\n\
    \    .MEASUREMENT), TrafikverketSensorEntityDescription(key=\n    'precipitation_amountname',\
    \ translation_key='precipitation_amountname',\n    api_key='precipitation_amountname_translated',\
    \ icon=\n    'mdi:weather-pouring', entity_registry_enabled_default=False, options=\n\
    \    PRECIPITATION_AMOUNTNAME, device_class=SensorDeviceClass.ENUM),\n    TrafikverketSensorEntityDescription(key='measure_time',\
    \ translation_key\n    ='measure_time', api_key='measure_time', icon='mdi:clock',\n\
    \    entity_registry_enabled_default=False, device_class=SensorDeviceClass.\n\
    \    TIMESTAMP))"
  - "(TrafikverketSensorEntityDescription(key='departure_time', translation_key=\n\
    \    'departure_time', icon='mdi:clock', device_class=SensorDeviceClass.\n   \
    \ TIMESTAMP, value_fn=lambda data: as_utc(data['departure_time']),\n    info_fn=lambda\
    \ data: cast(list[str], data['departure_information'])),\n    TrafikverketSensorEntityDescription(key='departure_from',\n\
    \    translation_key='departure_from', icon='mdi:ferry', value_fn=lambda\n   \
    \ data: cast(str, data['departure_from']), info_fn=lambda data: cast(list\n  \
    \  [str], data['departure_information'])),\n    TrafikverketSensorEntityDescription(key='departure_to',\
    \ translation_key\n    ='departure_to', icon='mdi:ferry', value_fn=lambda data:\
    \ cast(str, data\n    ['departure_to']), info_fn=lambda data: cast(list[str],\
    \ data[\n    'departure_information'])), TrafikverketSensorEntityDescription(key=\n\
    \    'departure_modified', translation_key='departure_modified', icon=\n    'mdi:clock',\
    \ device_class=SensorDeviceClass.TIMESTAMP, value_fn=lambda\n    data: as_utc(data['departure_modified']),\
    \ info_fn=lambda data: cast(\n    list[str], data['departure_information']),\n\
    \    entity_registry_enabled_default=False),\n    TrafikverketSensorEntityDescription(key='departure_time_next',\n\
    \    translation_key='departure_time_next', icon='mdi:clock', device_class=\n\
    \    SensorDeviceClass.TIMESTAMP, value_fn=lambda data: as_utc(data[\n    'departure_time_next']),\
    \ info_fn=None, entity_registry_enabled_default=\n    False), TrafikverketSensorEntityDescription(key=\n\
    \    'departure_time_next_next', translation_key='departure_time_next_next',\n\
    \    icon='mdi:clock', device_class=SensorDeviceClass.TIMESTAMP, value_fn=lambda\n\
    \    data: as_utc(data['departure_time_next_next']), info_fn=None,\n    entity_registry_enabled_default=False))"
  - "(TrafikverketSensorEntityDescription(key='departure_time', translation_key=\n\
    \    'departure_time', icon='mdi:clock', device_class=SensorDeviceClass.\n   \
    \ TIMESTAMP, value_fn=lambda data: data.departure_time),\n    TrafikverketSensorEntityDescription(key='departure_state',\n\
    \    translation_key='departure_state', icon='mdi:clock', value_fn=lambda\n  \
    \  data: data.departure_state, device_class=SensorDeviceClass.ENUM,\n    options=['on_time',\
    \ 'delayed', 'canceled']),\n    TrafikverketSensorEntityDescription(key='cancelled',\
    \ translation_key=\n    'cancelled', icon='mdi:alert', value_fn=lambda data: data.cancelled),\n\
    \    TrafikverketSensorEntityDescription(key='delayed_time', translation_key\n\
    \    ='delayed_time', icon='mdi:clock', device_class=SensorDeviceClass.\n    DURATION,\
    \ native_unit_of_measurement=UnitOfTime.SECONDS, value_fn=lambda\n    data: data.delayed_time),\
    \ TrafikverketSensorEntityDescription(key=\n    'planned_time', translation_key='planned_time',\
    \ icon='mdi:clock',\n    device_class=SensorDeviceClass.TIMESTAMP, value_fn=lambda\
    \ data: data.\n    planned_time, entity_registry_enabled_default=False),\n   \
    \ TrafikverketSensorEntityDescription(key='estimated_time',\n    translation_key='estimated_time',\
    \ icon='mdi:clock', device_class=\n    SensorDeviceClass.TIMESTAMP, value_fn=lambda\
    \ data: data.estimated_time,\n    entity_registry_enabled_default=False),\n  \
    \  TrafikverketSensorEntityDescription(key='actual_time', translation_key=\n \
    \   'actual_time', icon='mdi:clock', device_class=SensorDeviceClass.\n    TIMESTAMP,\
    \ value_fn=lambda data: data.actual_time,\n    entity_registry_enabled_default=False),\n\
    \    TrafikverketSensorEntityDescription(key='other_info', translation_key=\n\
    \    'other_info', icon='mdi:information-variant', value_fn=lambda data:\n   \
    \ data.other_info), TrafikverketSensorEntityDescription(key='deviation',\n   \
    \ translation_key='deviation', icon='mdi:alert', value_fn=lambda data:\n    data.deviation))"
  - (TrafikverketSensorEntityDescription, ...)
  - (True, period_usage, period_price)
  - "(TuyaSensorEntityDescription(key=DPCode.BATTERY_PERCENTAGE, translation_key\n\
    \    ='battery', native_unit_of_measurement=PERCENTAGE, device_class=\n    SensorDeviceClass.BATTERY,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_category=EntityCategory.DIAGNOSTIC),\
    \ TuyaSensorEntityDescription\n    (key=DPCode.BATTERY_STATE, translation_key='battery_state',\
    \ icon=\n    'mdi:battery', entity_category=EntityCategory.DIAGNOSTIC),\n    TuyaSensorEntityDescription(key=DPCode.BATTERY_VALUE,\
    \ translation_key=\n    'battery', device_class=SensorDeviceClass.BATTERY, entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT),\n \
    \   TuyaSensorEntityDescription(key=DPCode.VA_BATTERY, translation_key=\n    'battery',\
    \ device_class=SensorDeviceClass.BATTERY, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass.MEASUREMENT))"
  - "(TuyaSensorEntityDescription(key=DPCode.BRIGHT_STATE, translation_key=\n    'luminosity',\
    \ icon='mdi:brightness-6'), TuyaSensorEntityDescription(key\n    =DPCode.BRIGHT_VALUE,\
    \ translation_key='illuminance', device_class=\n    SensorDeviceClass.ILLUMINANCE,\
    \ state_class=SensorStateClass.MEASUREMENT\n    ), TuyaSensorEntityDescription(key=DPCode.TEMP_CURRENT,\
    \ translation_key\n    ='temperature', device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class\n    =SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    HUMIDITY_VALUE, translation_key='humidity', device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.CO2_VALUE,\
    \ translation_key=\n    'carbon_dioxide', device_class=SensorDeviceClass.CO2,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.CH4_SENSOR_VALUE, translation_key=\n\
    \    'methane', state_class=SensorStateClass.MEASUREMENT), *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.CLEAN_AREA, translation_key=\n    'cleaning_area',\
    \ icon='mdi:texture-box', state_class=SensorStateClass.\n    MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.CLEAN_TIME,\n\
    \    translation_key='cleaning_time', icon='mdi:progress-clock', state_class\n\
    \    =SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    TOTAL_CLEAN_AREA, translation_key='total_cleaning_area', icon=\n    'mdi:texture-box',\
    \ state_class=SensorStateClass.TOTAL_INCREASING),\n    TuyaSensorEntityDescription(key=DPCode.TOTAL_CLEAN_TIME,\n\
    \    translation_key='total_cleaning_time', icon='mdi:history', state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING), TuyaSensorEntityDescription(key=\n  \
    \  DPCode.TOTAL_CLEAN_COUNT, translation_key='total_cleaning_times', icon=\n \
    \   'mdi:counter', state_class=SensorStateClass.TOTAL_INCREASING),\n    TuyaSensorEntityDescription(key=DPCode.DUSTER_CLOTH,\
    \ translation_key=\n    'duster_cloth_life', icon='mdi:ticket-percent-outline',\
    \ state_class=\n    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    EDGE_BRUSH, translation_key='side_brush_life', icon=\n    'mdi:ticket-percent-outline',\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.FILTER_LIFE,\
    \ translation_key=\n    'filter_life', icon='mdi:ticket-percent-outline', state_class=\n\
    \    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    ROLL_BRUSH, translation_key='rolling_brush_life', icon=\n    'mdi:ticket-percent-outline',\
    \ state_class=SensorStateClass.MEASUREMENT))"
  - "(TuyaSensorEntityDescription(key=DPCode.CO2_VALUE, translation_key=\n    'carbon_dioxide',\
    \ device_class=SensorDeviceClass.CO2, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    PM25_VALUE, translation_key='pm25',\
    \ device_class=SensorDeviceClass.PM25,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(\n    key=DPCode.CH2O_VALUE, translation_key='formaldehyde',\
    \ state_class=\n    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    HUMIDITY_VALUE, translation_key='humidity', device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.TEMP_CURRENT,\
    \ translation_key=\n    'temperature', device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    VOC_VALUE, translation_key='voc', device_class=SensorDeviceClass.\n    VOLATILE_ORGANIC_COMPOUNDS,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.CO2_VALUE, translation_key=\n    'carbon_dioxide',\
    \ device_class=SensorDeviceClass.CO2, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    VOC_VALUE, translation_key='voc',\
    \ device_class=SensorDeviceClass.\n    VOLATILE_ORGANIC_COMPOUNDS, state_class=SensorStateClass.MEASUREMENT),\n\
    \    TuyaSensorEntityDescription(key=DPCode.PM25_VALUE, translation_key=\n   \
    \ 'pm25', device_class=SensorDeviceClass.PM25, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    VA_HUMIDITY, translation_key='humidity',\
    \ device_class=SensorDeviceClass\n    .HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    TuyaSensorEntityDescription(key=DPCode.VA_TEMPERATURE, translation_key=\n\
    \    'temperature', device_class=SensorDeviceClass.TEMPERATURE, state_class=\n\
    \    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    CH2O_VALUE, translation_key='formaldehyde', state_class=\n    SensorStateClass.MEASUREMENT),\
    \ *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.CO_VALUE, translation_key=\n    'carbon_monoxide',\
    \ device_class=SensorDeviceClass.CO, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.CUR_CURRENT, translation_key=\n    'current',\
    \ device_class=SensorDeviceClass.CURRENT, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_registry_enabled_default=False),\n    TuyaSensorEntityDescription(key=DPCode.CUR_POWER,\
    \ translation_key=\n    'power', device_class=SensorDeviceClass.POWER, state_class=\n\
    \    SensorStateClass.MEASUREMENT, entity_registry_enabled_default=False),\n \
    \   TuyaSensorEntityDescription(key=DPCode.CUR_VOLTAGE, translation_key=\n   \
    \ 'voltage', device_class=SensorDeviceClass.VOLTAGE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_registry_enabled_default=False))"
  - "(TuyaSensorEntityDescription(key=DPCode.FEED_REPORT, translation_key=\n    'last_amount',\
    \ icon='mdi:counter', state_class=SensorStateClass.\n    MEASUREMENT),)"
  - "(TuyaSensorEntityDescription(key=DPCode.FILTER, translation_key=\n    'filter_utilization',\
    \ entity_category=EntityCategory.DIAGNOSTIC, icon=\n    'mdi:ticket-percent-outline'),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    PM25, translation_key='pm25', device_class=SensorDeviceClass.PM25,\n\
    \    state_class=SensorStateClass.MEASUREMENT, icon='mdi:molecule'),\n    TuyaSensorEntityDescription(key=DPCode.TEMP,\
    \ translation_key=\n    'temperature', device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    HUMIDITY, translation_key='humidity', device_class=SensorDeviceClass.\n \
    \   HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.TVOC,\
    \ translation_key=\n    'total_volatile_organic_compound', device_class=SensorDeviceClass.\n\
    \    VOLATILE_ORGANIC_COMPOUNDS, state_class=SensorStateClass.MEASUREMENT),\n\
    \    TuyaSensorEntityDescription(key=DPCode.ECO2, translation_key=\n    'concentration_carbon_dioxide',\
    \ device_class=SensorDeviceClass.CO2,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(\n    key=DPCode.TOTAL_TIME, translation_key='total_operating_time',\
    \ icon=\n    'mdi:history', state_class=SensorStateClass.TOTAL_INCREASING,\n \
    \   entity_category=EntityCategory.DIAGNOSTIC), TuyaSensorEntityDescription\n\
    \    (key=DPCode.TOTAL_PM, translation_key='total_absorption_particles',\n   \
    \ icon='mdi:texture-box', state_class=SensorStateClass.TOTAL_INCREASING,\n   \
    \ entity_category=EntityCategory.DIAGNOSTIC), TuyaSensorEntityDescription\n  \
    \  (key=DPCode.AIR_QUALITY, translation_key='air_quality', icon=\n    'mdi:air-filter'))"
  - "(TuyaSensorEntityDescription(key=DPCode.FORWARD_ENERGY_TOTAL,\n    translation_key='total_energy',\
    \ device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    TuyaSensorEntityDescription(key=DPCode.PHASE_A, translation_key=\n    'phase_a_current',\
    \ device_class=SensorDeviceClass.CURRENT,\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, subkey='electriccurrent'),\n\
    \    TuyaSensorEntityDescription(key=DPCode.PHASE_A, translation_key=\n    'phase_a_power',\
    \ device_class=SensorDeviceClass.POWER, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=UnitOfPower.\n    KILO_WATT, subkey='power'), TuyaSensorEntityDescription(key=DPCode.\n\
    \    PHASE_A, translation_key='phase_a_voltage', device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ subkey=\n    'voltage'), TuyaSensorEntityDescription(key=DPCode.PHASE_B,\n \
    \   translation_key='phase_b_current', device_class=SensorDeviceClass.\n    CURRENT,\
    \ native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ subkey='electriccurrent'),\n    TuyaSensorEntityDescription(key=DPCode.PHASE_B,\
    \ translation_key=\n    'phase_b_power', device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPower.\n\
    \    KILO_WATT, subkey='power'), TuyaSensorEntityDescription(key=DPCode.\n   \
    \ PHASE_B, translation_key='phase_b_voltage', device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ subkey=\n    'voltage'), TuyaSensorEntityDescription(key=DPCode.PHASE_C,\n \
    \   translation_key='phase_c_current', device_class=SensorDeviceClass.\n    CURRENT,\
    \ native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ subkey='electriccurrent'),\n    TuyaSensorEntityDescription(key=DPCode.PHASE_C,\
    \ translation_key=\n    'phase_c_power', device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPower.\n\
    \    KILO_WATT, subkey='power'), TuyaSensorEntityDescription(key=DPCode.\n   \
    \ PHASE_C, translation_key='phase_c_voltage', device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ subkey='voltage'))"
  - "(TuyaSensorEntityDescription(key=DPCode.GAS_SENSOR_VALUE, name=None, icon=\n\
    \    'mdi:gas-cylinder', state_class=SensorStateClass.MEASUREMENT), *\n    BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.GAS_SENSOR_VALUE, translation_key=\n\
    \    'gas', icon='mdi:gas-cylinder', state_class=SensorStateClass.\n    MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.CH4_SENSOR_VALUE,\n    translation_key='gas',\
    \ name='Methane', state_class=SensorStateClass.\n    MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.VOC_VALUE,\n\
    \    translation_key='voc', device_class=SensorDeviceClass.\n    VOLATILE_ORGANIC_COMPOUNDS,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.PM25_VALUE,\
    \ translation_key=\n    'pm25', device_class=SensorDeviceClass.PM25, state_class=\n\
    \    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    CO_VALUE, translation_key='carbon_monoxide', icon='mdi:molecule-co',\n  \
    \  device_class=SensorDeviceClass.CO, state_class=SensorStateClass.\n    MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.CO2_VALUE,\n    translation_key='carbon_dioxide',\
    \ icon='mdi:molecule-co2', device_class\n    =SensorDeviceClass.CO2, state_class=SensorStateClass.MEASUREMENT),\n\
    \    TuyaSensorEntityDescription(key=DPCode.CH2O_VALUE, translation_key=\n   \
    \ 'formaldehyde', state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.BRIGHT_STATE,\
    \ translation_key=\n    'luminosity', icon='mdi:brightness-6'), TuyaSensorEntityDescription(key\n\
    \    =DPCode.BRIGHT_VALUE, translation_key='illuminance', icon=\n    'mdi:brightness-6',\
    \ device_class=SensorDeviceClass.ILLUMINANCE,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(\n    key=DPCode.TEMP_CURRENT, translation_key='temperature',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), TuyaSensorEntityDescription(key=DPCode.HUMIDITY_VALUE,\n    translation_key='humidity',\
    \ device_class=SensorDeviceClass.HUMIDITY,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(\n    key=DPCode.SMOKE_SENSOR_VALUE, translation_key='smoke_amount',\
    \ icon=\n    'mdi:smoke-detector', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    state_class=SensorStateClass.MEASUREMENT), *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.HUMIDITY_CURRENT, translation_key=\n\
    \    'humidity', device_class=SensorDeviceClass.HUMIDITY, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    TEMP_CURRENT, translation_key='temperature',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), TuyaSensorEntityDescription(key=DPCode.TEMP_CURRENT_F,\n    translation_key='temperature',\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    TuyaSensorEntityDescription(key=DPCode.LEVEL_CURRENT, translation_key=\n\
    \    'water_level', entity_category=EntityCategory.DIAGNOSTIC, icon=\n    'mdi:waves-arrow-up'))"
  - "(TuyaSensorEntityDescription(key=DPCode.HUMIDITY_VALUE, translation_key=\n  \
    \  'humidity', device_class=SensorDeviceClass.HUMIDITY, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    TEMP_CURRENT, translation_key='temperature',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), TuyaSensorEntityDescription(key=DPCode.CO2_VALUE, translation_key=\n \
    \   'carbon_dioxide', device_class=SensorDeviceClass.CO2, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.HUMIDITY_VALUE, translation_key=\n  \
    \  'humidity', device_class=SensorDeviceClass.HUMIDITY, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    TEMP_CURRENT, translation_key='temperature',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT))"
  - "(TuyaSensorEntityDescription(key=DPCode.PM25_VALUE, translation_key='pm25',\n\
    \    device_class=SensorDeviceClass.PM25, state_class=SensorStateClass.\n    MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.CH2O_VALUE,\n    translation_key='formaldehyde',\
    \ state_class=SensorStateClass.\n    MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.VOC_VALUE,\n\
    \    translation_key='voc', device_class=SensorDeviceClass.\n    VOLATILE_ORGANIC_COMPOUNDS,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.TEMP_CURRENT,\
    \ translation_key=\n    'temperature', device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    CO2_VALUE, translation_key='carbon_dioxide', device_class=\n    SensorDeviceClass.CO2,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.HUMIDITY_VALUE,\
    \ translation_key=\n    'humidity', device_class=SensorDeviceClass.HUMIDITY, state_class=\n\
    \    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    PM1, translation_key='pm1', device_class=SensorDeviceClass.PM1,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(\n    key=DPCode.PM10, translation_key='pm10', device_class=SensorDeviceClass\n\
    \    .PM10, state_class=SensorStateClass.MEASUREMENT), *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.PRESSURE_VALUE, name=None,\n    device_class=SensorDeviceClass.PRESSURE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT), *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.SENSOR_TEMPERATURE, translation_key\n\
    \    ='temperature', device_class=SensorDeviceClass.TEMPERATURE, state_class\n\
    \    =SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    SENSOR_HUMIDITY, translation_key='humidity', device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.WIRELESS_ELECTRICITY,\n\
    \    translation_key='battery', device_class=SensorDeviceClass.BATTERY,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass\n    .MEASUREMENT))"
  - "(TuyaSensorEntityDescription(key=DPCode.SMOKE_SENSOR_VALUE, translation_key\n\
    \    ='smoke_amount', icon='mdi:smoke-detector', entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass.MEASUREMENT), *\n    BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.TEMP_CURRENT, translation_key=\n    'current_temperature',\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(\n    key=DPCode.STATUS, translation_key='sous_vide_status'),\n\
    \    TuyaSensorEntityDescription(key=DPCode.REMAIN_TIME, translation_key=\n  \
    \  'remaining_time', native_unit_of_measurement=UnitOfTime.MINUTES, icon=\n  \
    \  'mdi:timer'))"
  - "(TuyaSensorEntityDescription(key=DPCode.TEMP_CURRENT, translation_key=\n    'current_temperature',\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(\n    key=DPCode.TEMP_CURRENT_F, translation_key='current_temperature',\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    STATUS, translation_key='status'))"
  - "(TuyaSensorEntityDescription(key=DPCode.TEMP_CURRENT, translation_key=\n    'temperature',\
    \ device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    HUMIDITY, translation_key='humidity',\
    \ device_class=SensorDeviceClass.\n    HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\
    \ *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.TEMP_CURRENT, translation_key=\n    'temperature',\
    \ device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    HUMIDITY_VALUE, translation_key='humidity',\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n\
    \    TuyaSensorEntityDescription(key=DPCode.CO2_VALUE, translation_key=\n    'carbon_dioxide',\
    \ device_class=SensorDeviceClass.CO2, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    CH2O_VALUE, translation_key='formaldehyde',\
    \ state_class=\n    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    VOC_VALUE, translation_key='voc', device_class=SensorDeviceClass.\n    VOLATILE_ORGANIC_COMPOUNDS,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.PM25_VALUE,\
    \ translation_key=\n    'pm25', device_class=SensorDeviceClass.PM25, state_class=\n\
    \    SensorStateClass.MEASUREMENT))"
  - "(TuyaSensorEntityDescription(key=DPCode.TEMP_CURRENT, translation_key=\n    'temperature',\
    \ device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT),)"
  - "(TuyaSensorEntityDescription(key=DPCode.TEMP_INDOOR, translation_key=\n    'temperature',\
    \ device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT),\
    \ TuyaSensorEntityDescription(key=DPCode.\n    HUMIDITY_INDOOR, translation_key='humidity',\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT))"
  - "(TuyaSensorEntityDescription(key=DPCode.TIME_TOTAL, translation_key=\n    'last_operation_duration',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    icon='mdi:progress-clock'),)"
  - "(TuyaSensorEntityDescription(key=DPCode.TOTAL_FORWARD_ENERGY,\n    translation_key='total_energy',\
    \ device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    TuyaSensorEntityDescription(key=DPCode.PHASE_A, translation_key=\n    'phase_a_current',\
    \ device_class=SensorDeviceClass.CURRENT,\n    native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, subkey='electriccurrent'),\n\
    \    TuyaSensorEntityDescription(key=DPCode.PHASE_A, translation_key=\n    'phase_a_power',\
    \ device_class=SensorDeviceClass.POWER, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=UnitOfPower.\n    KILO_WATT, subkey='power'), TuyaSensorEntityDescription(key=DPCode.\n\
    \    PHASE_A, translation_key='phase_a_voltage', device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ subkey=\n    'voltage'), TuyaSensorEntityDescription(key=DPCode.PHASE_B,\n \
    \   translation_key='phase_b_current', device_class=SensorDeviceClass.\n    CURRENT,\
    \ native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ subkey='electriccurrent'),\n    TuyaSensorEntityDescription(key=DPCode.PHASE_B,\
    \ translation_key=\n    'phase_b_power', device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPower.\n\
    \    KILO_WATT, subkey='power'), TuyaSensorEntityDescription(key=DPCode.\n   \
    \ PHASE_B, translation_key='phase_b_voltage', device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ subkey=\n    'voltage'), TuyaSensorEntityDescription(key=DPCode.PHASE_C,\n \
    \   translation_key='phase_c_current', device_class=SensorDeviceClass.\n    CURRENT,\
    \ native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ subkey='electriccurrent'),\n    TuyaSensorEntityDescription(key=DPCode.PHASE_C,\
    \ translation_key=\n    'phase_c_power', device_class=SensorDeviceClass.POWER,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPower.\n\
    \    KILO_WATT, subkey='power'), TuyaSensorEntityDescription(key=DPCode.\n   \
    \ PHASE_C, translation_key='phase_c_voltage', device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfElectricPotential.VOLT,\
    \ subkey='voltage'))"
  - "(TuyaSensorEntityDescription(key=DPCode.VA_TEMPERATURE, translation_key=\n  \
    \  'temperature', device_class=SensorDeviceClass.TEMPERATURE, state_class=\n \
    \   SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n \
    \   TEMP_CURRENT, translation_key='temperature', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ state_class=SensorStateClass.MEASUREMENT\n    ), TuyaSensorEntityDescription(key=DPCode.VA_HUMIDITY,\
    \ translation_key=\n    'humidity', device_class=SensorDeviceClass.HUMIDITY, state_class=\n\
    \    SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n\
    \    HUMIDITY_VALUE, translation_key='humidity', device_class=\n    SensorDeviceClass.HUMIDITY,\
    \ state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.BRIGHT_VALUE,\
    \ translation_key=\n    'illuminance', device_class=SensorDeviceClass.ILLUMINANCE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), *BATTERY_SENSORS)"
  - "(TuyaSensorEntityDescription(key=DPCode.VA_TEMPERATURE, translation_key=\n  \
    \  'temperature', device_class=SensorDeviceClass.TEMPERATURE, state_class=\n \
    \   SensorStateClass.MEASUREMENT), TuyaSensorEntityDescription(key=DPCode.\n \
    \   VA_HUMIDITY, translation_key='humidity', device_class=SensorDeviceClass\n\
    \    .HUMIDITY, state_class=SensorStateClass.MEASUREMENT),\n    TuyaSensorEntityDescription(key=DPCode.CUR_CURRENT,\
    \ translation_key=\n    'current', device_class=SensorDeviceClass.CURRENT, state_class=\n\
    \    SensorStateClass.MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False), TuyaSensorEntityDescription(key\n\
    \    =DPCode.CUR_POWER, translation_key='power', device_class=\n    SensorDeviceClass.POWER,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False), TuyaSensorEntityDescription(key\n\
    \    =DPCode.CUR_VOLTAGE, translation_key='voltage', device_class=\n    SensorDeviceClass.VOLTAGE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False))"
  - "(TuyaSensorEntityDescription(key=DPCode.WORK_POWER, translation_key='power',\n\
    \    device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.\n   \
    \ MEASUREMENT),)"
  - (TuyaSensorEntityDescription, ...)
  - "(TwenteMilieuSensorDescription(key='tree', translation_key=\n    'christmas_tree_pickup',\
    \ waste_type=WasteType.TREE, icon=\n    'mdi:pine-tree', device_class=SensorDeviceClass.DATE),\n\
    \    TwenteMilieuSensorDescription(key='Non-recyclable', translation_key=\n  \
    \  'non_recyclable_waste_pickup', waste_type=WasteType.NON_RECYCLABLE,\n    icon='mdi:delete-empty',\
    \ device_class=SensorDeviceClass.DATE),\n    TwenteMilieuSensorDescription(key='Organic',\
    \ translation_key=\n    'organic_waste_pickup', waste_type=WasteType.ORGANIC,\
    \ icon=\n    'mdi:delete-empty', device_class=SensorDeviceClass.DATE),\n    TwenteMilieuSensorDescription(key='Paper',\
    \ translation_key=\n    'paper_waste_pickup', waste_type=WasteType.PAPER, icon=\n\
    \    'mdi:delete-empty', device_class=SensorDeviceClass.DATE),\n    TwenteMilieuSensorDescription(key='Plastic',\
    \ translation_key=\n    'packages_waste_pickup', waste_type=WasteType.PACKAGES,\
    \ icon=\n    'mdi:delete-empty', device_class=SensorDeviceClass.DATE))"
  - (TwenteMilieuSensorDescription, ...)
  - (TypeError, IndexError)
  - (TypeError, ValueError)
  - (UOM_INDEX, UOM_ON_OFF)
  - (UOM_ON_OFF, UOM_INDEX)
  - (UnifiSensorEntityDescription, ...)
  - "(UnifiSensorEntityDescription[Clients, Client](key='Bandwidth sensor RX',\n \
    \   device_class=SensorDeviceClass.DATA_RATE, state_class=SensorStateClass.\n\
    \    MEASUREMENT, native_unit_of_measurement=UnitOfDataRate.\n    MEGABYTES_PER_SECOND,\
    \ icon='mdi:upload', has_entity_name=True,\n    allowed_fn=async_bandwidth_sensor_allowed_fn,\
    \ api_handler_fn=lambda api:\n    api.clients, available_fn=lambda controller,\
    \ _: controller.available,\n    device_info_fn=async_client_device_info_fn, event_is_on=None,\n\
    \    event_to_subscribe=None, name_fn=lambda _: 'RX', object_fn=lambda api,\n\
    \    obj_id: api.clients[obj_id], should_poll=False, supported_fn=lambda\n   \
    \ controller, _: controller.option_allow_bandwidth_sensors, unique_id_fn=\n  \
    \  lambda controller, obj_id: f'rx-{obj_id}', value_fn=\n    async_client_rx_value_fn),\
    \ UnifiSensorEntityDescription[Clients, Client\n    ](key='Bandwidth sensor TX',\
    \ device_class=SensorDeviceClass.DATA_RATE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    UnitOfDataRate.MEGABYTES_PER_SECOND, icon='mdi:download',\n\
    \    has_entity_name=True, allowed_fn=async_bandwidth_sensor_allowed_fn,\n   \
    \ api_handler_fn=lambda api: api.clients, available_fn=lambda controller,\n  \
    \  _: controller.available, device_info_fn=async_client_device_info_fn,\n    event_is_on=None,\
    \ event_to_subscribe=None, name_fn=lambda _: 'TX',\n    object_fn=lambda api,\
    \ obj_id: api.clients[obj_id], should_poll=False,\n    supported_fn=lambda controller,\
    \ _: controller.\n    option_allow_bandwidth_sensors, unique_id_fn=lambda controller,\
    \ obj_id:\n    f'tx-{obj_id}', value_fn=async_client_tx_value_fn),\n    UnifiSensorEntityDescription[Ports,\
    \ Port](key='PoE port power sensor',\n    device_class=SensorDeviceClass.POWER,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    has_entity_name=True, entity_registry_enabled_default=False, allowed_fn\n\
    \    =lambda controller, obj_id: True, api_handler_fn=lambda api: api.ports,\n\
    \    available_fn=async_device_available_fn, device_info_fn=\n    async_device_device_info_fn,\
    \ event_is_on=None, event_to_subscribe=None,\n    name_fn=lambda port: f'{port.name}\
    \ PoE Power', object_fn=lambda api,\n    obj_id: api.ports[obj_id], should_poll=False,\
    \ supported_fn=lambda\n    controller, obj_id: controller.api.ports[obj_id].port_poe,\
    \ unique_id_fn\n    =lambda controller, obj_id: f'poe_power-{obj_id}', value_fn=lambda\
    \ _,\n    obj: obj.poe_power if obj.poe_mode != 'off' else '0'),\n    UnifiSensorEntityDescription[Clients,\
    \ Client](key='Client uptime',\n    device_class=SensorDeviceClass.TIMESTAMP,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, has_entity_name=True,\n   \
    \ entity_registry_enabled_default=False, allowed_fn=\n    async_uptime_sensor_allowed_fn,\
    \ api_handler_fn=lambda api: api.clients,\n    available_fn=lambda controller,\
    \ obj_id: controller.available,\n    device_info_fn=async_client_device_info_fn,\
    \ event_is_on=None,\n    event_to_subscribe=None, name_fn=lambda client: 'Uptime',\
    \ object_fn=lambda\n    api, obj_id: api.clients[obj_id], should_poll=False, supported_fn=lambda\n\
    \    controller, _: controller.option_allow_uptime_sensors, unique_id_fn=lambda\n\
    \    controller, obj_id: f'uptime-{obj_id}', value_fn=\n    async_client_uptime_value_fn),\
    \ UnifiSensorEntityDescription[Wlans, Wlan\n    ](key='WLAN clients', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    has_entity_name=True, allowed_fn=lambda controller, obj_id: True,\n    api_handler_fn=lambda\
    \ api: api.wlans, available_fn=\n    async_wlan_available_fn, device_info_fn=async_wlan_device_info_fn,\n\
    \    event_is_on=None, event_to_subscribe=None, name_fn=lambda wlan: None,\n \
    \   object_fn=lambda api, obj_id: api.wlans[obj_id], should_poll=True,\n    supported_fn=lambda\
    \ controller, obj_id: True, unique_id_fn=lambda\n    controller, obj_id: f'wlan_clients-{obj_id}',\
    \ value_fn=\n    async_wlan_client_value_fn), UnifiSensorEntityDescription[Outlets,\n\
    \    Outlet](key='Outlet power metering', device_class=SensorDeviceClass.\n  \
    \  POWER, entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ has_entity_name=True,\n    allowed_fn=lambda controller, obj_id: True, api_handler_fn=lambda\
    \ api:\n    api.outlets, available_fn=async_device_available_fn, device_info_fn=\n\
    \    async_device_device_info_fn, event_is_on=None, event_to_subscribe=None,\n\
    \    name_fn=lambda outlet: f'{outlet.name} Outlet Power', object_fn=lambda\n\
    \    api, obj_id: api.outlets[obj_id], should_poll=True, supported_fn=\n    async_device_outlet_power_supported_fn,\
    \ unique_id_fn=lambda controller,\n    obj_id: f'outlet_power-{obj_id}', value_fn=lambda\
    \ _, obj: obj.power if\n    obj.relay_state else '0'), UnifiSensorEntityDescription[Devices,\
    \ Device\n    ](key='SmartPower AC power budget', device_class=SensorDeviceClass.\n\
    \    POWER, entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    suggested_display_precision=1, has_entity_name=True, allowed_fn=lambda\n\
    \    controller, obj_id: True, api_handler_fn=lambda api: api.devices,\n    available_fn=async_device_available_fn,\
    \ device_info_fn=\n    async_device_device_info_fn, event_is_on=None, event_to_subscribe=None,\n\
    \    name_fn=lambda device: 'AC Power Budget', object_fn=lambda api, obj_id:\n\
    \    api.devices[obj_id], should_poll=False, supported_fn=\n    async_device_outlet_supported_fn,\
    \ unique_id_fn=lambda controller,\n    obj_id: f'ac_power_budget-{obj_id}', value_fn=lambda\
    \ controller, device:\n    device.outlet_ac_power_budget), UnifiSensorEntityDescription[Devices,\n\
    \    Device](key='SmartPower AC power consumption', device_class=\n    SensorDeviceClass.POWER,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    native_unit_of_measurement=UnitOfPower.WATT,\n\
    \    suggested_display_precision=1, has_entity_name=True, allowed_fn=lambda\n\
    \    controller, obj_id: True, api_handler_fn=lambda api: api.devices,\n    available_fn=async_device_available_fn,\
    \ device_info_fn=\n    async_device_device_info_fn, event_is_on=None, event_to_subscribe=None,\n\
    \    name_fn=lambda device: 'AC Power Consumption', object_fn=lambda api,\n  \
    \  obj_id: api.devices[obj_id], should_poll=False, supported_fn=\n    async_device_outlet_supported_fn,\
    \ unique_id_fn=lambda controller,\n    obj_id: f'ac_power_conumption-{obj_id}',\
    \ value_fn=lambda controller,\n    device: device.outlet_ac_power_consumption),\n\
    \    UnifiSensorEntityDescription[Devices, Device](key='Device uptime',\n    device_class=SensorDeviceClass.TIMESTAMP,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, has_entity_name=True, allowed_fn=lambda\n\
    \    controller, obj_id: True, api_handler_fn=lambda api: api.devices,\n    available_fn=async_device_available_fn,\
    \ device_info_fn=\n    async_device_device_info_fn, event_is_on=None, event_to_subscribe=None,\n\
    \    name_fn=lambda device: 'Uptime', object_fn=lambda api, obj_id: api.\n   \
    \ devices[obj_id], should_poll=False, supported_fn=lambda controller,\n    obj_id:\
    \ True, unique_id_fn=lambda controller, obj_id:\n    f'device_uptime-{obj_id}',\
    \ value_fn=async_device_uptime_value_fn),\n    UnifiSensorEntityDescription[Devices,\
    \ Device](key='Device temperature',\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ entity_category=\n    EntityCategory.DIAGNOSTIC, native_unit_of_measurement=UnitOfTemperature\n\
    \    .CELSIUS, has_entity_name=True, allowed_fn=lambda controller, obj_id: \n\
    \    True, api_handler_fn=lambda api: api.devices, available_fn=\n    async_device_available_fn,\
    \ device_info_fn=async_device_device_info_fn,\n    event_is_on=None, event_to_subscribe=None,\
    \ name_fn=lambda device:\n    'Temperature', object_fn=lambda api, obj_id: api.devices[obj_id],\n\
    \    should_poll=False, supported_fn=lambda ctrlr, obj_id: ctrlr.api.devices\n\
    \    [obj_id].has_temperature, unique_id_fn=lambda controller, obj_id:\n    f'device_temperature-{obj_id}',\
    \ value_fn=lambda ctrlr, device: device.\n    general_temperature))"
  - (Unit, AsekoDataUpdateCoordinator)
  - "(UnitOfPressure.BAR, UnitOfTemperature.CELSIUS, UnitOfTemperature.\n    FAHRENHEIT,\
    \ PERCENTAGE, UnitOfTime.HOURS)"
  - (UnitOfTemperature.CELSIUS, UnitOfTemperature.FAHRENHEIT)
  - (UnitOfTemperature.FAHRENHEIT, UnitOfTemperature.CELSIUS, UOM_DOUBLE_TEMP)
  - (Units.A, False)
  - (Units.C, False)
  - (Units.HZ, False)
  - (Units.KWH, False)
  - (Units.KWH, True)
  - (Units.NONE, False)
  - (Units.PERCENT, False)
  - (Units.V, False)
  - (Units.W, False)
  - "(UpnpSensorEntityDescription(key=BYTES_RECEIVED, translation_key=\n    'data_received',\
    \ icon='mdi:server-network', device_class=\n    SensorDeviceClass.DATA_SIZE, native_unit_of_measurement=\n\
    \    UnitOfInformation.BYTES, entity_registry_enabled_default=False,\n    state_class=SensorStateClass.TOTAL_INCREASING,\n\
    \    suggested_display_precision=0), UpnpSensorEntityDescription(key=\n    BYTES_SENT,\
    \ translation_key='data_sent', icon='mdi:server-network',\n    device_class=SensorDeviceClass.DATA_SIZE,\
    \ native_unit_of_measurement=\n    UnitOfInformation.BYTES, entity_registry_enabled_default=False,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING,\n    suggested_display_precision=0),\
    \ UpnpSensorEntityDescription(key=\n    PACKETS_RECEIVED, translation_key='packets_received',\
    \ icon=\n    'mdi:server-network', native_unit_of_measurement=DATA_PACKETS,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  TOTAL_INCREASING, suggested_display_precision=0),\n    UpnpSensorEntityDescription(key=PACKETS_SENT,\
    \ translation_key=\n    'packets_sent', icon='mdi:server-network', native_unit_of_measurement=\n\
    \    DATA_PACKETS, entity_registry_enabled_default=False, state_class=\n    SensorStateClass.TOTAL_INCREASING,\
    \ suggested_display_precision=0),\n    UpnpSensorEntityDescription(key=ROUTER_IP,\
    \ translation_key=\n    'external_ip', icon='mdi:server-network', entity_category=\n\
    \    EntityCategory.DIAGNOSTIC), UpnpSensorEntityDescription(key=\n    ROUTER_UPTIME,\
    \ translation_key='uptime', icon='mdi:server-network',\n    native_unit_of_measurement=UnitOfTime.SECONDS,\n\
    \    entity_registry_enabled_default=False, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, suggested_display_precision=0), UpnpSensorEntityDescription\n\
    \    (key=WAN_STATUS, translation_key='wan_status', icon=\n    'mdi:server-network',\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False),\
    \ UpnpSensorEntityDescription(key\n    =BYTES_RECEIVED, translation_key='download_speed',\
    \ value_key=\n    KIBIBYTES_PER_SEC_RECEIVED, unique_id='KiB/sec_received', icon=\n\
    \    'mdi:server-network', device_class=SensorDeviceClass.DATA_RATE,\n    native_unit_of_measurement=UnitOfDataRate.KIBIBYTES_PER_SECOND,\n\
    \    state_class=SensorStateClass.MEASUREMENT, suggested_display_precision=1\n\
    \    ), UpnpSensorEntityDescription(key=BYTES_SENT, translation_key=\n    'upload_speed',\
    \ value_key=KIBIBYTES_PER_SEC_SENT, unique_id=\n    'KiB/sec_sent', icon='mdi:server-network',\
    \ device_class=\n    SensorDeviceClass.DATA_RATE, native_unit_of_measurement=UnitOfDataRate.\n\
    \    KIBIBYTES_PER_SECOND, state_class=SensorStateClass.MEASUREMENT,\n    suggested_display_precision=1),\
    \ UpnpSensorEntityDescription(key=\n    PACKETS_RECEIVED, translation_key='packet_download_speed',\
    \ value_key=\n    PACKETS_PER_SEC_RECEIVED, unique_id='packets/sec_received',\
    \ icon=\n    'mdi:server-network', native_unit_of_measurement=\n    DATA_RATE_PACKETS_PER_SECOND,\
    \ entity_registry_enabled_default=False,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ suggested_display_precision=1\n    ), UpnpSensorEntityDescription(key=PACKETS_SENT,\
    \ translation_key=\n    'packet_upload_speed', value_key=PACKETS_PER_SEC_SENT,\
    \ unique_id=\n    'packets/sec_sent', icon='mdi:server-network',\n    native_unit_of_measurement=DATA_RATE_PACKETS_PER_SECOND,\n\
    \    entity_registry_enabled_default=False, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, suggested_display_precision=1))"
  - (UpnpSensorEntityDescription, ...)
  - "(UvLabel(value='extreme', minimum_index=11), UvLabel(value='very_high',\n   \
    \ minimum_index=8), UvLabel(value='high', minimum_index=6), UvLabel(value\n  \
    \  ='moderate', minimum_index=3), UvLabel(value='low', minimum_index=0))"
  - "(V2CSensorEntityDescription(key='charge_power', translation_key=\n    'charge_power',\
    \ native_unit_of_measurement=UnitOfPower.WATT,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.POWER, value_fn=lambda evse_data: evse_data.\n\
    \    charge_power), V2CSensorEntityDescription(key='charge_energy',\n    translation_key='charge_energy',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING, device_class=SensorDeviceClass.ENERGY, value_fn=lambda\n\
    \    evse_data: evse_data.charge_energy), V2CSensorEntityDescription(key=\n  \
    \  'charge_time', translation_key='charge_time',\n    native_unit_of_measurement=UnitOfTime.SECONDS,\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING, device_class=SensorDeviceClass.\n\
    \    DURATION, value_fn=lambda evse_data: evse_data.charge_time),\n    V2CSensorEntityDescription(key='house_power',\
    \ translation_key=\n    'house_power', native_unit_of_measurement=UnitOfPower.WATT,\
    \ state_class\n    =SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.POWER,\n\
    \    value_fn=lambda evse_data: evse_data.house_power),\n    V2CSensorEntityDescription(key='fv_power',\
    \ translation_key='fv_power',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.POWER,\n\
    \    value_fn=lambda evse_data: evse_data.fv_power))"
  - "(ValloxSensorEntityDescription(key='current_profile', translation_key=\n    'current_profile',\
    \ icon='mdi:gauge', entity_type=ValloxProfileSensor),\n    ValloxSensorEntityDescription(key='fan_speed',\
    \ translation_key=\n    'fan_speed', metric_key='A_CYC_FAN_SPEED', icon='mdi:fan',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=PERCENTAGE,\n\
    \    entity_type=ValloxFanSpeedSensor), ValloxSensorEntityDescription(key=\n \
    \   'extract_fan_speed', translation_key='extract_fan_speed', metric_key=\n  \
    \  'A_CYC_EXTR_FAN_SPEED', icon='mdi:fan', state_class=SensorStateClass.\n   \
    \ MEASUREMENT, native_unit_of_measurement=REVOLUTIONS_PER_MINUTE,\n    entity_type=ValloxFanSpeedSensor,\
    \ entity_registry_enabled_default=False\n    ), ValloxSensorEntityDescription(key='supply_fan_speed',\n\
    \    translation_key='supply_fan_speed', metric_key='A_CYC_SUPP_FAN_SPEED',\n\
    \    icon='mdi:fan', state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=REVOLUTIONS_PER_MINUTE,\
    \ entity_type=\n    ValloxFanSpeedSensor, entity_registry_enabled_default=False),\n\
    \    ValloxSensorEntityDescription(key='remaining_time_for_filter',\n    translation_key='remaining_time_for_filter',\
    \ device_class=\n    SensorDeviceClass.TIMESTAMP, entity_type=ValloxFilterRemainingSensor),\n\
    \    ValloxSensorEntityDescription(key='cell_state', translation_key=\n    'cell_state',\
    \ icon='mdi:swap-horizontal-bold', metric_key=\n    'A_CYC_CELL_STATE', entity_type=ValloxCellStateSensor),\n\
    \    ValloxSensorEntityDescription(key='extract_air', translation_key=\n    'extract_air',\
    \ metric_key='A_CYC_TEMP_EXTRACT_AIR', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n\
    \    ValloxSensorEntityDescription(key='exhaust_air', translation_key=\n    'exhaust_air',\
    \ metric_key='A_CYC_TEMP_EXHAUST_AIR', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n\
    \    ValloxSensorEntityDescription(key='outdoor_air', translation_key=\n    'outdoor_air',\
    \ metric_key='A_CYC_TEMP_OUTDOOR_AIR', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n\
    \    ValloxSensorEntityDescription(key='supply_air', translation_key=\n    'supply_air',\
    \ metric_key='A_CYC_TEMP_SUPPLY_AIR', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS),\n\
    \    ValloxSensorEntityDescription(key='supply_cell_air', translation_key=\n \
    \   'supply_cell_air', metric_key='A_CYC_TEMP_SUPPLY_CELL_AIR',\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS), ValloxSensorEntityDescription(key=\n    'optional_air',\
    \ translation_key='optional_air', metric_key=\n    'A_CYC_TEMP_OPTIONAL', device_class=SensorDeviceClass.TEMPERATURE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=\n \
    \   UnitOfTemperature.CELSIUS, entity_registry_enabled_default=False),\n    ValloxSensorEntityDescription(key='humidity',\
    \ metric_key=\n    'A_CYC_RH_VALUE', device_class=SensorDeviceClass.HUMIDITY,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, native_unit_of_measurement=PERCENTAGE),\n\
    \    ValloxSensorEntityDescription(key='efficiency', translation_key=\n    'efficiency',\
    \ metric_key='A_CYC_EXTRACT_EFFICIENCY', icon='mdi:gauge',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ native_unit_of_measurement=\n    PERCENTAGE, entity_registry_enabled_default=False,\
    \ round_ndigits=0),\n    ValloxSensorEntityDescription(key='co2', metric_key='A_CYC_CO2_VALUE',\n\
    \    device_class=SensorDeviceClass.CO2, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION,\n    entity_registry_enabled_default=False))"
  - (ValloxSensorEntityDescription, ...)
  - (ValueError, KeyError)
  - (ValueError, TypeError)
  - (ValueError, requests.exceptions.ConnectionError)
  - "(ValveControllerSensorDescription(key=SENSOR_KIND_TEMPERATURE, device_class\n\
    \    =SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n    UnitOfTemperature.FAHRENHEIT,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    api_category=API_SYSTEM_ONBOARD_SENSOR_STATUS),\n\
    \    ValveControllerSensorDescription(key=SENSOR_KIND_UPTIME,\n    translation_key='uptime',\
    \ icon='mdi:timer', entity_category=\n    EntityCategory.DIAGNOSTIC, native_unit_of_measurement=UnitOfTime.\n\
    \    MINUTES, api_category=API_SYSTEM_DIAGNOSTICS))"
  - "(VeSyncSensorEntityDescription(key='filter-life', translation_key=\n    'filter_life',\
    \ native_unit_of_measurement=PERCENTAGE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value_fn=lambda device: device.filter_life,\
    \ exists_fn=lambda device:\n    sku_supported(device, FILTER_LIFE_SUPPORTED)),\n\
    \    VeSyncSensorEntityDescription(key='air-quality', translation_key=\n    'air_quality',\
    \ value_fn=lambda device: device.details['air_quality'],\n    exists_fn=lambda\
    \ device: sku_supported(device, AIR_QUALITY_SUPPORTED)),\n    VeSyncSensorEntityDescription(key='pm25',\
    \ device_class=\n    SensorDeviceClass.PM25, native_unit_of_measurement=\n   \
    \ CONCENTRATION_MICROGRAMS_PER_CUBIC_METER, state_class=SensorStateClass.\n  \
    \  MEASUREMENT, value_fn=lambda device: device.details['air_quality_value'\n \
    \   ], exists_fn=lambda device: sku_supported(device, PM25_SUPPORTED)),\n    VeSyncSensorEntityDescription(key='power',\
    \ translation_key=\n    'current_power', device_class=SensorDeviceClass.POWER,\n\
    \    native_unit_of_measurement=UnitOfPower.WATT, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ value_fn=lambda device: device.details[\n    'power'], update_fn=update_energy,\
    \ exists_fn=lambda device: ha_dev_type\n    (device) == 'outlet'), VeSyncSensorEntityDescription(key='energy',\n\
    \    translation_key='energy_today', device_class=SensorDeviceClass.ENERGY,\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, state_class=\n  \
    \  SensorStateClass.TOTAL_INCREASING, value_fn=lambda device: device.\n    energy_today,\
    \ update_fn=update_energy, exists_fn=lambda device: \n    ha_dev_type(device)\
    \ == 'outlet'), VeSyncSensorEntityDescription(key=\n    'energy-weekly', translation_key='energy_week',\
    \ device_class=\n    SensorDeviceClass.ENERGY, native_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR, state_class=SensorStateClass.TOTAL_INCREASING, value_fn\n\
    \    =lambda device: device.weekly_energy_total, update_fn=update_energy,\n  \
    \  exists_fn=lambda device: ha_dev_type(device) == 'outlet'),\n    VeSyncSensorEntityDescription(key='energy-monthly',\
    \ translation_key=\n    'energy_month', device_class=SensorDeviceClass.ENERGY,\n\
    \    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR, state_class=\n  \
    \  SensorStateClass.TOTAL_INCREASING, value_fn=lambda device: device.\n    monthly_energy_total,\
    \ update_fn=update_energy, exists_fn=lambda device:\n    ha_dev_type(device) ==\
    \ 'outlet'), VeSyncSensorEntityDescription(key=\n    'energy-yearly', translation_key='energy_year',\
    \ device_class=\n    SensorDeviceClass.ENERGY, native_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR, state_class=SensorStateClass.TOTAL_INCREASING, value_fn\n\
    \    =lambda device: device.yearly_energy_total, update_fn=update_energy,\n  \
    \  exists_fn=lambda device: ha_dev_type(device) == 'outlet'),\n    VeSyncSensorEntityDescription(key='voltage',\
    \ translation_key=\n    'current_voltage', device_class=SensorDeviceClass.VOLTAGE,\n\
    \    native_unit_of_measurement=UnitOfElectricPotential.VOLT, state_class=\n \
    \   SensorStateClass.MEASUREMENT, value_fn=lambda device: device.details[\n  \
    \  'voltage'], update_fn=update_energy, exists_fn=lambda device: \n    ha_dev_type(device)\
    \ == 'outlet'))"
  - (VeSyncSensorEntityDescription, ...)
  - "(VenstarSensorEntityDescription(key='hum', device_class=SensorDeviceClass.\n\
    \    HUMIDITY, state_class=SensorStateClass.MEASUREMENT, uom_fn=lambda _:\n  \
    \  PERCENTAGE, value_fn=lambda coordinator, sensor_name: coordinator.\n    client.get_sensor(sensor_name,\
    \ 'hum'), name_fn=lambda sensor_name:\n    f'{sensor_name} Humidity'), VenstarSensorEntityDescription(key='temp',\n\
    \    device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ uom_fn=temperature_unit, value_fn=lambda\n    coordinator, sensor_name: round(float(coordinator.client.get_sensor(\n\
    \    sensor_name, 'temp')), 1), name_fn=lambda sensor_name:\n    f\"{sensor_name.replace('\
    \ Temp', '')} Temperature\"),\n    VenstarSensorEntityDescription(key='co2', device_class=\n\
    \    SensorDeviceClass.CO2, state_class=SensorStateClass.MEASUREMENT, uom_fn\n\
    \    =lambda _: CONCENTRATION_PARTS_PER_MILLION, value_fn=lambda coordinator,\n\
    \    sensor_name: coordinator.client.get_sensor(sensor_name, 'co2'), name_fn\n\
    \    =lambda sensor_name: f'{sensor_name} CO2'),\n    VenstarSensorEntityDescription(key='iaq',\
    \ device_class=\n    SensorDeviceClass.AQI, state_class=SensorStateClass.MEASUREMENT,\
    \ uom_fn\n    =lambda _: None, value_fn=lambda coordinator, sensor_name: coordinator.\n\
    \    client.get_sensor(sensor_name, 'iaq'), name_fn=lambda sensor_name:\n    f'{sensor_name}\
    \ IAQ'), VenstarSensorEntityDescription(key='battery',\n    device_class=SensorDeviceClass.BATTERY,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, uom_fn=lambda _: PERCENTAGE,\
    \ value_fn=lambda coordinator,\n    sensor_name: coordinator.client.get_sensor(sensor_name,\
    \ 'battery'),\n    name_fn=lambda sensor_name: f'{sensor_name} Battery'))"
  - "(VenstarSensorEntityDescription(key='schedulepart', device_class=\n    SensorDeviceClass.ENUM,\
    \ options=list(SCHEDULE_PARTS.values()),\n    translation_key='schedule_part',\
    \ uom_fn=lambda _: None, value_fn=lambda\n    coordinator, sensor_name: SCHEDULE_PARTS[coordinator.client.get_info(\n\
    \    sensor_name)], name_fn=lambda _: 'Schedule Part'),)"
  - (VenstarSensorEntityDescription, ...)
  - "(ViCareSensorEntityDescription(key='burner_starts', name='Burner Starts',\n \
    \   icon='mdi:counter', value_getter=lambda api: api.getStarts(),\n    state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    ViCareSensorEntityDescription(key='burner_hours', name='Burner Hours',\n\
    \    icon='mdi:counter', native_unit_of_measurement=UnitOfTime.HOURS,\n    value_getter=lambda\
    \ api: api.getHours(), state_class=SensorStateClass.\n    TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'burner_modulation', name='Burner Modulation', icon='mdi:percent',\n    native_unit_of_measurement=PERCENTAGE,\
    \ value_getter=lambda api: api.\n    getModulation(), state_class=SensorStateClass.MEASUREMENT))"
  - "(ViCareSensorEntityDescription(key='compressor_starts', name=\n    'Compressor\
    \ Starts', icon='mdi:counter', value_getter=lambda api: api.\n    getStarts(),\
    \ state_class=SensorStateClass.TOTAL_INCREASING),\n    ViCareSensorEntityDescription(key='compressor_hours',\
    \ name=\n    'Compressor Hours', icon='mdi:counter', native_unit_of_measurement=\n\
    \    UnitOfTime.HOURS, value_getter=lambda api: api.getHours(), state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'compressor_hours_loadclass1', name='Compressor Hours Load Class 1',\n  \
    \  icon='mdi:counter', native_unit_of_measurement=UnitOfTime.HOURS,\n    value_getter=lambda\
    \ api: api.getHoursLoadClass1(), state_class=\n    SensorStateClass.TOTAL_INCREASING),\
    \ ViCareSensorEntityDescription(key=\n    'compressor_hours_loadclass2', name='Compressor\
    \ Hours Load Class 2',\n    icon='mdi:counter', native_unit_of_measurement=UnitOfTime.HOURS,\n\
    \    value_getter=lambda api: api.getHoursLoadClass2(), state_class=\n    SensorStateClass.TOTAL_INCREASING),\
    \ ViCareSensorEntityDescription(key=\n    'compressor_hours_loadclass3', name='Compressor\
    \ Hours Load Class 3',\n    icon='mdi:counter', native_unit_of_measurement=UnitOfTime.HOURS,\n\
    \    value_getter=lambda api: api.getHoursLoadClass3(), state_class=\n    SensorStateClass.TOTAL_INCREASING),\
    \ ViCareSensorEntityDescription(key=\n    'compressor_hours_loadclass4', name='Compressor\
    \ Hours Load Class 4',\n    icon='mdi:counter', native_unit_of_measurement=UnitOfTime.HOURS,\n\
    \    value_getter=lambda api: api.getHoursLoadClass4(), state_class=\n    SensorStateClass.TOTAL_INCREASING),\
    \ ViCareSensorEntityDescription(key=\n    'compressor_hours_loadclass5', name='Compressor\
    \ Hours Load Class 5',\n    icon='mdi:counter', native_unit_of_measurement=UnitOfTime.HOURS,\n\
    \    value_getter=lambda api: api.getHoursLoadClass5(), state_class=\n    SensorStateClass.TOTAL_INCREASING))"
  - "(ViCareSensorEntityDescription(key='outside_temperature', name=\n    'Outside\
    \ Temperature', native_unit_of_measurement=UnitOfTemperature.\n    CELSIUS, value_getter=lambda\
    \ api: api.getOutsideTemperature(),\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), ViCareSensorEntityDescription(key=\n\
    \    'return_temperature', name='Return Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ value_getter=lambda\n    api: api.getReturnTemperature(), device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n    ViCareSensorEntityDescription(key='boiler_temperature',\
    \ name=\n    'Boiler Temperature', native_unit_of_measurement=UnitOfTemperature.\n\
    \    CELSIUS, value_getter=lambda api: api.getBoilerTemperature(),\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), ViCareSensorEntityDescription(key=\n\
    \    'boiler_supply_temperature', name='Boiler Supply Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ value_getter=lambda\n    api: api.getBoilerCommonSupplyTemperature(), device_class=\n\
    \    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT\n\
    \    ), ViCareSensorEntityDescription(key=\n    'primary_circuit_supply_temperature',\
    \ name=\n    'Primary Circuit Supply Temperature', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_getter=lambda api: api.\n    getSupplyTemperaturePrimaryCircuit(),\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    ViCareSensorEntityDescription(key='primary_circuit_return_temperature',\n\
    \    name='Primary Circuit  Return Temperature', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_getter=lambda api: api.\n    getReturnTemperaturePrimaryCircuit(),\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    ViCareSensorEntityDescription(key=\n    'secondary_circuit_supply_temperature',\
    \ name=\n    'Secondary Circuit Supply Temperature', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_getter=lambda api: api.\n    getSupplyTemperatureSecondaryCircuit(),\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    ViCareSensorEntityDescription(key=\n    'secondary_circuit_return_temperature',\
    \ name=\n    'Secondary Circuit Return Temperature', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_getter=lambda api: api.\n    getReturnTemperatureSecondaryCircuit(),\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    ViCareSensorEntityDescription(key='hotwater_out_temperature', name=\n   \
    \ 'Hot Water Out Temperature', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ value_getter=lambda api: api.\n    getDomesticHotWaterOutletTemperature(), device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n    ViCareSensorEntityDescription(key='hotwater_max_temperature',\
    \ name=\n    'Hot Water Max Temperature', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ value_getter=lambda api: api.\n    getDomesticHotWaterMaxTemperature(), device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n    ViCareSensorEntityDescription(key='hotwater_min_temperature',\
    \ name=\n    'Hot Water Min Temperature', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ value_getter=lambda api: api.\n    getDomesticHotWaterMinTemperature(), device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n    ViCareSensorEntityDescription(key='hotwater_gas_consumption_today',\n\
    \    name='Hot water gas consumption today', value_getter=lambda api: api.\n \
    \   getGasConsumptionDomesticHotWaterToday(), unit_getter=lambda api: api.\n \
    \   getGasConsumptionDomesticHotWaterUnit(), state_class=SensorStateClass.\n \
    \   TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n    'hotwater_gas_consumption_heating_this_week',\
    \ name=\n    'Hot water gas consumption this week', value_getter=lambda api: api.\n\
    \    getGasConsumptionDomesticHotWaterThisWeek(), unit_getter=lambda api:\n  \
    \  api.getGasConsumptionDomesticHotWaterUnit(), state_class=\n    SensorStateClass.TOTAL_INCREASING),\
    \ ViCareSensorEntityDescription(key=\n    'hotwater_gas_consumption_heating_this_month',\
    \ name=\n    'Hot water gas consumption this month', value_getter=lambda api:\
    \ api.\n    getGasConsumptionDomesticHotWaterThisMonth(), unit_getter=lambda api:\n\
    \    api.getGasConsumptionDomesticHotWaterUnit(), state_class=\n    SensorStateClass.TOTAL_INCREASING),\
    \ ViCareSensorEntityDescription(key=\n    'hotwater_gas_consumption_heating_this_year',\
    \ name=\n    'Hot water gas consumption this year', value_getter=lambda api: api.\n\
    \    getGasConsumptionDomesticHotWaterThisYear(), unit_getter=lambda api:\n  \
    \  api.getGasConsumptionDomesticHotWaterUnit(), state_class=\n    SensorStateClass.TOTAL_INCREASING),\
    \ ViCareSensorEntityDescription(key=\n    'gas_consumption_heating_today', name='Heating\
    \ gas consumption today',\n    value_getter=lambda api: api.getGasConsumptionHeatingToday(),\n\
    \    unit_getter=lambda api: api.getGasConsumptionHeatingUnit(), state_class\n\
    \    =SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'gas_consumption_heating_this_week', name=\n    'Heating gas consumption\
    \ this week', value_getter=lambda api: api.\n    getGasConsumptionHeatingThisWeek(),\
    \ unit_getter=lambda api: api.\n    getGasConsumptionHeatingUnit(), state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n    'gas_consumption_heating_this_month',\
    \ name=\n    'Heating gas consumption this month', value_getter=lambda api: api.\n\
    \    getGasConsumptionHeatingThisMonth(), unit_getter=lambda api: api.\n    getGasConsumptionHeatingUnit(),\
    \ state_class=SensorStateClass.\n    TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'gas_consumption_heating_this_year', name=\n    'Heating gas consumption\
    \ this year', value_getter=lambda api: api.\n    getGasConsumptionHeatingThisYear(),\
    \ unit_getter=lambda api: api.\n    getGasConsumptionHeatingUnit(), state_class=SensorStateClass.\n\
    \    TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n    'gas_summary_consumption_heating_currentday',\
    \ name=\n    'Heating gas consumption current day', native_unit_of_measurement=\n\
    \    UnitOfVolume.CUBIC_METERS, value_getter=lambda api: api.\n    getGasSummaryConsumptionHeatingCurrentDay(),\
    \ unit_getter=lambda api:\n    api.getGasSummaryConsumptionHeatingUnit(), state_class=SensorStateClass\n\
    \    .TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n    'gas_summary_consumption_heating_currentmonth',\
    \ name=\n    'Heating gas consumption current month', native_unit_of_measurement=\n\
    \    UnitOfVolume.CUBIC_METERS, value_getter=lambda api: api.\n    getGasSummaryConsumptionHeatingCurrentMonth(),\
    \ unit_getter=lambda api:\n    api.getGasSummaryConsumptionHeatingUnit(), state_class=SensorStateClass\n\
    \    .TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n    'gas_summary_consumption_heating_currentyear',\
    \ name=\n    'Heating gas consumption current year', native_unit_of_measurement=\n\
    \    UnitOfVolume.CUBIC_METERS, value_getter=lambda api: api.\n    getGasSummaryConsumptionHeatingCurrentYear(),\
    \ unit_getter=lambda api:\n    api.getGasSummaryConsumptionHeatingUnit(), state_class=SensorStateClass\n\
    \    .TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n    'gas_summary_consumption_heating_lastsevendays',\
    \ name=\n    'Heating gas consumption last seven days', native_unit_of_measurement=\n\
    \    UnitOfVolume.CUBIC_METERS, value_getter=lambda api: api.\n    getGasSummaryConsumptionHeatingLastSevenDays(),\
    \ unit_getter=lambda api:\n    api.getGasSummaryConsumptionHeatingUnit(), state_class=SensorStateClass\n\
    \    .TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n    'hotwater_gas_summary_consumption_heating_currentday',\
    \ name=\n    'Hot water gas consumption current day', native_unit_of_measurement=\n\
    \    UnitOfVolume.CUBIC_METERS, value_getter=lambda api: api.\n    getGasSummaryConsumptionDomesticHotWaterCurrentDay(),\
    \ unit_getter=lambda\n    api: api.getGasSummaryConsumptionDomesticHotWaterUnit(),\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'hotwater_gas_summary_consumption_heating_currentmonth', name=\n    'Hot\
    \ water gas consumption current month', native_unit_of_measurement=\n    UnitOfVolume.CUBIC_METERS,\
    \ value_getter=lambda api: api.\n    getGasSummaryConsumptionDomesticHotWaterCurrentMonth(),\
    \ unit_getter=lambda\n    api: api.getGasSummaryConsumptionDomesticHotWaterUnit(),\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'hotwater_gas_summary_consumption_heating_currentyear', name=\n    'Hot water\
    \ gas consumption current year', native_unit_of_measurement=\n    UnitOfVolume.CUBIC_METERS,\
    \ value_getter=lambda api: api.\n    getGasSummaryConsumptionDomesticHotWaterCurrentYear(),\
    \ unit_getter=lambda\n    api: api.getGasSummaryConsumptionDomesticHotWaterUnit(),\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'hotwater_gas_summary_consumption_heating_lastsevendays', name=\n    'Hot\
    \ water gas consumption last seven days', native_unit_of_measurement\n    =UnitOfVolume.CUBIC_METERS,\
    \ value_getter=lambda api: api.\n    getGasSummaryConsumptionDomesticHotWaterLastSevenDays(),\
    \ unit_getter=lambda\n    api: api.getGasSummaryConsumptionDomesticHotWaterUnit(),\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'energy_summary_consumption_heating_currentday', name=\n    'Energy consumption\
    \ of gas heating current day',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda\n    api: api.getPowerSummaryConsumptionHeatingCurrentDay(),\
    \ unit_getter=lambda\n    api: api.getPowerSummaryConsumptionHeatingUnit(), state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'energy_summary_consumption_heating_currentmonth', name=\n    'Energy consumption\
    \ of gas heating current month',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda\n    api: api.getPowerSummaryConsumptionHeatingCurrentMonth(),\
    \ unit_getter=\n    lambda api: api.getPowerSummaryConsumptionHeatingUnit(), state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'energy_summary_consumption_heating_currentyear', name=\n    'Energy consumption\
    \ of gas heating current year',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda\n    api: api.getPowerSummaryConsumptionHeatingCurrentYear(),\
    \ unit_getter=lambda\n    api: api.getPowerSummaryConsumptionHeatingUnit(), state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'energy_summary_consumption_heating_lastsevendays', name=\n    'Energy consumption\
    \ of gas heating last seven days',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda\n    api: api.getPowerSummaryConsumptionHeatingLastSevenDays(),\
    \ unit_getter=\n    lambda api: api.getPowerSummaryConsumptionHeatingUnit(), state_class=\n\
    \    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'energy_dhw_summary_consumption_heating_currentday', name=\n    'Energy consumption\
    \ of hot water gas heating current day',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda\n    api: api.getPowerSummaryConsumptionDomesticHotWaterCurrentDay(),\n\
    \    unit_getter=lambda api: api.\n    getPowerSummaryConsumptionDomesticHotWaterUnit(),\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'energy_dhw_summary_consumption_heating_currentmonth', name=\n    'Energy\
    \ consumption of hot water gas heating current month',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda\n    api: api.getPowerSummaryConsumptionDomesticHotWaterCurrentMonth(),\n\
    \    unit_getter=lambda api: api.\n    getPowerSummaryConsumptionDomesticHotWaterUnit(),\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'energy_dhw_summary_consumption_heating_currentyear', name=\n    'Energy\
    \ consumption of hot water gas heating current year',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda\n    api: api.getPowerSummaryConsumptionDomesticHotWaterCurrentYear(),\n\
    \    unit_getter=lambda api: api.\n    getPowerSummaryConsumptionDomesticHotWaterUnit(),\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'energy_summary_dhw_consumption_heating_lastsevendays', name=\n    'Energy\
    \ consumption of hot water gas heating last seven days',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda\n    api: api.getPowerSummaryConsumptionDomesticHotWaterLastSevenDays(),\n\
    \    unit_getter=lambda api: api.\n    getPowerSummaryConsumptionDomesticHotWaterUnit(),\
    \ state_class=\n    SensorStateClass.TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n\
    \    'power_production_current', name='Power production current',\n    native_unit_of_measurement=UnitOfPower.WATT,\
    \ value_getter=lambda api:\n    api.getPowerProductionCurrent(), device_class=SensorDeviceClass.POWER,\n\
    \    state_class=SensorStateClass.MEASUREMENT),\n    ViCareSensorEntityDescription(key='power_production_today',\
    \ name=\n    'Energy production today', native_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR, value_getter=lambda api: api.getPowerProductionToday(),\n\
    \    device_class=SensorDeviceClass.ENERGY, state_class=SensorStateClass.\n  \
    \  TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n    'power_production_this_week',\
    \ name='Energy production this week',\n    native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda\n    api: api.getPowerProductionThisWeek(), device_class=SensorDeviceClass.\n\
    \    ENERGY, state_class=SensorStateClass.TOTAL_INCREASING),\n    ViCareSensorEntityDescription(key='power_production_this_month',\
    \ name=\n    'Energy production this month', native_unit_of_measurement=UnitOfEnergy\n\
    \    .KILO_WATT_HOUR, value_getter=lambda api: api.\n    getPowerProductionThisMonth(),\
    \ device_class=SensorDeviceClass.ENERGY,\n    state_class=SensorStateClass.TOTAL_INCREASING),\n\
    \    ViCareSensorEntityDescription(key='power_production_this_year', name=\n \
    \   'Energy production this year', native_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR, value_getter=lambda api: api.getPowerProductionThisYear\n\
    \    (), device_class=SensorDeviceClass.ENERGY, state_class=SensorStateClass\n\
    \    .TOTAL_INCREASING), ViCareSensorEntityDescription(key=\n    'solar storage\
    \ temperature', name='Solar Storage Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ value_getter=lambda\n    api: api.getSolarStorageTemperature(), device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n    ViCareSensorEntityDescription(key='collector\
    \ temperature', name=\n    'Solar Collector Temperature', native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, value_getter=lambda api: api.\n    getSolarCollectorTemperature(),\
    \ device_class=SensorDeviceClass.\n    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT),\n\
    \    ViCareSensorEntityDescription(key='solar power production today', name=\n\
    \    'Solar energy production today', native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda api: api.\n    getSolarPowerProductionToday(), unit_getter=lambda\
    \ api: api.\n    getSolarPowerProductionUnit(), device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING),\n    ViCareSensorEntityDescription(key='solar\
    \ power production this week',\n    name='Solar energy production this week',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, value_getter=lambda\
    \ api: api.\n    getSolarPowerProductionThisWeek(), unit_getter=lambda api: api.\n\
    \    getSolarPowerProductionUnit(), device_class=SensorDeviceClass.ENERGY,\n \
    \   state_class=SensorStateClass.TOTAL_INCREASING),\n    ViCareSensorEntityDescription(key='solar\
    \ power production this month',\n    name='Solar energy production this month',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, value_getter=lambda\
    \ api: api.\n    getSolarPowerProductionThisMonth(), unit_getter=lambda api: api.\n\
    \    getSolarPowerProductionUnit(), device_class=SensorDeviceClass.ENERGY,\n \
    \   state_class=SensorStateClass.TOTAL_INCREASING),\n    ViCareSensorEntityDescription(key='solar\
    \ power production this year',\n    name='Solar energy production this year',\
    \ native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR, value_getter=lambda\
    \ api: api.\n    getSolarPowerProductionThisYear(), unit_getter=lambda api: api.\n\
    \    getSolarPowerProductionUnit(), device_class=SensorDeviceClass.ENERGY,\n \
    \   state_class=SensorStateClass.TOTAL_INCREASING),\n    ViCareSensorEntityDescription(key='power\
    \ consumption today', name=\n    'Energy consumption today', native_unit_of_measurement=UnitOfEnergy.\n\
    \    KILO_WATT_HOUR, value_getter=lambda api: api.getPowerConsumptionToday(),\n\
    \    unit_getter=lambda api: api.getPowerConsumptionUnit(), device_class=\n  \
    \  SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING\n \
    \   ), ViCareSensorEntityDescription(key='power consumption this week',\n    name='Power\
    \ consumption this week', native_unit_of_measurement=\n    UnitOfEnergy.KILO_WATT_HOUR,\
    \ value_getter=lambda api: api.\n    getPowerConsumptionThisWeek(), unit_getter=lambda\
    \ api: api.\n    getPowerConsumptionUnit(), device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING),\n    ViCareSensorEntityDescription(key='power\
    \ consumption this month', name=\n    'Energy consumption this month', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, value_getter=lambda api: api.\n    getPowerConsumptionThisMonth(),\
    \ unit_getter=lambda api: api.\n    getPowerConsumptionUnit(), device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING),\n    ViCareSensorEntityDescription(key='power\
    \ consumption this year', name=\n    'Energy consumption this year', native_unit_of_measurement=UnitOfEnergy\n\
    \    .KILO_WATT_HOUR, value_getter=lambda api: api.\n    getPowerConsumptionThisYear(),\
    \ unit_getter=lambda api: api.\n    getPowerConsumptionUnit(), device_class=SensorDeviceClass.ENERGY,\n\
    \    state_class=SensorStateClass.TOTAL_INCREASING),\n    ViCareSensorEntityDescription(key='buffer\
    \ top temperature', name=\n    'Buffer top temperature', native_unit_of_measurement=UnitOfTemperature.\n\
    \    CELSIUS, value_getter=lambda api: api.getBufferTopTemperature(),\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT), ViCareSensorEntityDescription(key=\n\
    \    'buffer main temperature', name='Buffer main temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ value_getter=lambda\n    api: api.getBufferMainTemperature(), device_class=SensorDeviceClass.\n\
    \    TEMPERATURE, state_class=SensorStateClass.MEASUREMENT))"
  - "(ViCareSensorEntityDescription(key='supply_temperature', name=\n    'Supply Temperature',\
    \ native_unit_of_measurement=UnitOfTemperature.\n    CELSIUS, value_getter=lambda\
    \ api: api.getSupplyTemperature(),\n    device_class=SensorDeviceClass.TEMPERATURE,\
    \ state_class=\n    SensorStateClass.MEASUREMENT),)"
  - (ViCareSensorEntityDescription, ...)
  - "(VilfoSensorEntityDescription(key=ATTR_LOAD, translation_key=ATTR_LOAD,\n   \
    \ native_unit_of_measurement=PERCENTAGE, icon='mdi:memory', api_key=\n    ATTR_API_DATA_FIELD_LOAD),\
    \ VilfoSensorEntityDescription(key=\n    ATTR_BOOT_TIME, translation_key=ATTR_BOOT_TIME,\
    \ icon=\n    'mdi:timer-outline', api_key=ATTR_API_DATA_FIELD_BOOT_TIME,\n   \
    \ device_class=SensorDeviceClass.TIMESTAMP))"
  - (VilfoSensorEntityDescription, ...)
  - "(VodafoneStationEntityDescription(key='wan_ip4_addr', translation_key=\n    'external_ipv4',\
    \ icon='mdi:earth', is_suitable=lambda info: info[\n    'wan_ip4_addr'] not in\
    \ NOT_AVAILABLE), VodafoneStationEntityDescription\n    (key='wan_ip6_addr', translation_key='external_ipv6',\
    \ icon='mdi:earth',\n    is_suitable=lambda info: info['wan_ip6_addr'] not in\
    \ NOT_AVAILABLE),\n    VodafoneStationEntityDescription(key='vf_internet_key_ip_addr',\n\
    \    translation_key='external_ip_key', icon='mdi:earth', is_suitable=lambda\n\
    \    info: info['vf_internet_key_ip_addr'] not in NOT_AVAILABLE),\n    VodafoneStationEntityDescription(key='inter_ip_address',\n\
    \    translation_key='active_connection', device_class=SensorDeviceClass.\n  \
    \  ENUM, icon='mdi:wan', options=LINE_TYPES, value=_line_connection),\n    VodafoneStationEntityDescription(key='down_str',\
    \ translation_key=\n    'down_stream', device_class=SensorDeviceClass.DATA_RATE,\n\
    \    native_unit_of_measurement=UnitOfDataRate.KILOBYTES_PER_SECOND,\n    entity_category=EntityCategory.DIAGNOSTIC),\n\
    \    VodafoneStationEntityDescription(key='up_str', translation_key=\n    'up_stream',\
    \ device_class=SensorDeviceClass.DATA_RATE,\n    native_unit_of_measurement=UnitOfDataRate.KILOBYTES_PER_SECOND,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC),\n    VodafoneStationEntityDescription(key='fw_version',\
    \ translation_key=\n    'fw_version', icon='mdi:new-box', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC), VodafoneStationEntityDescription(key='phone_num1',\n    translation_key='phone_num1',\
    \ icon='mdi:phone', is_suitable=lambda info:\n    info['phone_unavailable1'] ==\
    \ '0'), VodafoneStationEntityDescription(\n    key='phone_num2', translation_key='phone_num2',\
    \ icon='mdi:phone',\n    is_suitable=lambda info: info['phone_unavailable2'] ==\
    \ '0'),\n    VodafoneStationEntityDescription(key='sys_uptime', translation_key=\n\
    \    'sys_uptime', device_class=SensorDeviceClass.TIMESTAMP, entity_category\n\
    \    =EntityCategory.DIAGNOSTIC, value=_calculate_uptime),\n    VodafoneStationEntityDescription(key='sys_cpu_usage',\
    \ translation_key=\n    'sys_cpu_usage', icon='mdi:chip', native_unit_of_measurement=PERCENTAGE,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, value=lambda coordinator,\n  \
    \  key: float(coordinator.data.sensors[key][:-1])),\n    VodafoneStationEntityDescription(key='sys_memory_usage',\n\
    \    translation_key='sys_memory_usage', icon='mdi:memory',\n    native_unit_of_measurement=PERCENTAGE,\
    \ entity_category=EntityCategory.\n    DIAGNOSTIC, value=lambda coordinator, key:\
    \ float(coordinator.data.\n    sensors[key][:-1])), VodafoneStationEntityDescription(key=\n\
    \    'sys_reboot_cause', translation_key='sys_reboot_cause', icon=\n    'mdi:restart-alert',\
    \ entity_category=EntityCategory.DIAGNOSTIC))"
  - "(WLEDSensorEntityDescription(key='estimated_current', translation_key=\n    'estimated_current',\
    \ native_unit_of_measurement=UnitOfElectricCurrent.\n    MILLIAMPERE, device_class=SensorDeviceClass.CURRENT,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    value_fn=lambda device: device.info.leds.power, exists_fn=lambda device:\n\
    \    bool(device.info.leds.max_power)), WLEDSensorEntityDescription(key=\n   \
    \ 'info_leds_count', translation_key='info_leds_count', entity_category=\n   \
    \ EntityCategory.DIAGNOSTIC, value_fn=lambda device: device.info.leds.\n    count),\
    \ WLEDSensorEntityDescription(key='info_leds_max_power',\n    translation_key='info_leds_max_power',\
    \ native_unit_of_measurement=\n    UnitOfElectricCurrent.MILLIAMPERE, entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, device_class=SensorDeviceClass.CURRENT, value_fn=lambda\n   \
    \ device: device.info.leds.max_power, exists_fn=lambda device: bool(\n    device.info.leds.max_power)),\
    \ WLEDSensorEntityDescription(key='uptime',\n    translation_key='uptime', device_class=SensorDeviceClass.TIMESTAMP,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda device: utcnow() -\n    timedelta(seconds=device.info.uptime)),\
    \ WLEDSensorEntityDescription(key\n    ='free_heap', translation_key='free_heap',\
    \ icon='mdi:memory',\n    native_unit_of_measurement=UnitOfInformation.BYTES,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.DATA_SIZE,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda device: device.\n    info.free_heap), WLEDSensorEntityDescription(key='wifi_signal',\n\
    \    translation_key='wifi_signal', icon='mdi:wifi',\n    native_unit_of_measurement=PERCENTAGE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda device: device.\n\
    \    info.wifi.signal if device.info.wifi else None),\n    WLEDSensorEntityDescription(key='wifi_rssi',\
    \ translation_key=\n    'wifi_rssi', native_unit_of_measurement=\n    SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\
    \ device_class=SensorDeviceClass.\n    SIGNAL_STRENGTH, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda device: device.\n    info.wifi.rssi if device.info.wifi else\
    \ None),\n    WLEDSensorEntityDescription(key='wifi_channel', translation_key=\n\
    \    'wifi_channel', icon='mdi:wifi', entity_category=EntityCategory.\n    DIAGNOSTIC,\
    \ entity_registry_enabled_default=False, value_fn=lambda\n    device: device.info.wifi.channel\
    \ if device.info.wifi else None),\n    WLEDSensorEntityDescription(key='wifi_bssid',\
    \ translation_key=\n    'wifi_bssid', icon='mdi:wifi', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, entity_registry_enabled_default=False, value_fn=lambda\n    device:\
    \ device.info.wifi.bssid if device.info.wifi else None),\n    WLEDSensorEntityDescription(key='ip',\
    \ translation_key='ip', icon=\n    'mdi:ip-network', entity_category=EntityCategory.DIAGNOSTIC,\
    \ value_fn=\n    lambda device: device.info.ip))"
  - (WLEDSensorEntityDescription, ...)
  - (WasherDryer.get_cycle_status_filling, 'cycle_filling')
  - (WasherDryer.get_cycle_status_rinsing, 'cycle_rinsing')
  - (WasherDryer.get_cycle_status_sensing, 'cycle_sensing')
  - (WasherDryer.get_cycle_status_soaking, 'cycle_soaking')
  - (WasherDryer.get_cycle_status_spinning, 'cycle_spinning')
  - (WasherDryer.get_cycle_status_washing, 'cycle_washing')
  - (WasteType, list[date])
  - "(WeatherFlowSensorEntityDescription(key='air_density', translation_key=\n   \
    \ 'air_density', native_unit_of_measurement='kg/m\xB3', state_class=\n    SensorStateClass.MEASUREMENT,\
    \ suggested_display_precision=5,\n    raw_data_conv_fn=lambda raw_data: raw_data.magnitude),\n\
    \    WeatherFlowSensorEntityDescription(key='air_temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    suggested_display_precision=1, raw_data_conv_fn=lambda raw_data:\n    raw_data.magnitude),\
    \ WeatherFlowSensorEntityDescription(key=\n    'dew_point_temperature', translation_key='dew_point',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n \
    \   suggested_display_precision=1, raw_data_conv_fn=lambda raw_data:\n    raw_data.magnitude),\
    \ WeatherFlowSensorEntityDescription(key=\n    'feels_like_temperature', translation_key='feels_like',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n \
    \   suggested_display_precision=1, raw_data_conv_fn=lambda raw_data:\n    raw_data.magnitude),\
    \ WeatherFlowSensorEntityDescription(key=\n    'wet_bulb_temperature', translation_key='wet_bulb_temperature',\n\
    \    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n   \
    \ SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n \
    \   suggested_display_precision=1, raw_data_conv_fn=lambda raw_data:\n    raw_data.magnitude),\
    \ WeatherFlowSensorEntityDescription(key='battery',\n    translation_key='battery_voltage',\
    \ native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT, device_class=SensorDeviceClass.VOLTAGE,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass\n\
    \    .MEASUREMENT, raw_data_conv_fn=lambda raw_data: raw_data.magnitude),\n  \
    \  WeatherFlowSensorEntityDescription(key='illuminance',\n    native_unit_of_measurement=LIGHT_LUX,\
    \ device_class=SensorDeviceClass.\n    ILLUMINANCE, state_class=SensorStateClass.MEASUREMENT,\
    \ raw_data_conv_fn\n    =lambda raw_data: raw_data.magnitude),\n    WeatherFlowSensorEntityDescription(key=\n\
    \    'lightning_strike_average_distance', icon='mdi:lightning-bolt',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.DISTANCE, native_unit_of_measurement=UnitOfLength.\n\
    \    KILOMETERS, translation_key='lightning_average_distance',\n    suggested_display_precision=2,\
    \ raw_data_conv_fn=lambda raw_data:\n    raw_data.magnitude), WeatherFlowSensorEntityDescription(key=\n\
    \    'lightning_strike_count', translation_key='lightning_count', icon=\n    'mdi:lightning-bolt',\
    \ state_class=SensorStateClass.TOTAL,\n    raw_data_conv_fn=lambda raw_data: raw_data),\n\
    \    WeatherFlowSensorEntityDescription(key='precipitation_type',\n    translation_key='precipitation_type',\
    \ device_class=SensorDeviceClass.\n    ENUM, options=['none', 'rain', 'hail',\
    \ 'rain_hail', 'unknown'], icon=\n    'mdi:weather-rainy', raw_data_conv_fn=precipitation_raw_conversion_fn),\n\
    \    WeatherFlowSensorEntityDescription(key=\n    'rain_accumulation_previous_minute',\
    \ icon='mdi:weather-rainy',\n    native_unit_of_measurement=UnitOfPrecipitationDepth.MILLIMETERS,\n\
    \    state_class=SensorStateClass.TOTAL, device_class=SensorDeviceClass.\n   \
    \ PRECIPITATION, imperial_suggested_unit=UnitOfPrecipitationDepth.INCHES,\n  \
    \  raw_data_conv_fn=lambda raw_data: raw_data.magnitude),\n    WeatherFlowSensorEntityDescription(key='rain_rate',\
    \ state_class=\n    SensorStateClass.MEASUREMENT, device_class=SensorDeviceClass.\n\
    \    PRECIPITATION_INTENSITY, icon='mdi:weather-rainy',\n    native_unit_of_measurement=UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR,\n\
    \    raw_data_conv_fn=lambda raw_data: raw_data.magnitude),\n    WeatherFlowSensorEntityDescription(key='relative_humidity',\n\
    \    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    HUMIDITY, state_class=SensorStateClass.MEASUREMENT, raw_data_conv_fn=lambda\n\
    \    raw_data: raw_data.magnitude), WeatherFlowSensorEntityDescription(key=\n\
    \    'rssi', native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\n\
    \    device_class=SensorDeviceClass.SIGNAL_STRENGTH, entity_category=\n    EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass.MEASUREMENT,\n    entity_registry_enabled_default=False,\
    \ event_subscriptions=[\n    EVENT_STATUS_UPDATE], raw_data_conv_fn=lambda raw_data:\
    \ raw_data.\n    magnitude), WeatherFlowSensorEntityDescription(key='station_pressure',\n\
    \    translation_key='station_pressure', native_unit_of_measurement=\n    UnitOfPressure.MBAR,\
    \ device_class=SensorDeviceClass.PRESSURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ suggested_display_precision=5,\n    imperial_suggested_unit=UnitOfPressure.INHG,\
    \ raw_data_conv_fn=lambda\n    raw_data: raw_data.magnitude), WeatherFlowSensorEntityDescription(key=\n\
    \    'solar_radiation', native_unit_of_measurement=UnitOfIrradiance.\n    WATTS_PER_SQUARE_METER,\
    \ device_class=SensorDeviceClass.IRRADIANCE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ raw_data_conv_fn=lambda\n    raw_data: raw_data.magnitude), WeatherFlowSensorEntityDescription(key=\n\
    \    'up_since', translation_key='uptime', device_class=SensorDeviceClass.\n \
    \   TIMESTAMP, entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ event_subscriptions=[\n    EVENT_STATUS_UPDATE], raw_data_conv_fn=lambda raw_data:\
    \ raw_data),\n    WeatherFlowSensorEntityDescription(key='uv', translation_key='uv_index',\n\
    \    native_unit_of_measurement=UV_INDEX, state_class=SensorStateClass.\n    MEASUREMENT,\
    \ raw_data_conv_fn=lambda raw_data: raw_data),\n    WeatherFlowSensorEntityDescription(key='vapor_pressure',\n\
    \    translation_key='vapor_pressure', native_unit_of_measurement=\n    UnitOfPressure.MBAR,\
    \ device_class=SensorDeviceClass.PRESSURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ imperial_suggested_unit=\n    UnitOfPressure.INHG, suggested_display_precision=5,\
    \ raw_data_conv_fn=lambda\n    raw_data: raw_data.magnitude), WeatherFlowSensorEntityDescription(key=\n\
    \    'wind_gust', translation_key='wind_gust', icon='mdi:weather-windy',\n   \
    \ device_class=SensorDeviceClass.WIND_SPEED, native_unit_of_measurement=\n   \
    \ UnitOfSpeed.METERS_PER_SECOND, state_class=SensorStateClass.MEASUREMENT,\n \
    \   suggested_display_precision=2, raw_data_conv_fn=lambda raw_data:\n    raw_data.magnitude),\
    \ WeatherFlowSensorEntityDescription(key='wind_lull',\n    translation_key='wind_lull',\
    \ icon='mdi:weather-windy', device_class=\n    SensorDeviceClass.WIND_SPEED, native_unit_of_measurement=UnitOfSpeed.\n\
    \    METERS_PER_SECOND, state_class=SensorStateClass.MEASUREMENT,\n    suggested_display_precision=2,\
    \ raw_data_conv_fn=lambda raw_data:\n    raw_data.magnitude), WeatherFlowSensorEntityDescription(key=\n\
    \    'wind_speed', device_class=SensorDeviceClass.WIND_SPEED, icon=\n    'mdi:weather-windy',\
    \ event_subscriptions=[EVENT_RAPID_WIND,\n    EVENT_OBSERVATION], native_unit_of_measurement=UnitOfSpeed.\n\
    \    METERS_PER_SECOND, state_class=SensorStateClass.MEASUREMENT,\n    suggested_display_precision=2,\
    \ raw_data_conv_fn=lambda raw_data:\n    raw_data.magnitude), WeatherFlowSensorEntityDescription(key=\n\
    \    'wind_average', translation_key='wind_speed_average', icon=\n    'mdi:weather-windy',\
    \ device_class=SensorDeviceClass.WIND_SPEED,\n    native_unit_of_measurement=UnitOfSpeed.METERS_PER_SECOND,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, suggested_display_precision=2,\n\
    \    raw_data_conv_fn=lambda raw_data: raw_data.magnitude),\n    WeatherFlowSensorEntityDescription(key='wind_direction',\n\
    \    translation_key='wind_direction', icon='mdi:compass-outline',\n    native_unit_of_measurement=DEGREE,\
    \ state_class=SensorStateClass.\n    MEASUREMENT, event_subscriptions=[EVENT_RAPID_WIND,\
    \ EVENT_OBSERVATION],\n    raw_data_conv_fn=lambda raw_data: raw_data.magnitude),\n\
    \    WeatherFlowSensorEntityDescription(key='wind_direction_average',\n    translation_key='wind_direction_average',\
    \ icon='mdi:compass-outline',\n    native_unit_of_measurement=DEGREE, state_class=SensorStateClass.\n\
    \    MEASUREMENT, raw_data_conv_fn=lambda raw_data: raw_data.magnitude))"
  - (WeatherFlowSensorEntityDescription, ...)
  - "(WhirlpoolSensorEntityDescription(key='state', translation_key=\n    'whirlpool_machine',\
    \ device_class=SensorDeviceClass.ENUM, options=list(\n    MACHINE_STATE.values())\
    \ + [value for _, value in CYCLE_FUNC] + [\n    DOOR_OPEN], value_fn=washer_state),\
    \ WhirlpoolSensorEntityDescription(\n    key='DispenseLevel', translation_key='whirlpool_tank',\n\
    \    entity_registry_enabled_default=False, device_class=SensorDeviceClass.\n\
    \    ENUM, options=list(TANK_FILL.values()), value_fn=lambda WasherDryer:\n  \
    \  TANK_FILL.get(WasherDryer.get_attribute(\n    'WashCavity_OpStatusBulkDispense1Level'))))"
  - (WhirlpoolSensorEntityDescription, ...)
  - "(WhoisSensorEntityDescription(key='admin', translation_key='admin', icon=\n \
    \   'mdi:account-star', entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda domain: getattr(\n    domain, 'admin', None)), WhoisSensorEntityDescription(key=\n\
    \    'creation_date', translation_key='creation_date', device_class=\n    SensorDeviceClass.TIMESTAMP,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    value_fn=lambda domain: _ensure_timezone(domain.creation_date)),\n\
    \    WhoisSensorEntityDescription(key='days_until_expiration',\n    translation_key='days_until_expiration',\
    \ icon='mdi:calendar-clock',\n    native_unit_of_measurement=UnitOfTime.DAYS,\
    \ value_fn=\n    _days_until_expiration), WhoisSensorEntityDescription(key=\n\
    \    'expiration_date', translation_key='expiration_date', device_class=\n   \
    \ SensorDeviceClass.TIMESTAMP, entity_category=EntityCategory.DIAGNOSTIC,\n  \
    \  value_fn=lambda domain: _ensure_timezone(domain.expiration_date)),\n    WhoisSensorEntityDescription(key='last_updated',\
    \ translation_key=\n    'last_updated', device_class=SensorDeviceClass.TIMESTAMP,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, value_fn=lambda domain:\n    _ensure_timezone(domain.last_updated)),\
    \ WhoisSensorEntityDescription(\n    key='owner', translation_key='owner', icon='mdi:account',\n\
    \    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ value_fn=lambda domain: getattr(\n    domain, 'owner', None)), WhoisSensorEntityDescription(key='registrant',\n\
    \    translation_key='registrant', icon='mdi:account-edit', entity_category=\n\
    \    EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False,\n    value_fn=lambda\
    \ domain: getattr(domain, 'registrant', None)),\n    WhoisSensorEntityDescription(key='registrar',\
    \ translation_key=\n    'registrar', icon='mdi:store', entity_category=EntityCategory.\n\
    \    DIAGNOSTIC, entity_registry_enabled_default=False, value_fn=lambda\n    domain:\
    \ domain.registrar if domain.registrar else None),\n    WhoisSensorEntityDescription(key='reseller',\
    \ translation_key='reseller',\n    icon='mdi:store', entity_category=EntityCategory.DIAGNOSTIC,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda domain: getattr(\n\
    \    domain, 'reseller', None)))"
  - (WhoisSensorEntityDescription, ...)
  - "(WithingsActivityDataUpdateCoordinator, WithingsActivitySensorEntityDescription\n\
    \    )"
  - (WithingsGoalsDataUpdateCoordinator, WithingsGoalsSensorEntityDescription)
  - "(WithingsMeasurementDataUpdateCoordinator,\n    WithingsMeasurementSensorEntityDescription)"
  - (WithingsSleepDataUpdateCoordinator, WithingsSleepSensorEntityDescription)
  - (WithingsWorkoutDataUpdateCoordinator, WithingsWorkoutSensorEntityDescription)
  - "(YaleXSBLESensorEntityDescription(key='', device_class=SensorDeviceClass.\n \
    \   SIGNAL_STRENGTH, entity_category=EntityCategory.DIAGNOSTIC, state_class\n\
    \    =SensorStateClass.MEASUREMENT, has_entity_name=True,\n    native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT,\n\
    \    entity_registry_enabled_default=False, value_fn=lambda state, info,\n   \
    \ connection: connection.rssi), YaleXSBLESensorEntityDescription(key=\n    'battery_level',\
    \ device_class=SensorDeviceClass.BATTERY,\n    entity_category=EntityCategory.DIAGNOSTIC,\
    \ state_class=SensorStateClass\n    .MEASUREMENT, has_entity_name=True, native_unit_of_measurement=\n\
    \    PERCENTAGE, value_fn=lambda state, info, connection: state.battery.\n   \
    \ percentage if state.battery else None),\n    YaleXSBLESensorEntityDescription(key='battery_voltage',\
    \ translation_key\n    ='battery_voltage', device_class=SensorDeviceClass.VOLTAGE,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass\n\
    \    .MEASUREMENT, has_entity_name=True, native_unit_of_measurement=\n    UnitOfElectricPotential.VOLT,\
    \ entity_registry_enabled_default=False,\n    value_fn=lambda state, info, connection:\
    \ state.battery.voltage if state\n    .battery else None))"
  - (YaleXSBLESensorEntityDescription, ...)
  - "(YoLinkSensorEntityDescription(key='battery', device_class=\n    SensorDeviceClass.BATTERY,\
    \ native_unit_of_measurement=PERCENTAGE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ value=cvt_battery, exists_fn=\n    lambda device: device.device_type in BATTERY_POWER_SENSOR,\n\
    \    should_update_entity=lambda value: value is not None),\n    YoLinkSensorEntityDescription(key='humidity',\
    \ device_class=\n    SensorDeviceClass.HUMIDITY, native_unit_of_measurement=PERCENTAGE,\n\
    \    state_class=SensorStateClass.MEASUREMENT, exists_fn=lambda device: \n   \
    \ device.device_type in [ATTR_DEVICE_TH_SENSOR]),\n    YoLinkSensorEntityDescription(key='temperature',\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=\n\
    \    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n  \
    \  exists_fn=lambda device: device.device_type in [ATTR_DEVICE_TH_SENSOR]),\n\
    \    YoLinkSensorEntityDescription(key='devTemperature', device_class=\n    SensorDeviceClass.TEMPERATURE,\
    \ native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS, state_class=SensorStateClass.MEASUREMENT,\n\
    \    exists_fn=lambda device: device.device_type in\n    MCU_DEV_TEMPERATURE_SENSOR,\
    \ should_update_entity=lambda value: value is not\n    None), YoLinkSensorEntityDescription(key='loraInfo',\
    \ device_class=\n    SensorDeviceClass.SIGNAL_STRENGTH, native_unit_of_measurement=\n\
    \    SIGNAL_STRENGTH_DECIBELS_MILLIWATT, value=lambda value: value['signal'] if\n\
    \    value is not None else None, state_class=SensorStateClass.MEASUREMENT,\n\
    \    entity_category=EntityCategory.DIAGNOSTIC,\n    entity_registry_enabled_default=False,\
    \ should_update_entity=lambda\n    value: value is not None), YoLinkSensorEntityDescription(key='state',\n\
    \    translation_key='power_failure_alarm', device_class=SensorDeviceClass.\n\
    \    ENUM, icon='mdi:flash', options=['normal', 'alert', 'off'], exists_fn=\n\
    \    lambda device: device.device_type in ATTR_DEVICE_POWER_FAILURE_ALARM),\n\
    \    YoLinkSensorEntityDescription(key='mute', translation_key=\n    'power_failure_alarm_mute',\
    \ device_class=SensorDeviceClass.ENUM, icon=\n    'mdi:volume-mute', options=['muted',\
    \ 'unmuted'], exists_fn=lambda\n    device: device.device_type in ATTR_DEVICE_POWER_FAILURE_ALARM,\
    \ value=lambda\n    value: 'muted' if value is True else 'unmuted'),\n    YoLinkSensorEntityDescription(key='sound',\
    \ translation_key=\n    'power_failure_alarm_volume', device_class=SensorDeviceClass.ENUM,\
    \ icon\n    ='mdi:volume-high', options=['low', 'medium', 'high'], exists_fn=lambda\n\
    \    device: device.device_type in ATTR_DEVICE_POWER_FAILURE_ALARM, value=\n \
    \   cvt_volume), YoLinkSensorEntityDescription(key='beep', translation_key=\n\
    \    'power_failure_alarm_beep', device_class=SensorDeviceClass.ENUM, icon=\n\
    \    'mdi:bullhorn', options=['enabled', 'disabled'], exists_fn=lambda\n    device:\
    \ device.device_type in ATTR_DEVICE_POWER_FAILURE_ALARM, value=lambda\n    value:\
    \ 'enabled' if value is True else 'disabled'))"
  - (YoLinkSensorEntityDescription, ...)
  - "(ZamgSensorEntityDescription(key='pressure', name='Pressure',\n    native_unit_of_measurement=UnitOfPressure.HPA,\
    \ device_class=\n    SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    para_name='P'), ZamgSensorEntityDescription(key='pressure_sealevel',\n  \
    \  name='Pressure at Sea Level', native_unit_of_measurement=UnitOfPressure\n \
    \   .HPA, device_class=SensorDeviceClass.PRESSURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ para_name='PRED'),\n    ZamgSensorEntityDescription(key='humidity', name='Humidity',\n\
    \    native_unit_of_measurement=PERCENTAGE, device_class=SensorDeviceClass.\n\
    \    HUMIDITY, state_class=SensorStateClass.MEASUREMENT, para_name='RFAM'),\n\
    \    ZamgSensorEntityDescription(key='wind_speed', name='Wind Speed',\n    native_unit_of_measurement=UnitOfSpeed.METERS_PER_SECOND,\
    \ device_class=\n    SensorDeviceClass.WIND_SPEED, state_class=SensorStateClass.MEASUREMENT,\n\
    \    para_name='FFAM'), ZamgSensorEntityDescription(key='wind_bearing', name\n\
    \    ='Wind Bearing', native_unit_of_measurement=DEGREE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ para_name='DD'),\n    ZamgSensorEntityDescription(key='wind_max_speed', name='Top\
    \ Wind Speed',\n    native_unit_of_measurement=UnitOfSpeed.METERS_PER_SECOND,\
    \ device_class=\n    SensorDeviceClass.WIND_SPEED, state_class=SensorStateClass.MEASUREMENT,\n\
    \    para_name='FFX'), ZamgSensorEntityDescription(key='wind_max_bearing',\n \
    \   name='Top Wind Bearing', native_unit_of_measurement=DEGREE, state_class\n\
    \    =SensorStateClass.MEASUREMENT, para_name='DDX'),\n    ZamgSensorEntityDescription(key='sun_last_10min',\
    \ name=\n    'Sun Last 10 Minutes', native_unit_of_measurement=UnitOfTime.SECONDS,\n\
    \    state_class=SensorStateClass.MEASUREMENT, para_name='SO'),\n    ZamgSensorEntityDescription(key='temperature',\
    \ name='Temperature',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS,\
    \ device_class=\n    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    para_name='TL'), ZamgSensorEntityDescription(key='temperature_average',\n\
    \    name='Temperature Average', native_unit_of_measurement=\n    UnitOfTemperature.CELSIUS,\
    \ device_class=SensorDeviceClass.TEMPERATURE,\n    state_class=SensorStateClass.MEASUREMENT,\
    \ para_name='TLAM'),\n    ZamgSensorEntityDescription(key='precipitation', name='Precipitation',\n\
    \    native_unit_of_measurement=UnitOfPrecipitationDepth.MILLIMETERS,\n    device_class=SensorDeviceClass.PRECIPITATION,\
    \ state_class=\n    SensorStateClass.MEASUREMENT, para_name='RR'),\n    ZamgSensorEntityDescription(key='snow',\
    \ name='Snow',\n    native_unit_of_measurement=UnitOfPrecipitationDepth.CENTIMETERS,\n\
    \    device_class=SensorDeviceClass.PRECIPITATION, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ para_name='SCHNEE'),\n    ZamgSensorEntityDescription(key='dewpoint', name='Dew\
    \ Point',\n    native_unit_of_measurement=UnitOfTemperature.CELSIUS, device_class=\n\
    \    SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT,\n\
    \    para_name='TP'), ZamgSensorEntityDescription(key='dewpoint_average',\n  \
    \  name='Dew Point Average', native_unit_of_measurement=UnitOfTemperature.\n \
    \   CELSIUS, device_class=SensorDeviceClass.TEMPERATURE, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ para_name='TPAM'))"
  - (ZamgSensorEntityDescription, ...)
  - "(ZeversolarEntityDescription(key='pac', icon='mdi:solar-power-variant',\n   \
    \ native_unit_of_measurement=UnitOfPower.WATT, state_class=\n    SensorStateClass.MEASUREMENT,\
    \ entity_category=EntityCategory.DIAGNOSTIC,\n    device_class=SensorDeviceClass.POWER,\
    \ value_fn=lambda data: data.pac),\n    ZeversolarEntityDescription(key='energy_today',\
    \ translation_key=\n    'energy_today', icon='mdi:home-battery', native_unit_of_measurement=\n\
    \    UnitOfEnergy.KILO_WATT_HOUR, state_class=SensorStateClass.\n    TOTAL_INCREASING,\
    \ device_class=SensorDeviceClass.ENERGY, value_fn=lambda\n    data: data.energy_today))"
  - ([APCUpdateSensor], float | int | str)
  - ([AbodeSense], float)
  - ([AbodeSense], str)
  - ([Activity], StateType)
  - ([AdGuardHome], Coroutine[Any, Any, int | float])
  - ([Any, Any], Any)
  - ([Any], Any)
  - ([Any], StateType | date | datetime | Decimal)
  - ([Any], StateType | datetime)
  - ([Any], StateType)
  - ([Any], bool)
  - ([Any], dict[Any, StateType])
  - ([Any], dict[str, Any] | None)
  - ([Any], dict[str, str])
  - ([Any], float)
  - ([Any], str | None)
  - ([Appliance], float | None)
  - ([BaseShade], Any)
  - ([BaseShade], bool)
  - ([BaseShade], int)
  - ([BrotherSensors], StateType | datetime)
  - ([CameraData], StateType | datetime)
  - ([Characteristic], bool)
  - ([Characteristic], str)
  - ([Command | list[Command]], Any)
  - ([ConnectionInfo], bool)
  - ([CoordinatorDataT], StateType)
  - ([DataUpdateCoordinator[KrakenResponse], str], float | int)
  - ([Data], StateType)
  - ([Data], bool)
  - ([DevOpsBuild], Any)
  - ([DevOpsBuild], StateType)
  - ([DeviceProp], StateType | datetime.datetime)
  - ([Device], Any | None)
  - ([Device], Any)
  - ([Device], StateType)
  - ([Device], int | None)
  - ([Device], int | float | str | None)
  - ([Device], str | None)
  - ([Diffuser], bool)
  - ([Diffuser], int | str)
  - ([Domain], datetime | int | str | None)
  - ([Dremel3DPrinter, str], StateType | datetime)
  - ([Dremel3DPrinter, str], bool)
  - ([EasyEnergyData], float | datetime | None)
  - ([ElgatoData], bool)
  - ([ElgatoData], float | int | None)
  - ([EnergyZeroData], float | datetime | None)
  - ([EnvoyEnchargeAggregate], int)
  - ([EnvoyEnchargePower], int | float)
  - ([EnvoyEncharge], datetime.datetime | int | float)
  - ([EnvoyEnpower], datetime.datetime | int | float)
  - ([EnvoyInverter], datetime.datetime | float)
  - ([EnvoySystemConsumption], int)
  - ([EnvoySystemProduction], int)
  - ([Estimate], Any)
  - ([FitbitUnitSystem], str | None)
  - ([Forecast], str | float)
  - ([FritzhomeDevice], EntityCategory | None)
  - ([FritzhomeDevice], StateType | datetime)
  - ([GeocachingStatus], str | int | None)
  - ([GiosSensors], StateType)
  - ([Goals], StateType)
  - ([GoodweUpdateCoordinator, str], Any)
  - ([GoodweUpdateCoordinator], bool)
  - ([HeatMeterResponse], StateType | datetime)
  - "([HomeAssistant, bluetooth.BluetoothServiceInfoBleak], str | int | float | None\n\
    \    )"
  - ([Hop], datetime)
  - ([Host, int], bool)
  - ([Host, int], int)
  - ([Host], bool)
  - ([Host], int | None)
  - ([IRobotEntity], StateType)
  - ([IntellifirePollData], int | str | datetime | None)
  - ([JellyfinDataT], StateType)
  - ([JustNimbusCoordinator], Any)
  - ([KNXModule], StateType | datetime)
  - ([KaleidescapeDevice], StateType)
  - ([Launch | Event], datetime | int | str | None)
  - ([Launch | Event], dict[str, Any] | None)
  - "([LidarrSensorEntityDescription[T], LidarrRootFolder], tuple[\n    LidarrSensorEntityDescription[T],\
    \ str] | None)"
  - ([Location, IPMA_API], Coroutine[Location, IPMA_API, int | None])
  - ([LockState, LockInfo, ConnectionInfo], int | float | None)
  - ([LyricDevice], StateType | datetime)
  - ([LyricDevice], bool)
  - ([Marker], StateType | datetime)
  - ([Marker], dict[Any, StateType])
  - ([MeaterProbe | None], bool)
  - ([MeaterProbe], datetime | float | str | None)
  - ([Meter], float)
  - ([MinecraftServerData], MutableMapping[str, Any])
  - ([MinecraftServerData], StateType)
  - ([MotionSensor], StateType)
  - ([MyStromSwitch], float | None)
  - ([NAMSensors], StateType | datetime)
  - ([OVODailyUsage], StateType | datetime)
  - ([OverkizStateType], StateType)
  - ([PECOCoordinatorData], dict[str, str])
  - ([PECOCoordinatorData], int | str)
  - ([Printer], StateType | datetime)
  - ([Printer], dict[Any, StateType])
  - ([PureEnergieData], int | float)
  - ([PyDroidIPCam], StateType)
  - ([PyDroidIPCam], str | None)
  - ([PyTautulliApiHomeStats, PyTautulliApiActivity, str], StateType)
  - ([PyTautulliApiSession], StateType)
  - "([RadarrSensorEntityDescription[T], RootFolder], tuple[\n    RadarrSensorEntityDescription[T],\
    \ str] | None)"
  - ([Reading, str, int], datetime | float | None)
  - ([ReceivePayloadType, PayloadSentinel], ReceivePayloadType)
  - ([ReceivePayloadType], ReceivePayloadType)
  - ([RenaultSensor[T]], StateType | datetime)
  - ([RenaultSensor[T]], str)
  - ([RenaultVehicleProxy], bool)
  - ([RokuDevice], str | None)
  - ([SensiboDevice], StateType | datetime)
  - ([SensiboDevice], dict[str, str | bool | None] | None)
  - ([Sensor, str], float | int | str | None)
  - ([SensorModel], float | str | None)
  - ([SettingsInfo, StatusInfo], bool)
  - ([SkybellDevice], StateType | datetime)
  - ([SleepSummary], StateType)
  - ([SonarrDataT], StateType)
  - ([SonarrDataT], dict[str, str])
  - ([StarlinkData], datetime | StateType)
  - ([StateType], SensorDeviceClass | None)
  - ([StateType], StateType)
  - ([StateType], str)
  - ([StateType], tuple[StateType, dict[str, Any]])
  - ([StatusInfo], int | None)
  - ([Status], int | float | None)
  - ([SteamistStatus], int | None)
  - ([Sun], StateType | datetime)
  - ([T, str], str | int | datetime)
  - ([T, str], str | int)
  - ([T], bool)
  - ([T], datetime | StateType)
  - ([T], dict[str, str] | None)
  - ([TailscaleDevice], datetime | str | None)
  - ([TrainData], StateType | datetime)
  - ([TrydanData], float)
  - ([UniFiController, ApiItemT], datetime | float | str | None)
  - ([Valve], Any)
  - ([VeSyncAirBypass | VeSyncOutlet | VeSyncSwitch], None)
  - ([VeSyncAirBypass | VeSyncOutlet | VeSyncSwitch], StateType)
  - ([VeSyncAirBypass | VeSyncOutlet | VeSyncSwitch], bool)
  - ([Vehicle], date | str | float | None)
  - ([VenstarDataUpdateCoordinator, str], Any)
  - ([WAQIAirQuality], StateType)
  - ([WAQIAirQuality], bool)
  - ([WLEDDevice], bool)
  - ([WLEDDevice], datetime | StateType)
  - ([WeatherFlowDevice], datetime | StateType)
  - ([Workout], StateType)
  - ([YoLinkDevice], bool)
  - ([], Coroutine[Any, Any, bool])
  - ([], None)
  - ([], StateType | datetime)
  - ([_DataT], int)
  - ([_RobotT], bool)
  - ([_T], StateType)
  - ([_T], int | None)
  - ([datetime], datetime)
  - ([dict[str, Any], dict[str, Any], dict[str, Any], dict[str, Any]], float | int)
  - ([dict[str, Any]], Any)
  - ([dict[str, Any]], Mapping[str, Any] | None)
  - ([dict[str, Any]], StateType | datetime)
  - ([dict[str, Any]], StateType | list)
  - ([dict[str, Any]], StateType)
  - ([dict[str, Any]], bool)
  - ([dict[str, Any]], dict[str, Any])
  - ([dict[str, Any]], int | str)
  - ([dict[str, Any]], str | int | float | None)
  - ([dict[str, float]], Any)
  - ([dict], bool)
  - ([dict], float | int | None)
  - ([float | None, str], float)
  - ([float | int], float)
  - ([float, str, str], float)
  - ([float], float)
  - ([iBeaconAdvertisement], str | int | None)
  - ([int | str], int | str)
  - ([list[int]], str | None)
  - ([list[tuple[str, float, State]]], tuple[dict[str, str | None], float | None])
  - ([str | None], datetime | None)
  - ([str | int | float], str | int | float | datetime)
  - ([str, Mapping[str, Any]], str)
  - ([str], Any)
  - ([str], str)
  - ([str], tuple[StateType, str | None])
  - ([zeversolar.ZeverSolarData], zeversolar.kWh | zeversolar.Watt)
  - (_, display)
  - (_, sensor_value)
  - (_, sensor_value, _)
  - (_T, _ED)
  - (ac_key, ac_device)
  - (actuator_id, actuator)
  - (adapter.source_type, adapter.flow_type, config[adapter.stat_energy_key])
  - (add_gas_sensor_5B(telegram),)
  - (aidoo_id, aidoo_data)
  - (ain, device)
  - "(aiohttp.client_exceptions.ClientConnectorError, asyncio.TimeoutError,\n    FoobotClient.TooManyRequests,\
    \ FoobotClient.InternalError)"
  - "(aiohttp.client_exceptions.ClientConnectorError, asyncio.TimeoutError, self\n\
    \    ._client.TooManyRequests, self._client.InternalError)"
  - (all_values, _)
  - (asyncio.TimeoutError, aiohttp.ClientError)
  - (attr, attr_key)
  - (attr, val)
  - (attributes, last)
  - (attributes, val)
  - (balance_accounts, holdings_accounts)
  - (bytes, bytearray)
  - (channel_number, channel)
  - (clusters.FlowMeasurement.Attributes.MeasuredValue,)
  - (clusters.IlluminanceMeasurement.Attributes.MeasuredValue,)
  - (clusters.PowerSource.Attributes.BatPercentRemaining,)
  - (clusters.PressureMeasurement.Attributes.MeasuredValue,)
  - (clusters.RelativeHumidityMeasurement.Attributes.MeasuredValue,)
  - (clusters.TemperatureMeasurement.Attributes.MeasuredValue,)
  - (code_name, device)
  - (conf, coordinator, rest)
  - (coordinator, project)
  - (coordinator_type, description)
  - (coordinator_type, sensors)
  - (data_description_key, data_unit)
  - (datatype, sensor_info)
  - (datetime, datetime, Decimal)
  - (desc, name)
  - (description.device_class, description.native_unit_of_measurement)
  - (details, overview, inventory, flow, energy)
  - (dev_id, device)
  - (dev_name, properties)
  - (device, device_config)
  - (device_id, config)
  - (device_id, coordinator)
  - (device_id, device)
  - (device_id, device_data)
  - (device_id, device_info)
  - (device_id, sensor_type)
  - (device_key, description)
  - (device_key, sensor_values)
  - (device_name, device)
  - (devices, plant_id)
  - (dict, list)
  - (dict[str, str | None], float | None)
  - (dict[str, str | None], float)
  - (dr.CONNECTION_BLUETOOTH, data.address)
  - (dr.CONNECTION_BLUETOOTH, device.address)
  - (dr.CONNECTION_NETWORK_MAC, coordinator.mac_address)
  - (dr.CONNECTION_NETWORK_MAC, mac_address)
  - (dr.CONNECTION_NETWORK_MAC, self._device.mac_address)
  - (dr.CONNECTION_NETWORK_MAC, self._sensor_data.hub_mac_address)
  - (dummy_temp, dummy_targ, battery, dummy_output)
  - (electricity_id, obis)
  - (entity_description.device_class, UNIT_CONVERSION[uom])
  - (entity_description.device_class, uom)
  - (entity_id, float(state.state), state)
  - (entity_id, self.states[entity_id])
  - (entity_id, state_f, state)
  - (entity_id, val)
  - (entry, data)
  - (errindication, _, _, _)
  - (errindication, errstatus, errindex, restable)
  - (float(value) / 10 if value is not None else None, UnitOfFrequency.MEGAHERTZ)
  - (float, float)
  - (float, float, float)
  - (float, int)
  - (float, int, Decimal)
  - (floor, ceiling)
  - (func, cycle_name)
  - (gtfs_root, _)
  - "(hc.SENSOR_STATUS_IP, hc.SENSOR_STATUS_RSSI, hc.SENSOR_STATUS_SIGNAL, hc.\n \
    \   SENSOR_STATUS_VERSION)"
  - (heat_control_id, heat_control)
  - (host, port)
  - (hours, minutes)
  - (hours_str, minutes_str)
  - (hpilo.IloError, hpilo.IloCommunicationError, hpilo.IloLoginFailed)
  - (i, _departure)
  - (i, call)
  - (i, entry)
  - (i, err)
  - (i, j)
  - (i, sensor)
  - (i, warning)
  - (id, name)
  - (id_len, item_kind)
  - (idx, attrs)
  - (idx, dev)
  - (idx, measurement)
  - (idx, value)
  - (index, alert)
  - (index, gpu)
  - (index, item)
  - (index, marker)
  - (int(hours_str), int(minutes_str))
  - (int, EmonitorChannel)
  - (int, TorqueSensor)
  - (int, dict[str, int | float])
  - (int, float)
  - (int, str)
  - (ios.ATTR_BATTERY_STATE_FULL, ios.ATTR_BATTERY_STATE_UNPLUGGED)
  - (ios.DOMAIN, self._device[ios.ATTR_DEVICE][ios.ATTR_DEVICE_PERMANENT_ID])
  - (item_id, item)
  - (k, _)
  - (k, v)
  - (key, build)
  - (key, desc)
  - (key, entity)
  - (key, sensor)
  - (key, val)
  - (key, value)
  - (lat, lon)
  - (latitude, longitude)
  - (list, list)
  - (listener_id, listener)
  - (mac, device)
  - (mac_address, station)
  - (map_key, map_value)
  - (measurement.unit, measurement.is_monotonic)
  - (measurement_id, measurement)
  - (meter_id, meter)
  - (milliseconds, tzone)
  - (name, device)
  - (name, entries)
  - (name, icon)
  - (node, control)
  - (nut_key, info_key)
  - (object_id, entity_cfg)
  - (old_sensor, new_sensor)
  - (old_state.last_updated, new_state.last_updated, new_derivative)
  - (parsed_species_data, quality_list)
  - (path_index, path_number)
  - (period_usage, period_price)
  - (pid, name)
  - (pinnum, pin)
  - (plant_money_text, currency)
  - (poolidx, pool)
  - (port, adc_def)
  - (port_id, port_values)
  - (prog, args)
  - (pump_index, pump_data)
  - (reader, _)
  - (requests.codes.unauthorized, requests.codes.bad_request)
  - (requests.exceptions.ConnectionError, requests.exceptions.HTTPError)
  - (requests.exceptions.RequestException, ValueError)
  - (requests.exceptions.RequestException, ValueError, KeyError)
  - (retrieve_success, period_usage, period_price)
  - (rjpl.rjplConnectionError, rjpl.rjplHTTPError)
  - (robot_type, entity_descriptions)
  - (route, departures)
  - (row, idx, unit)
  - (s.state, s.last_updated)
  - (self._attr_native_value, inferred_unit)
  - (self._attr_native_value, price_level, self._last_updated)
  - (self._attr_native_value, self._attr_icon)
  - (self._day_usage, self._day_price)
  - (self._decode, self.unit)
  - (self._dewpoint, self._calib_factor)
  - (self._extra_state_attribute, self._attr_native_value)
  - (self._indoor_temp, self._indoor_hum, self._outdoor_temp)
  - (self._month_usage, self._month_price)
  - "(self._name, self._unit_of_measurement, self._icon, self._type, self.\n    _device_class)"
  - (self._state, self._unit)
  - (self._station_id, self._fuel_type)
  - (self._week_usage, self._week_price)
  - (self._year_usage, self._year_price)
  - (self.agency, self.route, self.stop, message)
  - (self.duration, distance)
  - (self.entity_description.key, self._argument)
  - (self.max_entity_id, self.max_value)
  - (self.min_entity_id, self.min_value)
  - (sensor, (idx, measurement))
  - (sensor, description)
  - (sensor, device)
  - (sensor, value)
  - (sensor,)
  - (sensor_class, service)
  - (sensor_id, channel_id)
  - (sensor_id, sensor)
  - (sensor_id, sensor_data)
  - (sensor_id, sensor_value)
  - (sensor_id, sensor_value, _)
  - (sensor_label, params)
  - (sensor_name, (row, idx, unit))
  - (sensor_type, is_production, unit)
  - (sensor_type, param)
  - (sensor_type, sensor)
  - (sensor_type, sensor_value)
  - (sensor_type, sensors)
  - (sensors,)
  - (serial.serialutil.SerialException, OSError)
  - (serial_number, values)
  - (sid, session)
  - (start, end)
  - (start, end, value)
  - (state, value, update_time)
  - (state_key, entity_class)
  - (station_id, fuel_type)
  - (station_id, station_uid)
  - (status, feed_entries)
  - (status, quantity)
  - (str | None, float | None)
  - (str | datetime | None, str | None, datetime | None)
  - (str, ...)
  - (str, Any)
  - (str, BMWSensorEntityDescription)
  - "(str, Callable[[list[tuple[str, float, State]]], tuple[dict[str, str | None\n\
    \    ], float | None]])"
  - (str, CurrentInterval)
  - (str, DSMRObject)
  - (str, DataUpdateCoordinator[Any])
  - (str, DeviceInfo)
  - (str, DevoloSensorEntityDescription[Any])
  - (str, GitHubDataUpdateCoordinator)
  - (str, GoodweSensorEntityDescription)
  - (str, HomeKitSensorEntityDescription)
  - (str, HuaweiSensorEntityDescription)
  - (str, HuaweiSensorGroup)
  - (str, IotaWattSensorEntityDescription)
  - (str, JellyfinSensorEntityDescription)
  - (str, LidarrDataUpdateCoordinator[Any])
  - (str, LidarrSensorEntityDescription[Any])
  - (str, MeaterProbe)
  - (str, ONVIFSensor)
  - (str, OncueDevice)
  - (str, OpenUvCoordinator)
  - (str, PrusaLinkUpdateCoordinator)
  - (str, RadarrDataUpdateCoordinator[Any])
  - (str, RadarrSensorEntityDescription[Any])
  - (str, RitualsDataUpdateCoordinator)
  - (str, RoborockDataUpdateCoordinator)
  - (str, SensorEntityDescription)
  - (str, SonarrDataUpdateCoordinator[Any])
  - (str, SonarrSensorEntityDescription[Any])
  - (str, StateType)
  - (str, SysMonitorSensorEntityDescription)
  - (str, WallboxSensorEntityDescription)
  - (str, WithingsGoalsSensorEntityDescription)
  - (str, ZWaveMeSensorEntityDescription)
  - (str, bool | float | int | str | None)
  - (str, bool, str)
  - (str, dict)
  - (str, dict[str, Any])
  - (str, dict[str, str])
  - (str, exchangerates.Currency)
  - (str, float)
  - (str, float, State)
  - (str, int | float | None)
  - (str, int | str)
  - (str, int)
  - (str, list[Doorbell | Lock])
  - (str, list[ForecastInterval])
  - (str, list[Map])
  - (str, list[XboxSensorEntity])
  - (str, list[str] | None)
  - (str, list[str])
  - (str, scoped_session)
  - (str, set[str])
  - (str, str | None)
  - (str, str | None, str | None, SensorDeviceClass | None, list[str])
  - (str, str | bool | int | float)
  - (str, str | int | datetime)
  - (str, str | list[str])
  - (str, str)
  - (str, tuple[OneWireSensorEntityDescription, ...])
  - (str, tuple[PrusaLinkSensorEntityDescription, ...])
  - (str, tuple[TuyaSensorEntityDescription, ...])
  - (str, tuple[str, ...])
  - "(str, tuple[type[SolarEdgeSensorEntity | SolarEdgeOverviewSensor],\n    SolarEdgeDataService])"
  - (str, type)
  - (str, type[Filter])
  - (str, type[LaCrosseSensor])
  - (system_zone_id, zone_data)
  - (time_start, time_end, state)
  - (transport, protocol)
  - (tuple[SSDSensorDeviceClass, Units | None], SensorEntityDescription)
  - (tuple[Units, bool], SensorEntityDescription)
  - (tuple[int, str], list[dict[str, Any]])
  - (tuple[str, str | None, str], EnergyCostSensor)
  - (tuple[str, str], BlockSensorDescription)
  - (tuple[str, str], SensorData)
  - (tuple[str, str], SensorEntityDescription)
  - (type[Robot], list[RobotSensorEntityDescription])
  - (type_, argument)
  - (type_id, typ)
  - (uid, program)
  - (uid, zone)
  - (unit, coordinator)
  - (unit, ha_unit)
  - (url, extra_state_attributes)
  - (url[0:255], extra_state_attributes)
  - (value, None)
  - (value, extra_state_attributes)
  - (value, unit)
  - (value, unit_of_measurement)
  - (value.removesuffix(unit), ha_unit)
  - (value[0], value[2])
  - (values, _)
  - (var, info)
  - (variable, var_data)
  - (variant_id, variant_name)
  - (vin, datastore)
  - (ws_id, ws_data)
  - (xmlrpc.client.ProtocolError, ConnectionRefusedError)
  - (xmlrpc.client.ProtocolError, OSError)
  - (zone_id, zone_data)
  - (zone_key, zone)
  - '({''0'': ''2G'', ''2'': ''3G'', ''7'': ''4G''}.get(x), None)'
  - '({''0'': ''Auto'', ''1'': ''Manual''}.get(x), None)'
  - "({NetworkModeEnum.MODE_AUTO.value: '4G/3G/2G', NetworkModeEnum.\n    MODE_4G_3G_AUTO.value:\
    \ '4G/3G', NetworkModeEnum.MODE_4G_2G_AUTO.value:\n    '4G/2G', NetworkModeEnum.MODE_4G_ONLY.value:\
    \ '4G', NetworkModeEnum.\n    MODE_3G_2G_AUTO.value: '3G/2G', NetworkModeEnum.MODE_3G_ONLY.value:\n\
    \    '3G', NetworkModeEnum.MODE_2G_ONLY.value: '2G'}.get(x), None)"
  - ({}, result)
  - ({}, value)
  - Any, Any, bool
  - Any, Any, int | float
  - Any, StateType
  - Clients, Client
  - Devices, Device
  - LidarrSensorEntityDescription[T], str
  - Location, IPMA_API, int | None
  - OneWireSensorEntityDescription, ...
  - Outlets, Outlet
  - Ports, Port
  - PrusaLinkSensorEntityDescription, ...
  - RadarrSensorEntityDescription[T], str
  - SSDSensorDeviceClass, Units | None
  - StateType, dict[str, Any]
  - StateType, str | None
  - TuyaSensorEntityDescription, ...
  - Units, bool
  - Wlans, Wlan
  - '[list[tuple[str, float, State]]], tuple[dict[str, str | None], float | None]'
  - _, value
  - dict[str, str | None], float | None
  - int, str
  - str, ...
  - str, Any
  - str, float
  - str, float, State
  - str, int | float
  - str, str
  - str, str | None
  - str, str | None, str
  - str, str | bool | None
  - type[SolarEdgeSensorEntity | SolarEdgeOverviewSensor], SolarEdgeDataService
