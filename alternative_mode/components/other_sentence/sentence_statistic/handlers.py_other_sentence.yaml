handlers.py:
  schemas: []
  sets:
  - "{'ar-SA', 'de-DE', 'en-AU', 'en-CA', 'en-GB', 'en-IN', 'en-US', 'es-ES',\n  \
    \  'es-MX', 'es-US', 'fr-CA', 'fr-FR', 'hi-IN', 'it-IT', 'ja-JP', 'pt-BR'}"
  tuples:
  - ('Alexa', 'ReportState')
  - ('Alexa.Authorization', 'AcceptGrant')
  - ('Alexa.BrightnessController', 'AdjustBrightness')
  - ('Alexa.BrightnessController', 'SetBrightness')
  - ('Alexa.CameraStreamController', 'InitializeCameraStreams')
  - ('Alexa.ChannelController', 'ChangeChannel')
  - ('Alexa.ChannelController', 'SkipChannels')
  - ('Alexa.ColorController', 'SetColor')
  - ('Alexa.ColorTemperatureController', 'DecreaseColorTemperature')
  - ('Alexa.ColorTemperatureController', 'IncreaseColorTemperature')
  - ('Alexa.ColorTemperatureController', 'SetColorTemperature')
  - ('Alexa.Discovery', 'Discover')
  - ('Alexa.EqualizerController', 'AdjustBands')
  - ('Alexa.EqualizerController', 'ResetBands')
  - ('Alexa.EqualizerController', 'SetBands')
  - ('Alexa.EqualizerController', 'SetMode')
  - ('Alexa.InputController', 'SelectInput')
  - ('Alexa.LockController', 'Lock')
  - ('Alexa.LockController', 'Unlock')
  - ('Alexa.ModeController', 'AdjustMode')
  - ('Alexa.ModeController', 'SetMode')
  - ('Alexa.PlaybackController', 'Next')
  - ('Alexa.PlaybackController', 'Pause')
  - ('Alexa.PlaybackController', 'Play')
  - ('Alexa.PlaybackController', 'Previous')
  - ('Alexa.PlaybackController', 'Stop')
  - ('Alexa.PowerController', 'TurnOff')
  - ('Alexa.PowerController', 'TurnOn')
  - ('Alexa.RangeController', 'AdjustRangeValue')
  - ('Alexa.RangeController', 'SetRangeValue')
  - ('Alexa.SceneController', 'Activate')
  - ('Alexa.SceneController', 'Deactivate')
  - ('Alexa.SecurityPanelController', 'Arm')
  - ('Alexa.SecurityPanelController', 'Disarm')
  - ('Alexa.SeekController', 'AdjustSeekPosition')
  - ('Alexa.Speaker', 'AdjustVolume')
  - ('Alexa.Speaker', 'SetMute')
  - ('Alexa.Speaker', 'SetVolume')
  - ('Alexa.StepSpeaker', 'AdjustVolume')
  - ('Alexa.StepSpeaker', 'SetMute')
  - ('Alexa.ThermostatController', 'AdjustTargetTemperature')
  - ('Alexa.ThermostatController', 'SetTargetTemperature')
  - ('Alexa.ThermostatController', 'SetThermostatMode')
  - ('Alexa.TimeHoldController', 'Hold')
  - ('Alexa.TimeHoldController', 'Resume')
  - ('Alexa.ToggleController', 'TurnOff')
  - ('Alexa.ToggleController', 'TurnOn')
  - (addr, temp)
  - (context.get(SensorDeviceClass.HUMIDITY), msg.get('humi'))
  - (context.get(SensorDeviceClass.TEMPERATURE), msg.get('temp'))
  - (entity_id, humi)
  - (entity_id, temp)
  - (fan.DIRECTION_REVERSE, fan.DIRECTION_FORWARD)
  - (i, v)
  - (k, v)
  - (msg.get('addr'), msg.get('temp'))
  - (str, Any)
  - (str, str)
  - "(tuple[str, str], Callable[[ha.HomeAssistant, AbstractConfig,\n    AlexaDirective,\
    \ ha.Context], Coroutine[Any, Any, AlexaResponse]])"
  - Any, Any, AlexaResponse
  - "[ha.HomeAssistant, AbstractConfig, AlexaDirective, ha.Context], Coroutine[\n\
    \    Any, Any, AlexaResponse]"
  - str, str
