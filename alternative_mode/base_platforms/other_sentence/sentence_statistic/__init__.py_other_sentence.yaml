__init__.py:
  schemas: []
  sets:
  - '{''4'', ''5'', ''5L''}'
  - '{''DAILY'', ''WEEKLY'', ''MONTHLY'', ''YEARLY''}'
  - '{''GET''}'
  - '{''access_token'', ''entity_picture''}'
  - "{'area', 'automation', 'automation_blueprint', 'config_entry', 'group',\n   \
    \ 'scene', 'script', 'script_blueprint'}"
  - '{''auth'', ''user'', ''password''}'
  - '{''automation'', ''group'', ''person'', ''scene'', ''script''}'
  - '{''bus'', ''services'', ''states''}'
  - '{''clicks'', ''gal'', ''litre'', ''m3''}'
  - '{''daily'', ''hourly'', ''twice_daily''}'
  - '{''date'', ''time'', ''datetime'', ''timedelta'', ''tzinfo''}'
  - '{''description''}'
  - '{''door_state'', ''door_state_datetime'', ''lock_status'', ''lock_status_datetime''}'
  - '{''entity_ids'', ''all'', ''get'', ''is_state'', ''is_state_attr'', ''remove'',
    ''set''}'
  - '{''ff:ff:ff:ff:ff:ff''}'
  - '{''fire''}'
  - '{''general_command''}'
  - '{''name''}'
  - '{''rtsp://'', ''rtsps://'', ''rtmp://''}'
  - '{''services'', ''has_service'', ''call''}'
  - "{'sleep', 'strftime', 'strptime', 'gmtime', 'localtime', 'ctime', 'time',\n \
    \   'mktime'}"
  - '{''sum''}'
  - "{'utcnow', 'now', 'as_utc', 'as_timestamp', 'as_local',\n    'utc_from_timestamp',\
    \ 'start_of_local_day', 'parse_datetime',\n    'parse_date', 'get_age'}"
  - '{(AGENT_DOMAIN, agent_client.unique)}'
  - "{(BINARY_SENSOR_DOMAIN, BinarySensorDeviceClass.BATTERY_CHARGING), (\n    BINARY_SENSOR_DOMAIN,\
    \ BinarySensorDeviceClass.MOTION), (\n    BINARY_SENSOR_DOMAIN, BinarySensorDeviceClass.OCCUPANCY),\
    \ (\n    SENSOR_DOMAIN, SensorDeviceClass.BATTERY), (SENSOR_DOMAIN,\n    SensorDeviceClass.HUMIDITY)}"
  - '{(BLUETOOTH_DOMAIN, address)}'
  - '{(CONNECTION_BLUETOOTH, address)}'
  - '{(CONNECTION_NETWORK_MAC, config[CONF_MAC])}'
  - '{(CONNECTION_NETWORK_MAC, format_mac(entry.unique_id))}'
  - '{(CONNECTION_NETWORK_MAC, mac)}'
  - '{(CONNECTION_NETWORK_MAC, new_mac)}'
  - '{(CONNECTION_NETWORK_MAC, self._mac)}'
  - '{(CONNECTION_NETWORK_MAC, self.device.mac)}'
  - '{(CONNECTION_NETWORK_MAC, uppercase_mac)}'
  - '{(DOMAIN, ''OS'')}'
  - '{(DOMAIN, ''core'')}'
  - '{(DOMAIN, ''host'')}'
  - '{(DOMAIN, ''supervisor'')}'
  - '{(DOMAIN, *device_id)}'
  - '{(DOMAIN, *device_tuple)}'
  - '{(DOMAIN, DOMAIN)}'
  - '{(DOMAIN, access_point[API_AP_MAC])}'
  - '{(DOMAIN, addon[ATTR_SLUG])}'
  - '{(DOMAIN, addon_slug)}'
  - '{(DOMAIN, address)}'
  - '{(DOMAIN, api.config.bridge_id), (DOMAIN, api.config.bridge_device.id)}'
  - '{(DOMAIN, api.config.bridge_id)}'
  - '{(DOMAIN, base_unique_id(latitude, longitude))}'
  - '{(DOMAIN, board.name)}'
  - '{(DOMAIN, bridge.hardware_id)}'
  - '{(DOMAIN, bridge_device[''serial''])}'
  - '{(DOMAIN, bridge_id)}'
  - '{(DOMAIN, config[CONF_PROJECT_ID])}'
  - '{(DOMAIN, config_entry.entry_id)}'
  - '{(DOMAIN, controller.hub_serial)}'
  - '{(DOMAIN, controller_unique_id)}'
  - '{(DOMAIN, coordinates)}'
  - '{(DOMAIN, coordinator.config_entry.entry_id)}'
  - '{(DOMAIN, coordinator.data.agreement.agreement_id, ''meter_adapter'')}'
  - '{(DOMAIN, coordinator.serial_num)}'
  - "{(DOMAIN, data.lookin_device.id), *((DOMAIN, remote['UUID']) for remote in\n\
    \    data.devices)}"
  - '{(DOMAIN, device.appliance.haId)}'
  - '{(DOMAIN, device.device_id)}'
  - '{(DOMAIN, device.id)}'
  - '{(DOMAIN, device.mac_address)}'
  - '{(DOMAIN, device.usn)}'
  - '{(DOMAIN, device[''device_id''])}'
  - '{(DOMAIN, device_coordinator.device.device_id)}'
  - '{(DOMAIN, device_id)}'
  - '{(DOMAIN, entry.data[CONF_GATEWAY_ID])}'
  - '{(DOMAIN, entry.data[CONF_UID])}'
  - '{(DOMAIN, entry.entry_id)}'
  - '{(DOMAIN, entry.unique_id or entry.entry_id)}'
  - '{(DOMAIN, entry.unique_id)}'
  - '{(DOMAIN, entry_id)}'
  - '{(DOMAIN, f"{match.group(''id'')}-{new_unique_id}")}'
  - '{(DOMAIN, f''{coordinator.latitude}_{coordinator.longitude}'')}'
  - '{(DOMAIN, f''{dev.mac}-{dev.serial}-{zone.zone_index}'')}'
  - '{(DOMAIN, f''{isy.uuid}_{unique_id}'')}'
  - '{(DOMAIN, f''{self._prefix}_system'')}'
  - '{(DOMAIN, f''{self.config.unique_id}-{device_id}'')}'
  - '{(DOMAIN, f''{self.coordinator.config_entry.data[CONF_USERNAME]}@hub'')}'
  - '{(DOMAIN, f''{self.device.mac}-{self.device.serial}'')}'
  - '{(DOMAIN, gateway.id)}'
  - '{(DOMAIN, gateway_id)}'
  - '{(DOMAIN, generate_unique_id(config_entry.entry_id, address))}'
  - '{(DOMAIN, home.id)}'
  - '{(DOMAIN, hub.bond_id)}'
  - '{(DOMAIN, hub.hub_info[ATTR_SERIAL])}'
  - '{(DOMAIN, hub[''id''])}'
  - '{(DOMAIN, identifier)}'
  - '{(DOMAIN, info[''wiFiChipId''])}'
  - '{(DOMAIN, inverter.serial_number)}'
  - '{(DOMAIN, isy.uuid)}'
  - '{(DOMAIN, keypad_serial)}'
  - '{(DOMAIN, location_key)}'
  - '{(DOMAIN, master_entity.fibaro_id)}'
  - '{(DOMAIN, nanoleaf.serial_no)}'
  - '{(DOMAIN, new_id)}'
  - '{(DOMAIN, new_unique_id)}'
  - '{(DOMAIN, old_id)}'
  - '{(DOMAIN, paired_sensor_uid)}'
  - '{(DOMAIN, parse_id(self._nuki_device.nuki_id))}'
  - '{(DOMAIN, product.unique_id)}'
  - '{(DOMAIN, registration[ATTR_DEVICE_ID])}'
  - '{(DOMAIN, self._attr_unique_id)}'
  - '{(DOMAIN, self._client.account_id)}'
  - '{(DOMAIN, self._config.entry_id)}'
  - '{(DOMAIN, self._config_entry.data[CONF_API_KEY])}'
  - '{(DOMAIN, self._data.controller.mac)}'
  - '{(DOMAIN, self._device.id)}'
  - '{(DOMAIN, self._device_id)}'
  - '{(DOMAIN, self._econet.device_id)}'
  - '{(DOMAIN, self._element.index)}'
  - '{(DOMAIN, self._handle_none_serial(self.serial))}'
  - '{(DOMAIN, self._organization, self._project_name)}'
  - '{(DOMAIN, self._server_unique_id)}'
  - '{(DOMAIN, self._unique_id)}'
  - '{(DOMAIN, self.ain)}'
  - '{(DOMAIN, self.config_entry.unique_id)}'
  - '{(DOMAIN, self.coordinator.config_entry.entry_id)}'
  - '{(DOMAIN, self.coordinator.data.id)}'
  - '{(DOMAIN, self.coordinator.data.info.mac_address)}'
  - '{(DOMAIN, self.coordinator.data[''serial_number''])}'
  - '{(DOMAIN, self.device.deviceIdentifier)}'
  - '{(DOMAIN, self.device[''device_id''])}'
  - '{(DOMAIN, self.device_id)}'
  - '{(DOMAIN, self.gw_id)}'
  - '{(DOMAIN, self.hub_serial)}'
  - '{(DOMAIN, self.serial_no)}'
  - '{(DOMAIN, self.solar_net_device_id)}'
  - '{(DOMAIN, self.unique_id)}'
  - '{(DOMAIN, self.vehicle.vin)}'
  - '{(DOMAIN, self.wall_connector_data.serial_number)}'
  - '{(DOMAIN, sensor.hardware_id)}'
  - '{(DOMAIN, serial)}'
  - '{(DOMAIN, server_unique_id)}'
  - '{(DOMAIN, server_url)}'
  - '{(DOMAIN, service_info.address)}'
  - '{(DOMAIN, shc_info.unique_id)}'
  - '{(DOMAIN, str(coordinator.api.gateway_id))}'
  - '{(DOMAIN, str(dev.ieee))}'
  - '{(DOMAIN, str(device.address))}'
  - '{(DOMAIN, str(device.serial_number))}'
  - '{(DOMAIN, str(profile_id))}'
  - '{(DOMAIN, str(self._device_id))}'
  - '{(DOMAIN, str(self._device_uuid))}'
  - '{(DOMAIN, str(sensor_index))}'
  - '{(DOMAIN, str(system.system_id))}'
  - '{(DOMAIN, str(zha_gateway.coordinator_ieee))}'
  - '{(DOMAIN, system.system_id)}'
  - '{(DOMAIN, system_info.mac_addr)}'
  - '{(DOMAIN, uid)}'
  - '{(DOMAIN, unique_id)}'
  - '{(DOMAIN, user.user_id if user else entry_id)}'
  - '{(DOMAIN, vehicle_info[VEHICLE_VIN])}'
  - '{(DOMAIN,)}'
  - '{(dr.CONNECTION_BLUETOOTH, address)}'
  - '{(dr.CONNECTION_BLUETOOTH, details[ADAPTER_ADDRESS])}'
  - '{(dr.CONNECTION_BLUETOOTH, service_info.address)}'
  - '{(dr.CONNECTION_NETWORK_MAC, access_point[API_AP_MAC])}'
  - '{(dr.CONNECTION_NETWORK_MAC, api.config.mac_address)}'
  - '{(dr.CONNECTION_NETWORK_MAC, api.info[''mac''])}'
  - '{(dr.CONNECTION_NETWORK_MAC, cast(str, self._unique_id))}'
  - '{(dr.CONNECTION_NETWORK_MAC, dev_info.mac)}'
  - '{(dr.CONNECTION_NETWORK_MAC, device.mac_address)}'
  - '{(dr.CONNECTION_NETWORK_MAC, device[''device_mac''])}'
  - '{(dr.CONNECTION_NETWORK_MAC, dr.format_mac(shc_info.unique_id))}'
  - '{(dr.CONNECTION_NETWORK_MAC, gateway_info.mac_address)}'
  - '{(dr.CONNECTION_NETWORK_MAC, info[''macAddress''])}'
  - '{(dr.CONNECTION_NETWORK_MAC, isy.uuid)}'
  - '{(dr.CONNECTION_NETWORK_MAC, mac)}'
  - '{(dr.CONNECTION_NETWORK_MAC, mac_address)}'
  - '{(dr.CONNECTION_NETWORK_MAC, self._data.controller.mac)}'
  - '{(dr.CONNECTION_NETWORK_MAC, self._mac_id)}'
  - '{(dr.CONNECTION_NETWORK_MAC, self.mac_address)}'
  - '{(dr.CONNECTION_UPNP, device.udn)}'
  - '{(dr.CONNECTION_ZIGBEE, self._device_id)}'
  - '{(dr.CONNECTION_ZIGBEE, str(dev.ieee))}'
  - '{(dr.CONNECTION_ZIGBEE, str(zha_gateway.coordinator_ieee))}'
  - '{(old_identifier.pop(0), ''_''.join([str(x) for x in old_identifier]))}'
  - '{(old_identifier.pop(0), old_identifier.pop(0))}'
  - '{256, 512}'
  - '{ATTR_AVAILABLE_TONES}'
  - '{ATTR_DEVICE_TRACKERS}'
  - '{ATTR_EDITABLE, ATTR_MAX, ATTR_MIN, ATTR_MODE, ATTR_PATTERN}'
  - '{ATTR_EDITABLE, ATTR_MAX, ATTR_MIN, ATTR_MODE, ATTR_STEP}'
  - '{ATTR_EDITABLE, ATTR_NEXT_EVENT}'
  - '{ATTR_EDITABLE, CONF_HAS_DATE, CONF_HAS_TIME}'
  - '{ATTR_EDITABLE}'
  - '{ATTR_ENTITY_ID, ATTR_ORDER, ATTR_AUTO}'
  - '{ATTR_ENTITY_ID}'
  - '{ATTR_ENTITY_PICTURE, ATTR_IN_PROGRESS, ATTR_RELEASE_SUMMARY}'
  - "{ATTR_ENTITY_PICTURE_LOCAL, ATTR_ENTITY_PICTURE, ATTR_INPUT_SOURCE_LIST,\n  \
    \  ATTR_MEDIA_POSITION_UPDATED_AT, ATTR_MEDIA_POSITION, ATTR_SOUND_MODE_LIST}"
  - '{ATTR_EVENT_TYPES}'
  - '{ATTR_FAN_SPEED_LIST}'
  - '{ATTR_FORECAST}'
  - "{ATTR_HVAC_MODES, ATTR_FAN_MODES, ATTR_SWING_MODES, ATTR_MIN_TEMP,\n    ATTR_MAX_TEMP,\
    \ ATTR_MIN_HUMIDITY, ATTR_MAX_HUMIDITY,\n    ATTR_TARGET_TEMP_STEP, ATTR_PRESET_MODES}"
  - '{ATTR_LAST_TRIGGERED, ATTR_MODE, ATTR_CUR, ATTR_MAX, ATTR_LAST_ACTION}'
  - '{ATTR_MAX, ATTR_MIN, ATTR_MODE, ATTR_PATTERN}'
  - '{ATTR_MIN, ATTR_MAX, ATTR_STEP, ATTR_MODE}'
  - '{ATTR_MIN_HUMIDITY, ATTR_MAX_HUMIDITY, ATTR_AVAILABLE_MODES}'
  - '{ATTR_OPERATION_LIST, ATTR_MIN_TEMP, ATTR_MAX_TEMP}'
  - '{ATTR_OPTIONS}'
  - '{ATTR_PRESET_MODES}'
  - "{ATTR_SUPPORTED_COLOR_MODES, ATTR_EFFECT_LIST, ATTR_MIN_MIREDS,\n    ATTR_MAX_MIREDS,\
    \ ATTR_MIN_COLOR_TEMP_KELVIN, ATTR_MAX_COLOR_TEMP_KELVIN}"
  - "{CONF_ACCOUNTS, CONF_CIRCLES, CONF_ERROR_THRESHOLD, CONF_MAX_UPDATE_WAIT,\n \
    \   CONF_MEMBERS, CONF_PREFIX, CONF_SCAN_INTERVAL, CONF_WARNING_THRESHOLD}"
  - '{CONF_COOL_AWAY_TEMPERATURE, CONF_HEAT_AWAY_TEMPERATURE}'
  - '{ColorMode.BRIGHTNESS}'
  - '{ColorMode.HS, ColorMode.RGB, ColorMode.RGBW, ColorMode.RGBWW, ColorMode.XY}'
  - "{ColorMode.ONOFF, ColorMode.BRIGHTNESS, ColorMode.COLOR_TEMP, ColorMode.HS,\n\
    \    ColorMode.XY, ColorMode.RGB, ColorMode.RGBW, ColorMode.RGBWW, ColorMode\n\
    \    .WHITE}"
  - '{ColorMode.ONOFF}'
  - '{IPv4Address(IPV4_BROADCAST_ADDR)}'
  - '{MediaPlayerState.OFF, MediaPlayerState.IDLE, MediaPlayerState.STANDBY}'
  - "{NotificationCategory.WEIGHT, NotificationCategory.PRESSURE,\n    NotificationCategory.ACTIVITY,\
    \ NotificationCategory.SLEEP,\n    NotificationCategory.IN_BED, NotificationCategory.OUT_BED}"
  - '{Platform.BUTTON, Platform.SENSOR, Platform.SWITCH}'
  - "{STATE_ATTR_AZIMUTH, STATE_ATTR_ELEVATION, STATE_ATTR_RISING,\n    STATE_ATTR_NEXT_DAWN,\
    \ STATE_ATTR_NEXT_DUSK, STATE_ATTR_NEXT_MIDNIGHT,\n    STATE_ATTR_NEXT_NOON, STATE_ATTR_NEXT_RISING,\
    \ STATE_ATTR_NEXT_SETTING}"
  - '{TRAVEL_MODE_PUBLIC, ''publicTransportTimeTable''}'
  - '{TodoItemStatus.NEEDS_ACTION, TodoItemStatus.COMPLETED}'
  - '{UnitOfTemperature.CELSIUS, UnitOfTemperature.FAHRENHEIT}'
  - "{_id_to_identifier(bridge_unique_id), *(_id_to_identifier(\n    f\"occupancygroup_{bridge_unique_id}_{device['occupancy_group_id']}\"\
    ) for\n    device in occupancy_groups.values()), *(_id_to_identifier(device[\n\
    \    'serial']) for device in chain(devices.values(), buttons.values()))}"
  - '{asyncio.create_task(stop_event.wait()), *pending_info.values()}'
  - '{config_entry.entry_id}'
  - '{connection}'
  - '{dev_id}'
  - '{device_id, device_id_ext}'
  - '{device_identifier}'
  - '{device_id}'
  - '{get_device_id(driver, node)}'
  - '{get_device_id(driver, notification.node)}'
  - '{get_device_id(driver, value.node)}'
  - '{identifier}'
  - '{item_id}'
  - '{new_ids}'
  - '{old_ids}'
  - '{person_domain}'
  - '{self._device_identifier}'
  - "{self.measurement_coordinator, self.sleep_coordinator, self.\n    bed_presence_coordinator,\
    \ self.goals_coordinator, self.\n    activity_coordinator, self.workout_coordinator}"
  - '{url}'
  tuples:
  - '''daily'', ''hourly'', ''twice_daily'''
  - ('', '/', '/api')
  - ('+', '-')
  - ('256', '512', '1024')
  - ('APCMODEL', 'MODEL')
  - ('Current_Phase_L1', 'instantaneous_current_l1')
  - ('Current_Phase_L2', 'instantaneous_current_l2')
  - ('Current_Phase_L3', 'instantaneous_current_l3')
  - "('DOMAIN', 'async_create_default_pipeline', 'async_get_pipelines',\n    'async_setup',\
    \ 'async_pipeline_from_audio_stream', 'AudioSettings',\n    'Pipeline', 'PipelineEvent',\
    \ 'PipelineEventType', 'PipelineNotFound',\n    'WakeWordSettings')"
  - ('Energy_Consumption_(tarif_1)', 'electricity_used_tariff_1')
  - ('Energy_Consumption_(tarif_2)', 'electricity_used_tariff_2')
  - ('Energy_Consumption_(total)', 'electricity_imported_total')
  - ('Energy_Production_(tarif_1)', 'electricity_delivered_tariff_1')
  - ('Energy_Production_(tarif_2)', 'electricity_delivered_tariff_2')
  - ('Energy_Production_(total)', 'electricity_exported_total')
  - "('EventDataManager', 'EventTypeManager', 'StatesMetaManager',\n    'StateAttributesManager',\
    \ 'StatisticsMetaManager', 'IntegrationMatcher')"
  - ('Long_Power_Failure_Count', 'long_power_failure_count')
  - ('Max_current_per_phase', 'belgium_max_current_per_phase')
  - ('Max_power_per_phase', 'belgium_max_power_per_phase')
  - ('OverkizState', 'UIWidget', 'UIClass')
  - ('Power_Consumption', 'current_electricity_usage')
  - ('Power_Consumption_Phase_L1', 'instantaneous_active_power_l1_positive')
  - ('Power_Consumption_Phase_L2', 'instantaneous_active_power_l2_positive')
  - ('Power_Consumption_Phase_L3', 'instantaneous_active_power_l3_positive')
  - ('Power_Production', 'current_electricity_delivery')
  - ('Power_Production_Phase_L1', 'instantaneous_active_power_l1_negative')
  - ('Power_Production_Phase_L2', 'instantaneous_active_power_l2_negative')
  - ('Power_Production_Phase_L3', 'instantaneous_active_power_l3_negative')
  - ('Power_Tariff', 'electricity_active_tariff')
  - ('SUPERVISOR', 'SUPERVISOR_TOKEN')
  - ('Short_Power_Failure_Count', 'short_power_failure_count')
  - ('SingleAction', 'Toggle', 'SingleSceneRaiseLower', 'MasterRaiseLower')
  - ('Voltage_Phase_L1', 'instantaneous_voltage_l1')
  - ('Voltage_Phase_L2', 'instantaneous_voltage_l2')
  - ('Voltage_Phase_L3', 'instantaneous_voltage_l3')
  - ('Voltage_Sags_Phase_L1', 'voltage_sag_l1_count')
  - ('Voltage_Sags_Phase_L2', 'voltage_sag_l2_count')
  - ('Voltage_Sags_Phase_L3', 'voltage_sag_l3_count')
  - ('Voltage_Swells_Phase_L1', 'voltage_swell_l1_count')
  - ('Voltage_Swells_Phase_L2', 'voltage_swell_l2_count')
  - ('Voltage_Swells_Phase_L3', 'voltage_swell_l3_count')
  - ('access_doorbell', 'read_doorbell')
  - "('area', 'automation', 'automation_blueprint', 'config_entry', 'device',\n  \
    \  'entity', 'group', 'person', 'scene', 'script', 'script_blueprint')"
  - "('area_registry', 'auth', 'auth_provider_homeassistant', 'automation',\n    'config_entries',\
    \ 'core', 'device_registry', 'entity_registry',\n    'script', 'scene')"
  - "('async_set_value', 'max_value', 'min_value', 'set_value', 'step',\n    'unit_of_measurement',\
    \ 'value')"
  - ('binary_sensor', DISCOVER_BATTERY)
  - ('binary_sensor', DISCOVER_BINARY_SENSORS)
  - ('broadcast', 'polling', 'webhooks')
  - ('climate', DISCOVER_CLIMATE)
  - ('cover', DISCOVER_COVER)
  - ('daily', 'hourly', 'twice_daily')
  - ('demo', 'mqtt')
  - "('first_occurred', 'timestamp', 'name', 'level', 'message', 'exception',\n  \
    \  'root_cause', 'source', 'count', 'key')"
  - ('frontend', 'reload_themes')
  - ('frontend_es5', not is_dev)
  - ('frontend_latest', not is_dev)
  - ('http', 'ftp:', 'magnet:')
  - ('http',)
  - ('image/gif', 'image/jpeg', 'image/png')
  - ('invert', 'class')
  - ('language', 'format', 'codec', 'bit_rate', 'sample_rate', 'channel')
  - ('libav.mp4', 'libav.swscaler')
  - ('light', DISCOVER_LIGHTS)
  - ('lock', DISCOVER_LOCKS)
  - ('login', login_event, login_timeout)
  - ('next', next_sp_day, (sp_idx + 1) * (1 - next_sp_day))
  - ('old_state', 'new_state')
  - ('on', 'off')
  - ('onboarding.html', not is_dev)
  - ('pausing', 'cancelling')
  - ('robots.txt', False)
  - ('sds', ATTR_SDS011, ATTR_SPS30)
  - ('sensor', DISCOVER_SENSORS)
  - ('service_worker.js', False)
  - ('state', 'numeric_state')
  - ('state', 'temp', 'humi', 'addr')
  - ('static', not is_dev)
  - ('switch', DISCOVER_SWITCHES)
  - ('sync_complete', sync_event, sync_timeout)
  - ('this', this_sp_day, sp_idx)
  - ('value added', 'value updated', 'metadata updated')
  - "(('Power_Consumption', 'current_electricity_usage'), ('Power_Production',\n \
    \   'current_electricity_delivery'), ('Power_Tariff',\n    'electricity_active_tariff'),\
    \ ('Energy_Consumption_(tarif_1)',\n    'electricity_used_tariff_1'), ('Energy_Consumption_(tarif_2)',\n\
    \    'electricity_used_tariff_2'), ('Energy_Production_(tarif_1)',\n    'electricity_delivered_tariff_1'),\
    \ ('Energy_Production_(tarif_2)',\n    'electricity_delivered_tariff_2'), ('Power_Consumption_Phase_L1',\n\
    \    'instantaneous_active_power_l1_positive'), (\n    'Power_Consumption_Phase_L3',\
    \ 'instantaneous_active_power_l3_positive'),\n    ('Power_Consumption_Phase_L2',\
    \ 'instantaneous_active_power_l2_positive'\n    ), ('Power_Production_Phase_L1',\n\
    \    'instantaneous_active_power_l1_negative'), ('Power_Production_Phase_L2',\n\
    \    'instantaneous_active_power_l2_negative'), ('Power_Production_Phase_L3',\n\
    \    'instantaneous_active_power_l3_negative'), ('Short_Power_Failure_Count',\n\
    \    'short_power_failure_count'), ('Long_Power_Failure_Count',\n    'long_power_failure_count'),\
    \ ('Voltage_Sags_Phase_L1',\n    'voltage_sag_l1_count'), ('Voltage_Sags_Phase_L2',\n\
    \    'voltage_sag_l2_count'), ('Voltage_Sags_Phase_L3',\n    'voltage_sag_l3_count'),\
    \ ('Voltage_Swells_Phase_L1',\n    'voltage_swell_l1_count'), ('Voltage_Swells_Phase_L2',\n\
    \    'voltage_swell_l2_count'), ('Voltage_Swells_Phase_L3',\n    'voltage_swell_l3_count'),\
    \ ('Voltage_Phase_L1',\n    'instantaneous_voltage_l1'), ('Voltage_Phase_L2',\n\
    \    'instantaneous_voltage_l2'), ('Voltage_Phase_L3',\n    'instantaneous_voltage_l3'),\
    \ ('Current_Phase_L1',\n    'instantaneous_current_l1'), ('Current_Phase_L2',\n\
    \    'instantaneous_current_l2'), ('Current_Phase_L3',\n    'instantaneous_current_l3'),\
    \ ('Max_power_per_phase',\n    'belgium_max_power_per_phase'), ('Max_current_per_phase',\n\
    \    'belgium_max_current_per_phase'), ('Energy_Consumption_(total)',\n    'electricity_imported_total'),\
    \ ('Energy_Production_(total)',\n    'electricity_exported_total'))"
  - "(('login', login_event, login_timeout), ('sync_complete', sync_event,\n    sync_timeout))"
  - "(('service_worker.js', False), ('robots.txt', False), ('onboarding.html', \n\
    \    not is_dev), ('static', not is_dev), ('frontend_latest', not is_dev), (\n\
    \    'frontend_es5', not is_dev))"
  - "(('switch', DISCOVER_SWITCHES), ('light', DISCOVER_LIGHTS), ('cover',\n    DISCOVER_COVER),\
    \ ('binary_sensor', DISCOVER_BINARY_SENSORS), ('sensor',\n    DISCOVER_SENSORS),\
    \ ('climate', DISCOVER_CLIMATE), ('lock',\n    DISCOVER_LOCKS), ('binary_sensor',\
    \ DISCOVER_BATTERY))"
  - "(('this', this_sp_day, sp_idx), ('next', next_sp_day, (sp_idx + 1) * (1 -\n \
    \   next_sp_day)))"
  - "((API_SENSOR_PAIR_DUMP, client.sensor.pair_dump), (API_SYSTEM_DIAGNOSTICS,\n\
    \    client.system.diagnostics), (API_SYSTEM_ONBOARD_SENSOR_STATUS, client.\n\
    \    system.onboard_sensor_status), (API_VALVE_STATUS, client.valve.status),\n\
    \    (API_WIFI_STATUS, client.wifi.status))"
  - ((ATTR_DESCRIPTION, description), (ATTR_SUBMIT_CAPTION, submit_caption))
  - "((CONF_BINARY_SENSORS, CONF_IO_BIN), (CONF_SENSORS, CONF_IO_DIG), (\n    CONF_SWITCHES,\
    \ CONF_IO_SWI))"
  - "((DATA_ADDONS_STATS, self._update_addon_stats, CONTAINER_STATS,\n    started_addons,\
    \ False), (DATA_ADDONS_CHANGELOGS, self.\n    _update_addon_changelog, CONTAINER_CHANGELOG,\
    \ all_addons, True), (\n    DATA_ADDONS_INFO, self._update_addon_info, CONTAINER_INFO,\
    \ all_addons, \n    True))"
  - "((DATA_UV, client.uv_index), (DATA_PROTECTION_WINDOW,\n    async_update_protection_data))"
  - "((DOMAIN, coordinator.server_id), *((DOMAIN, id) for id in coordinator.\n   \
    \ device_ids))"
  - ((DOMAIN, latitude, longitude), (DOMAIN, str(latitude), str(longitude)))
  - ((DOMAIN, serial), *((DOMAIN, f'{serial}_{id}') for id in device_ids))
  - "((KEY_DEVICE_BASIC_INFORMATION, 'devicename'), (KEY_DEVICE_INFORMATION,\n   \
    \ 'DeviceName'))"
  - "((SERVICE_NAME_PAIR_SENSOR, SERVICE_PAIR_UNPAIR_SENSOR_SCHEMA,\n    async_pair_sensor),\
    \ (SERVICE_NAME_UNPAIR_SENSOR,\n    SERVICE_PAIR_UNPAIR_SENSOR_SCHEMA, async_unpair_sensor),\
    \ (\n    SERVICE_NAME_UPGRADE_FIRMWARE, SERVICE_UPGRADE_FIRMWARE_SCHEMA,\n   \
    \ async_upgrade_firmware))"
  - "((SERVICE_NAME_PAUSE_WATERING, SERVICE_PAUSE_WATERING_SCHEMA,\n    async_pause_watering),\
    \ (SERVICE_NAME_PUSH_FLOW_METER_DATA,\n    SERVICE_PUSH_FLOW_METER_DATA_SCHEMA,\
    \ async_push_flow_meter_data), (\n    SERVICE_NAME_PUSH_WEATHER_DATA, SERVICE_PUSH_WEATHER_DATA_SCHEMA,\n\
    \    async_push_weather_data), (SERVICE_NAME_RESTRICT_WATERING,\n    SERVICE_RESTRICT_WATERING_SCHEMA,\
    \ async_restrict_watering), (\n    SERVICE_NAME_STOP_ALL, SERVICE_SCHEMA, async_stop_all),\
    \ (\n    SERVICE_NAME_UNPAUSE_WATERING, SERVICE_SCHEMA, async_unpause_watering),\n\
    \    (SERVICE_NAME_UNRESTRICT_WATERING, SERVICE_SCHEMA,\n    async_unrestrict_watering))"
  - "((SERVICE_NAME_REMOVE_PIN, async_remove_pin, SERVICE_REMOVE_PIN_SCHEMA), (\n\
    \    SERVICE_NAME_SET_PIN, async_set_pin, SERVICE_SET_PIN_SCHEMA), (\n    SERVICE_NAME_SET_SYSTEM_PROPERTIES,\
    \ async_set_system_properties,\n    SERVICE_SET_SYSTEM_PROPERTIES_SCHEMA))"
  - "((SERVICE_PAUSE, async_pause_queue, SERVICE_BASE_SCHEMA), (SERVICE_RESUME,\n\
    \    async_resume_queue, SERVICE_BASE_SCHEMA), (SERVICE_SET_SPEED,\n    async_set_queue_speed,\
    \ SERVICE_SPEED_SCHEMA))"
  - ((SonosAlarms, self.data.alarms), (SonosFavorites, self.data.favorites))
  - "((TYPE_ALLERGY_FORECAST, client.allergens.extended), (TYPE_ALLERGY_INDEX,\n \
    \   client.allergens.current), (TYPE_ALLERGY_OUTLOOK, client.allergens.\n    outlook),\
    \ (TYPE_ASTHMA_FORECAST, client.asthma.extended), (\n    TYPE_ASTHMA_INDEX, client.asthma.current),\
    \ (TYPE_DISEASE_FORECAST,\n    client.disease.extended), (TYPE_DISEASE_INDEX,\
    \ client.disease.current))"
  - "((UPNP_SVC_RENDERING_CONTROL, CONF_SSDP_RENDERING_CONTROL_LOCATION), (\n    UPNP_SVC_MAIN_TV_AGENT,\
    \ CONF_SSDP_MAIN_TV_AGENT_LOCATION))"
  - ((domain, issue_id), issue_entry)
  - "((ha.DOMAIN, SERVICE_RELOAD_CORE_CONFIG), ('frontend', 'reload_themes'), (\n\
    \    ha.DOMAIN, SERVICE_RELOAD_CUSTOM_TEMPLATES))"
  - ()
  - (*device_args, gateway_id, gateway, node_id, child_id, value_type)
  - (-1, 100006)
  - (..., Awaitable)
  - (..., Coroutine[Any, Any, dict[str, Any]])
  - (..., None)
  - (0, 1, 2)
  - (1, 1, 3)
  - (1, event)
  - (1, self.speed_count)
  - (192, 384, 512, 1024)
  - (2, (event.time_fired, state))
  - (255, 255, 255)
  - (3, (utcnow(), None))
  - (3, 12)
  - (401, 403)
  - (48, 72, 96, 128, 192, 384, 512)
  - (AGENT_DOMAIN, agent_client.unique)
  - (API_SENSOR_PAIR_DUMP, client.sensor.pair_dump)
  - (API_SYSTEM_DIAGNOSTICS, client.system.diagnostics)
  - (API_SYSTEM_ONBOARD_SENSOR_STATUS, client.system.onboard_sensor_status)
  - (API_VALVE_STATUS, client.valve.status)
  - (API_WIFI_STATUS, client.wifi.status)
  - (ATTR_ACTIVITY, ATTR_DELAY_SECS)
  - "(ATTR_COLOR_NAME, ATTR_COLOR_TEMP, ATTR_HS_COLOR, ATTR_RGB_COLOR,\n    ATTR_RGBW_COLOR,\
    \ ATTR_RGBWW_COLOR, ATTR_XY_COLOR, ATTR_WHITE)"
  - "(ATTR_CONNECTION, NextDnsConnectionUpdateCoordinator,\n    UPDATE_INTERVAL_CONNECTION)"
  - (ATTR_DATE, ATTR_TIME)
  - (ATTR_DESCRIPTION, description)
  - (ATTR_DEVICE_ID, ATTR_EVENT_TYPE)
  - (ATTR_DNSSEC, NextDnsDnssecUpdateCoordinator, UPDATE_INTERVAL_ANALYTICS)
  - "(ATTR_ENCRYPTION, NextDnsEncryptionUpdateCoordinator, UPDATE_INTERVAL_ANALYTICS\n\
    \    )"
  - "(ATTR_IP_VERSIONS, NextDnsIpVersionsUpdateCoordinator,\n    UPDATE_INTERVAL_ANALYTICS)"
  - (ATTR_LAST_TRIGGERED, ATTR_MODE, ATTR_CUR, ATTR_MAX, CONF_ID)
  - "(ATTR_MESSAGE, ATTR_TITLE, ATTR_URL, ATTR_FILE, ATTR_CAPTION,\n    ATTR_LONGITUDE,\
    \ ATTR_LATITUDE)"
  - (ATTR_NAME, ATTR_MOTION)
  - (ATTR_POWER, ATTR_POWER_P3)
  - "(ATTR_PREFERRED_FORMAT, ATTR_PREFERRED_SAMPLE_RATE,\n    ATTR_PREFERRED_SAMPLE_CHANNELS)"
  - (ATTR_PROTOCOLS, NextDnsProtocolsUpdateCoordinator, UPDATE_INTERVAL_ANALYTICS)
  - (ATTR_SETTINGS, NextDnsSettingsUpdateCoordinator, UPDATE_INTERVAL_SETTINGS)
  - (ATTR_STATUS, NextDnsStatusUpdateCoordinator, UPDATE_INTERVAL_ANALYTICS)
  - (ATTR_SUBMIT_CAPTION, submit_caption)
  - (ATTR_TONE, ATTR_DURATION, ATTR_VOLUME_LEVEL)
  - (ATTR_TRANSITION, ATTR_FLASH)
  - "(ATTR_UUID, ATTR_TITLE, ATTR_HOSTNAME, ATTR_ZONE, ATTR_CORE_NUMBER,\n    ATTR_MEMORY_AMOUNT)"
  - (AbodeException, ConnectTimeout, HTTPError)
  - "(AdbTimeoutError, BrokenPipeError, ConnectionResetError, ValueError,\n    InvalidChecksumError,\
    \ InvalidCommandError, InvalidResponseError,\n    TcpTimeoutException)"
  - (AddressFilter, type[DPTBase])
  - (AndroidTVAsync | FireTVAsync | None, str | None)
  - (Any, Any)
  - (Any, Any, None)
  - (Any, Any, _T)
  - (ApiError, ClientConnectorError, InvalidApiKeyError)
  - (ApiError, ClientConnectorError, InvalidApiKeyError, RequestsExceededError)
  - (ApiError, ClientConnectorError, InvalidSensorDataError)
  - (ApiError, ClientConnectorError, asyncio.TimeoutError)
  - (ApiError, ClientError, ClientConnectorError, asyncio.TimeoutError)
  - (AqualinkServiceException, httpx.HTTPError)
  - (AttrReportConfig, ...)
  - (AttributeError, KeyError, TypeError)
  - (AttributeError, OSError, ValueError)
  - (AttributeError, OverflowError, TypeError)
  - (AttributeError, TypeError)
  - (AttributeError, UnicodeDecodeError)
  - (AugustApiAIOHTTPError, ClientResponseError, CannotConnect)
  - (AuthException, SubscriberException)
  - (AuthFailedError, TimeoutError, BleakError, Exception)
  - (AuthenticationError, ConnectionError, NoDevicesError, NoUsernameError)
  - (AuthenticationError, UnknownError)
  - (AvrNetworkError, AvrTimoutError)
  - (BINARY_SENSOR_DOMAIN, BinarySensorDeviceClass.BATTERY_CHARGING)
  - (BINARY_SENSOR_DOMAIN, BinarySensorDeviceClass.MOTION)
  - (BINARY_SENSOR_DOMAIN, BinarySensorDeviceClass.OCCUPANCY)
  - (BLUETOOTH_DOMAIN, address)
  - (BadAPIRequestError, ValueError)
  - (BadCredentialsException, NotSuchTokenException)
  - (BinarySensorDeviceClass.BATTERY_CHARGING, SensorDeviceClass.BATTERY)
  - (CONF_BINARY_SENSORS, CONF_IO_BIN)
  - (CONF_EVENTS,)
  - (CONF_EXTRA_HTML_URL, CONF_EXTRA_HTML_URL_ES5, CONF_JS_VERSION)
  - (CONF_SENSORS, CONF_IO_DIG)
  - (CONF_SWITCHES, CONF_IO_SWI)
  - (CONNECTION_BLUETOOTH, address)
  - (CONNECTION_NETWORK_MAC, config[CONF_MAC])
  - (CONNECTION_NETWORK_MAC, format_mac(entry.unique_id))
  - (CONNECTION_NETWORK_MAC, format_mac(mac))
  - (CONNECTION_NETWORK_MAC, mac)
  - (CONNECTION_NETWORK_MAC, new_mac)
  - (CONNECTION_NETWORK_MAC, self._mac)
  - (CONNECTION_NETWORK_MAC, self.device.mac)
  - (CONNECTION_NETWORK_MAC, uppercase_mac)
  - (CannotConnect, ConnectionClosed, asyncio.TimeoutError)
  - (CannotConnect, asyncio.TimeoutError)
  - (CannotConnect, protocol.OwnetError)
  - (CannotConnectError, UnauthorizedError, OperationError)
  - "(CantConnectException, InvalidAPIKeyException, RateLimitedException,\n    UnknownException)"
  - (ClientConnectionError, RuntimeWarning)
  - (ClientConnectorError, nextcord.HTTPException, nextcord.NotFound)
  - (ClientError, AsyncIOTimeoutError, OSError)
  - (ClientError, GenericHTTPError, InvalidResponseFormat)
  - (ClientError, OSError, Timeout)
  - (ClientError, asyncio.TimeoutError)
  - (ClientError, asyncio.TimeoutError, Aladdin.ConnectionError)
  - (ClientResponseError, CannotConnect)
  - (Concatenate[_AqualinkEntityT, _P], Awaitable[Any])
  - (Concatenate[_AqualinkEntityT, _P], Coroutine[Any, Any, None])
  - (Concatenate[_HiveEntityT, _P], Awaitable[Any])
  - (Concatenate[_HiveEntityT, _P], Coroutine[Any, Any, None])
  - (ConfigType, DataUpdateCoordinator[None], RestData)
  - (ConnectTimeout, HTTPError)
  - (ConnectTimeout, HTTPError, WirelessTagsException)
  - (ConnectTimeout, HTTPError, socket.gaierror)
  - (ConnectionClosedException, ConnectionErrorException)
  - (ConnectionError, ClientConnectionError)
  - (ConnectionError, SchemaError)
  - (ConnectionError, SnmpError)
  - (ConnectionError, SnmpError, UnsupportedModelError)
  - (ConnectionFailure, AutenticationFailure)
  - (ConnectionRefusedError, socket.timeout, SSLError)
  - (ConnectionResetError, RuntimeError)
  - (ConversionError, CouldNotParseTelegram)
  - "(DATA_ADDONS_CHANGELOGS, self._update_addon_changelog, CONTAINER_CHANGELOG,\n\
    \    all_addons, True)"
  - (DATA_ADDONS_INFO, self._update_addon_info, CONTAINER_INFO, all_addons, True)
  - "(DATA_ADDONS_STATS, self._update_addon_stats, CONTAINER_STATS,\n    started_addons,\
    \ False)"
  - (DATA_PROTECTION_WINDOW, async_update_protection_data)
  - (DATA_UV, client.uv_index)
  - (DEFAULT_THEME, VALUE_NO_THEME)
  - (DHCPWatcher, NetworkWatcher)
  - (DNSError, RadioBrowserError)
  - (DOMAIN, 'OS')
  - (DOMAIN, 'core')
  - (DOMAIN, 'host')
  - (DOMAIN, 'supervisor')
  - (DOMAIN, *device_id)
  - (DOMAIN, *device_tuple)
  - (DOMAIN, DOMAIN)
  - (DOMAIN, access_point[API_AP_MAC])
  - (DOMAIN, addon[ATTR_SLUG])
  - (DOMAIN, addon_slug)
  - (DOMAIN, address)
  - (DOMAIN, api.config.bridge_device.id)
  - (DOMAIN, api.config.bridge_id)
  - (DOMAIN, base_unique_id(latitude, longitude))
  - (DOMAIN, board.name)
  - (DOMAIN, bridge.hardware_id)
  - (DOMAIN, bridge_device['serial'])
  - (DOMAIN, bridge_id)
  - (DOMAIN, config[CONF_PROJECT_ID])
  - (DOMAIN, config_entry.entry_id)
  - (DOMAIN, config_id, camera_id)
  - (DOMAIN, controller.hub_serial)
  - (DOMAIN, controller_unique_id)
  - (DOMAIN, coordinates)
  - (DOMAIN, coordinator.config_entry.entry_id)
  - (DOMAIN, coordinator.data.agreement.agreement_id)
  - (DOMAIN, coordinator.data.agreement.agreement_id, 'meter_adapter')
  - (DOMAIN, coordinator.serial_num)
  - (DOMAIN, coordinator.server_id)
  - (DOMAIN, data.lookin_device.id)
  - (DOMAIN, dev.system.serial)
  - (DOMAIN, device.appliance.haId)
  - (DOMAIN, device.device_id)
  - (DOMAIN, device.id)
  - (DOMAIN, device.mac_address)
  - (DOMAIN, device.usn)
  - (DOMAIN, device['device_id'])
  - (DOMAIN, device['home'])
  - (DOMAIN, device_coordinator.device.device_id)
  - (DOMAIN, device_id)
  - (DOMAIN, entry.data[CONF_GATEWAY_ID])
  - (DOMAIN, entry.data[CONF_UID])
  - (DOMAIN, entry.entry_id)
  - (DOMAIN, entry.unique_id or entry.entry_id)
  - (DOMAIN, entry.unique_id)
  - (DOMAIN, entry_id)
  - (DOMAIN, f"{match.group('id')}-{new_unique_id}")
  - (DOMAIN, f'{config_entry_id}_{camera_id}')
  - (DOMAIN, f'{coordinator.latitude}_{coordinator.longitude}')
  - (DOMAIN, f'{dev.mac}-{dev.serial}')
  - (DOMAIN, f'{dev.mac}-{dev.serial}-{zone.zone_index}')
  - (DOMAIN, f'{isy.uuid}_{unique_id}')
  - (DOMAIN, f'{latitude}-{longitude}')
  - (DOMAIN, f'{self._prefix}_system')
  - (DOMAIN, f'{self.config.unique_id}-{device_id}')
  - (DOMAIN, f'{self.coordinator.config_entry.data[CONF_USERNAME]}@hub')
  - (DOMAIN, f'{self.device.mac}-{self.device.serial}')
  - (DOMAIN, f'{serial}_{id}')
  - (DOMAIN, gateway.id)
  - (DOMAIN, gateway_id)
  - (DOMAIN, generate_unique_id(config_entry.entry_id, address))
  - (DOMAIN, generate_unique_id(self.entry_id, self.config[CONF_ADDRESS]))
  - (DOMAIN, home.id)
  - (DOMAIN, hub.bond_id)
  - (DOMAIN, hub.hub_info[ATTR_SERIAL])
  - (DOMAIN, hub['id'])
  - (DOMAIN, id)
  - (DOMAIN, identifier)
  - (DOMAIN, idx)
  - (DOMAIN, info['wiFiChipId'])
  - (DOMAIN, inverter.serial_number)
  - (DOMAIN, isy.uuid)
  - (DOMAIN, keypad_serial)
  - (DOMAIN, latitude, longitude)
  - (DOMAIN, location_key)
  - (DOMAIN, lutron_id)
  - (DOMAIN, master_entity.fibaro_id)
  - (DOMAIN, nanoleaf.serial_no)
  - (DOMAIN, new_id)
  - (DOMAIN, new_unique_id)
  - (DOMAIN, old_id)
  - (DOMAIN, paired_sensor_uid)
  - (DOMAIN, parse_id(self._nuki_device.nuki_id))
  - (DOMAIN, product.unique_id)
  - (DOMAIN, registration[ATTR_DEVICE_ID])
  - (DOMAIN, remote['UUID'])
  - (DOMAIN, self._attr_unique_id)
  - (DOMAIN, self._bridge_device['serial'])
  - (DOMAIN, self._client.account_id)
  - (DOMAIN, self._config.entry_id)
  - (DOMAIN, self._config_entry.data[CONF_API_KEY])
  - (DOMAIN, self._controller_unique_id)
  - (DOMAIN, self._data.controller.mac)
  - (DOMAIN, self._device.id)
  - (DOMAIN, self._device_id)
  - (DOMAIN, self._econet.device_id)
  - (DOMAIN, self._element.index)
  - (DOMAIN, self._entry_id, BRIDGE_SERIAL_NUMBER)
  - (DOMAIN, self._gateway_id)
  - (DOMAIN, self._handle_none_serial(self.serial))
  - (DOMAIN, self._logical_address)
  - (DOMAIN, self._organization, self._project_name)
  - (DOMAIN, self._server_unique_id)
  - (DOMAIN, self._unique_id)
  - (DOMAIN, self.ain)
  - (DOMAIN, self.config_entry.unique_id)
  - (DOMAIN, self.coordinator.bridge_id)
  - (DOMAIN, self.coordinator.config_entry.entry_id)
  - (DOMAIN, self.coordinator.data.device_id)
  - (DOMAIN, self.coordinator.data.id)
  - (DOMAIN, self.coordinator.data.info.mac_address)
  - (DOMAIN, self.coordinator.data['serial_number'])
  - (DOMAIN, self.device.deviceIdentifier)
  - (DOMAIN, self.device['device_id'])
  - (DOMAIN, self.device['parentDevice'])
  - (DOMAIN, self.device_id)
  - (DOMAIN, self.gw_id)
  - (DOMAIN, self.hub_serial)
  - (DOMAIN, self.serial_no)
  - (DOMAIN, self.solar_net_device_id)
  - (DOMAIN, self.unique_id)
  - (DOMAIN, self.vehicle.vin)
  - (DOMAIN, self.wall_connector_data.serial_number)
  - (DOMAIN, sensor.hardware_id)
  - (DOMAIN, serial)
  - (DOMAIN, server_unique_id)
  - (DOMAIN, server_url)
  - (DOMAIN, service_info.address)
  - (DOMAIN, shc_info.unique_id)
  - (DOMAIN, station_id)
  - (DOMAIN, str(coordinator.api.gateway_id))
  - (DOMAIN, str(dev.ieee))
  - (DOMAIN, str(device.address))
  - (DOMAIN, str(device.serial_number))
  - (DOMAIN, str(latitude), str(longitude))
  - (DOMAIN, str(profile_id))
  - (DOMAIN, str(self._device_id))
  - (DOMAIN, str(self._device_uuid))
  - (DOMAIN, str(sensor_index))
  - (DOMAIN, str(station_id))
  - (DOMAIN, str(system.system_id))
  - (DOMAIN, str(zha_gateway.coordinator_ieee))
  - (DOMAIN, system.system_id)
  - (DOMAIN, system_info.mac_addr)
  - (DOMAIN, uid)
  - (DOMAIN, unique_id)
  - (DOMAIN, user.user_id if user else entry_id)
  - (DOMAIN, vehicle_info[VEHICLE_VIN])
  - (DOMAIN,)
  - (DevId, MySensorsChildEntity)
  - (Device | Remote, SwitchBotCoordinator)
  - (DeviceConnectionError, MacAddressMismatchError)
  - (DeviceGroupAddress, type[DPTBase])
  - (DeviceTrackerRegisteredWatcher, DeviceTrackerWatcher)
  - (DeviceTuple, dict[str, Any])
  - (ENTITY_MATCH_NONE, ENTITY_MATCH_ALL)
  - (EVENT_CONNECTION_LOST, EVENT_POWER_OUTAGE)
  - (EVENT_CONNECTION_RESTORED, EVENT_POWER_RESTORED)
  - (EntityNotFound, InvalidDeviceAutomationConfig)
  - (EventData | None, int)
  - (EventData(json.dumps(obj=state, cls=JSONEncoder).encode('utf-8')), dropped)
  - (Exception, ConfigureReportingResponseRecord)
  - (ExpiredTokenError, InvalidTokenError)
  - (ExtractorError, DownloadError)
  - (EzvizAuthTokenExpired, EzvizAuthVerificationCode)
  - (FailedParsingWhoisOutput, WhoisCommandFailed, UnknownDateFormat)
  - (False, True)
  - (FetchFailed, RequestError)
  - (GiosError, ClientConnectorError)
  - (GroupAddress, InternalGroupAddress)
  - (GroupValueWrite, GroupValueResponse)
  - (HTTPError, requests.exceptions.ConnectionError)
  - (HTTPStatus.BAD_REQUEST, HTTPStatus.UNAUTHORIZED, HTTPStatus.FORBIDDEN)
  - (HTTPStatus.OK, HTTPStatus.CREATED)
  - (HTTPStatus.UNAUTHORIZED, HTTPStatus.FORBIDDEN)
  - (HTTPStatus.UNAUTHORIZED.value, HTTPStatus.FORBIDDEN.value)
  - (HVACMode.HEAT_COOL, HVACMode.HEAT, HVACMode.COOL)
  - (HomeAssistantError, KeyError)
  - (HomeAssistantError, ValueError)
  - (HomeAssistantError, aiohttp.ClientError, asyncio.TimeoutError)
  - (IDENTIFIER_HOST, device.host)
  - (IDENTIFIER_SERIAL_NUMBER, device.serial_number)
  - "(INTERVAL, timedelta(minutes=1), timedelta(minutes=5), timedelta(minutes=15\n\
    \    ), timedelta(minutes=30))"
  - (IPMAException, asyncio.TimeoutError)
  - (ImportError, OSError)
  - (InvalidAuthError, InvalidTokenError)
  - (InvalidKeyError, KeyExpiredError, UnauthorizedError)
  - (InvalidURL, HTTPError, PyEzvizError)
  - (KEY_DEVICE_BASIC_INFORMATION, 'devicename')
  - (KEY_DEVICE_INFORMATION, 'DeviceName')
  - (KaleidescapeError, ConnectionError)
  - (KeyError, TypeError)
  - (KeyError, ValueError)
  - "(Literal['daily', 'hourly', 'twice_daily'], list[Callable[[list[\n    JsonValueType]\
    \ | None], None]])"
  - (LoginFailed, UnsupportedControllerVersion)
  - (LyricException, ClientResponseError)
  - (METH_GET, METH_HEAD, METH_POST, METH_PUT)
  - (METH_POST, METH_PUT)
  - (MissingMessageEncoderException, OSError)
  - (MqttData, dict[str, Any])
  - (NextcloudMonitorConnectionError, NextcloudMonitorRequestError)
  - (NoTrainStationFound, MultipleTrainStationsFound)
  - (None, ' ', '-')
  - (None, '')
  - (None, 'create')
  - (None, None)
  - (None, SensorDeviceClass.ENUM)
  - (None, dropped + 1)
  - (None, dropped)
  - (None, error_message)
  - (None, set())
  - (None, {'GET'})
  - (ONVIFError, Fault, RequestError, TransportError)
  - (OSError, DeviceError)
  - (OSError, InvalidPassword, LoadFailure)
  - (OSError, RequestException)
  - (OSError, SoCoException, Timeout)
  - (OSError, SoCoException, Timeout, asyncio.TimeoutError)
  - (OSError, TypeError)
  - (OSError, URLError)
  - (OSError, asyncio.CancelledError)
  - (OSError, pickle.PickleError)
  - (OSError, socket.timeout)
  - (P1MonitorNoDataError, P1MonitorConnectionError)
  - (PLATFORM_MAPPING[platform], _config)
  - (PROP_ETHMAC, PROP_WIFIMAC)
  - (PhysicalAddress,)
  - (Platform, DispatchCallback)
  - (Platform, dict[str, dict])
  - (Platform, list)
  - (Platform, list[DeviceCoordinator])
  - (Platform, list[DeviceModel])
  - (Platform, list[Device])
  - (Platform, list[veraApi.VeraDevice])
  - (Platform.BINARY_SENSOR, ' Battery Charging')
  - "(Platform.BINARY_SENSOR, Platform.BUTTON, Platform.LIGHT, Platform.NUMBER,\n\
    \    Platform.SELECT, Platform.SENSOR, Platform.SWITCH, Platform.UPDATE)"
  - (Platform.BINARY_SENSOR, Platform.SELECT, Platform.SENSOR, Platform.SWITCH)
  - (Platform.BINARY_SENSOR, Platform.SELECT, Platform.SWITCH)
  - (Platform.BINARY_SENSOR, Platform.SENSOR)
  - (Platform.BINARY_SENSOR, Platform.SENSOR, Platform.LOCK, Platform.NOTIFY)
  - (Platform.BINARY_SENSOR,)
  - (Platform.BUTTON, Platform.TIME)
  - (Platform.BUTTON,)
  - (Platform.CLIMATE, Platform.SENSOR)
  - "(Platform.CLIMATE, Platform.WATER_HEATER, Platform.SENSOR, Platform.\n    BINARY_SENSOR,\
    \ Platform.SWITCH)"
  - (Platform.NUMBER, ' Perfume Amount')
  - (Platform.SELECT, ' Room Size')
  - (Platform.SELECT, Platform.SENSOR)
  - (Platform.SENSOR, ' Battery')
  - (Platform.SENSOR, ' Fill')
  - (Platform.SENSOR, ' Perfume')
  - (Platform.SENSOR, ' Wifi')
  - (Platform.SENSOR, Platform.BINARY_SENSOR)
  - (Platform.SENSOR, Platform.NOTIFY)
  - (Platform.SENSOR, Platform.WEATHER)
  - (Platform.SENSOR,)
  - (Platform.SWITCH, '')
  - (Platform.UPDATE,)
  - (Platform.VACUUM,)
  - "(Platform.WATER_HEATER, Platform.BINARY_SENSOR, Platform.SENSOR, Platform.\n\
    \    CLIMATE)"
  - (PyNUTError, ConnectionResetError)
  - (QSType.relay, QSType.dimmer)
  - (REST_DATA, *COORDINATOR_AWARE_PLATFORMS)
  - (RemoveNodeReason.REPLACED, RemoveNodeReason.PROXY_REPLACED)
  - (ReolinkError, asyncio.exceptions.CancelledError)
  - (ReolinkException, ReolinkError)
  - (RequireValidation, InvalidAuth)
  - (ResourceException, requests.exceptions.ConnectionError)
  - (ResponseErrorException, ExpatError)
  - (ResponseErrorNotSupportedException, ExpatError)
  - (RoomAnyID, RoomID)
  - (RoomID, dict[WordCommand, ConfigCommand])
  - (RoomID, list[ConfigCommand])
  - (SENSOR_DOMAIN, SensorDeviceClass.BATTERY)
  - (SENSOR_DOMAIN, SensorDeviceClass.HUMIDITY)
  - (SERVICE_HOMEASSISTANT_STOP, SERVICE_HOMEASSISTANT_RESTART)
  - "(SERVICE_NAME_PAIR_SENSOR, SERVICE_NAME_UNPAIR_SENSOR,\n    SERVICE_NAME_UPGRADE_FIRMWARE)"
  - "(SERVICE_NAME_PAIR_SENSOR, SERVICE_PAIR_UNPAIR_SENSOR_SCHEMA, async_pair_sensor\n\
    \    )"
  - "(SERVICE_NAME_PAUSE_WATERING, SERVICE_NAME_PUSH_FLOW_METER_DATA,\n    SERVICE_NAME_PUSH_WEATHER_DATA,\
    \ SERVICE_NAME_RESTRICT_WATERING,\n    SERVICE_NAME_STOP_ALL, SERVICE_NAME_UNPAUSE_WATERING,\n\
    \    SERVICE_NAME_UNRESTRICT_WATERING)"
  - "(SERVICE_NAME_PAUSE_WATERING, SERVICE_PAUSE_WATERING_SCHEMA,\n    async_pause_watering)"
  - "(SERVICE_NAME_PUSH_FLOW_METER_DATA, SERVICE_PUSH_FLOW_METER_DATA_SCHEMA,\n  \
    \  async_push_flow_meter_data)"
  - "(SERVICE_NAME_PUSH_WEATHER_DATA, SERVICE_PUSH_WEATHER_DATA_SCHEMA,\n    async_push_weather_data)"
  - "(SERVICE_NAME_REMOVE_PIN, SERVICE_NAME_SET_PIN,\n    SERVICE_NAME_SET_SYSTEM_PROPERTIES)"
  - (SERVICE_NAME_REMOVE_PIN, async_remove_pin, SERVICE_REMOVE_PIN_SCHEMA)
  - "(SERVICE_NAME_RESTRICT_WATERING, SERVICE_RESTRICT_WATERING_SCHEMA,\n    async_restrict_watering)"
  - (SERVICE_NAME_SET_PIN, async_set_pin, SERVICE_SET_PIN_SCHEMA)
  - "(SERVICE_NAME_SET_SYSTEM_PROPERTIES, async_set_system_properties,\n    SERVICE_SET_SYSTEM_PROPERTIES_SCHEMA)"
  - (SERVICE_NAME_STOP_ALL, SERVICE_SCHEMA, async_stop_all)
  - "(SERVICE_NAME_UNPAIR_SENSOR, SERVICE_PAIR_UNPAIR_SENSOR_SCHEMA,\n    async_unpair_sensor)"
  - (SERVICE_NAME_UNPAUSE_WATERING, SERVICE_SCHEMA, async_unpause_watering)
  - (SERVICE_NAME_UNRESTRICT_WATERING, SERVICE_SCHEMA, async_unrestrict_watering)
  - "(SERVICE_NAME_UPGRADE_FIRMWARE, SERVICE_UPGRADE_FIRMWARE_SCHEMA,\n    async_upgrade_firmware)"
  - (SERVICE_PAUSE, SERVICE_RESUME, SERVICE_SET_SPEED)
  - (SERVICE_PAUSE, async_pause_queue, SERVICE_BASE_SCHEMA)
  - (SERVICE_RESUME, async_resume_queue, SERVICE_BASE_SCHEMA)
  - (SERVICE_SET_SPEED, async_set_queue_speed, SERVICE_SPEED_SCHEMA)
  - "(SERVICE_START, SERVICE_MEMORY, SERVICE_START_LOG_OBJECTS,\n    SERVICE_STOP_LOG_OBJECTS,\
    \ SERVICE_DUMP_LOG_OBJECTS, SERVICE_LRU_STATS,\n    SERVICE_LOG_THREAD_FRAMES,\
    \ SERVICE_LOG_EVENT_LOOP_SCHEDULED)"
  - (SOAPError, HTTPError)
  - (STATE_NOT_HOME, STATE_UNKNOWN, STATE_UNAVAILABLE)
  - (STATE_ON, STATE_OFF)
  - (STATE_UNAVAILABLE, STATE_UNKNOWN)
  - (STATE_UNKNOWN, '')
  - (STATE_UNKNOWN, '', STATE_UNAVAILABLE)
  - (STATE_UNKNOWN, '', STATE_UNAVAILABLE, None)
  - (STATE_UNKNOWN, STATE_UNAVAILABLE)
  - (STATUS_ACTIVE, STATUS_PAUSED)
  - (SVC_SET_ZONE_OVERRIDE, SVC_RESET_ZONE_OVERRIDE)
  - (Scapy_Exception, ImportError)
  - (Scapy_Exception, OSError)
  - (SenseAuthenticationException, SenseMFARequiredException)
  - "(SensorEntityDescription(key=ATTR_DOWNLOAD, name=ATTR_DOWNLOAD.capitalize(),\n\
    \    icon='mdi:download', state_class=SensorStateClass.MEASUREMENT,\n    device_class=SensorDeviceClass.DATA_RATE,\
    \ native_unit_of_measurement=\n    UnitOfDataRate.MEGABITS_PER_SECOND), SensorEntityDescription(key=\n\
    \    ATTR_UPLOAD, name=ATTR_UPLOAD.capitalize(), icon='mdi:upload',\n    state_class=SensorStateClass.MEASUREMENT,\
    \ device_class=\n    SensorDeviceClass.DATA_RATE, native_unit_of_measurement=UnitOfDataRate.\n\
    \    MEGABITS_PER_SECOND))"
  - (SensorEntityDescription, ...)
  - (SensorType, type[MySensorsChildEntity])
  - (SerialException, OSError, asyncio.TimeoutError)
  - (ServiceUnavailableError, TooManyRequestsError)
  - (SlackApiError, ClientError)
  - (SmartMeterTexasAPIError, SmartMeterTexasAuthError)
  - (SonosAlarms, self.data.alarms)
  - (SonosFavorites, self.data.favorites)
  - (SsdpCallback, dict[str, str])
  - (SsdpSource, SsdpChange)
  - (StoreResultType, RetrieveResultType)
  - (SynoSurveillanceStation.INFO_API_KEY,)
  - (TYPE_ALLERGY_FORECAST, client.allergens.extended)
  - (TYPE_ALLERGY_INDEX, client.allergens.current)
  - (TYPE_ALLERGY_OUTLOOK, client.allergens.outlook)
  - (TYPE_ASTHMA_FORECAST, client.asthma.extended)
  - (TYPE_ASTHMA_INDEX, client.asthma.current)
  - (TYPE_DISEASE_FORECAST, client.disease.extended)
  - (TYPE_DISEASE_INDEX, client.disease.current)
  - (TimeoutError, ClientError)
  - (True, None)
  - (TypeError, ValueError)
  - (UPNP_SVC_MAIN_TV_AGENT, CONF_SSDP_MAIN_TV_AGENT_LOCATION)
  - (UPNP_SVC_RENDERING_CONTROL, CONF_SSDP_RENDERING_CONTROL_LOCATION)
  - (URLError, OSError)
  - (URLError, SOAPError, OSError)
  - (UnitOfTemperature.CELSIUS, UnitOfTemperature.FAHRENHEIT)
  - (UserNotAdmin, CredentialsInvalidError)
  - (ValueError, AttributeError)
  - (ValueError, IndexError)
  - (ValueError, IndexError, KeyError)
  - (ValueError, IndexError, KeyError, OSError)
  - (ValueError, KeyError)
  - (ValueError, TemplateError)
  - (ValueError, TypeError)
  - (ValueError, vol.Invalid)
  - (WasteType, list[date])
  - (YaleXSBLEError, asyncio.TimeoutError)
  - (YoLinkClientError, asyncio.TimeoutError)
  - (ZEROCONF_TYPE, *HOMEKIT_TYPES)
  - ([Any], None)
  - ([BrowseMedia], bool)
  - ([CloudConnectionState], Awaitable[None] | None)
  - ([DeviceCoordinator], Coroutine[Any, Any, None])
  - ([Device], bool)
  - ([Event], dict[str, Any] | None)
  - ([FibaroEvent], None)
  - ([FjaraskupanCoordinator], list[Entity])
  - ([HomeAssistant, ActiveConnection, dict[str, Any]], Awaitable[None])
  - ([HomeAssistant, ActiveConnection, dict[str, Any]], Coroutine[Any, Any, None])
  - "([HomeAssistant, ConfigEntry, DeviceEntry], Coroutine[Any, Any, Mapping[str,\n\
    \    Any]])"
  - ([HomeAssistant, ConfigEntry], Coroutine[Any, Any, Mapping[str, Any]])
  - ([HomeAssistant, str, Request], Awaitable[Response | None])
  - ([HomeAssistant], Awaitable[dict])
  - ([LazyEventPartialState], dict[str, Any])
  - ([Ring], Any)
  - ([SsdpServiceInfo, SsdpChange], Awaitable)
  - ([UpdateType, dict[str, Notification]], None)
  - ([], Any)
  - ([], Awaitable[None])
  - ([], Awaitable[bytes | None])
  - ([], Coroutine[Any, Any, VacuumCoordinatorData])
  - ([], Coroutine[None, Any, Remote])
  - ([], None)
  - ([], asyncio.DatagramProtocol)
  - ([bool], None)
  - ([datetime], Coroutine[Any, Any, bool])
  - ([dict[str, Any]], dict[str, Any])
  - ([dict], Any)
  - ([dict], dict)
  - ([float, int], float)
  - ([ha.HomeAssistant, bool], Coroutine[Any, Any, None])
  - ([list[JsonValueType] | None], None)
  - ([list[dict[str, str]]], None)
  - "([rfxtrxmod.RFXtrxEvent, rfxtrxmod.RFXtrxEvent | None, DeviceTuple, dict[\n \
    \   str, Any]], list[Entity])"
  - ([rfxtrxmod.RFXtrxEvent], bool)
  - ([str, Credentials], str)
  - ([str, Mapping[str, Any]], None)
  - ([str, str, str], Awaitable[str | None])
  - ([str, str], Credentials | None)
  - ([str, str], list[Any])
  - ([str], None)
  - ([str], str)
  - (_, _, callback)
  - (_, _, tb)
  - (_, _type)
  - (_, component)
  - (_, event)
  - (_, file_name)
  - (_, info_desc)
  - (_, metric)
  - (_, model, mac_address)
  - (_IP_WILDCARD, sip_port)
  - "(_ObservationUpdateCoordinatorT, TimestampDataUpdateCoordinator[None],\n    TimestampDataUpdateCoordinator[None],\
    \ TimestampDataUpdateCoordinator[None])"
  - "(_ObservationUpdateCoordinatorT, _DailyForecastUpdateCoordinatorT,\n    _HourlyForecastUpdateCoordinatorT,\
    \ _TwiceDailyForecastUpdateCoordinatorT)"
  - (_P, Any)
  - (_P, Awaitable[Any])
  - (_P, Coroutine[Any, Any, Any])
  - (_P, None)
  - (_P, _R)
  - (_filter, _transcoder)
  - (_result, port, method, info)
  - (_stdout, stderr)
  - (a, cached)
  - (adapter, details)
  - (adbkey, signer, adb_log)
  - (addr, PhysicalAddress(val))
  - (addr, port)
  - (addr, val)
  - (aftv, None)
  - (aftv, error_message)
  - (agent_id, agent)
  - (agent_id,)
  - (aiohttp.ClientConnectionError, GigyaException)
  - (aiohttp.ClientResponseError, aiohttp.client_exceptions.ClientConnectorError)
  - "(aiosomecomfort.device.ConnectionError, aiosomecomfort.device.\n    ConnectionTimeout,\
    \ aiosomecomfort.device.SomeComfortError, asyncio.\n    TimeoutError)"
  - (api, api_coro)
  - (api_category, update_interval)
  - (api_event_type, image_event)
  - (area.name, area.occupancy_group)
  - (area.name, keypad.name, button, led)
  - (area.name, output)
  - (assistant, settings)
  - (asyncio.DatagramTransport, HassVoipDatagramProtocol)
  - "(asyncio.TimeoutError, AccessoryNotFoundError, EncryptionError,\n    AccessoryDisconnectedError)"
  - (asyncio.TimeoutError, AioImapException)
  - (asyncio.TimeoutError, BaseZwaveJSServerError)
  - (asyncio.TimeoutError, ClientConnectionError)
  - (asyncio.TimeoutError, ClientError)
  - (asyncio.TimeoutError, ClientError, ServerDisconnectedError)
  - (asyncio.TimeoutError, ClientResponseError, CannotConnect)
  - (asyncio.TimeoutError, CommunicationFailure, DeviceUnavailable)
  - (asyncio.TimeoutError, ConnectionError)
  - (asyncio.TimeoutError, ConnectionError, SerialException)
  - (asyncio.TimeoutError, OSError, BulbException)
  - (asyncio.TimeoutError, aiohttp.ClientError)
  - (asyncio.TimeoutError, aiohttp.ClientError, NoUsableService)
  - (asyncio.TimeoutError, aiohttp.ClientError, UpnpError)
  - (asyncio.TimeoutError, aiohttp.ClientError, tibber.RetryableHttpException)
  - (asyncio.TimeoutError, httpx.HTTPError)
  - (asyncio.TimeoutError, zigpy.exceptions.ZigbeeException)
  - (attr, config)
  - (attr, result)
  - (attr, value)
  - (attr_report['attr'], attr_report['config'])
  - (auth_domain, credential)
  - (automation_idx, automation)
  - (automation_matches, config_matches)
  - (bridge.locks, bridge.openers)
  - (bytes | None, str | None)
  - (bytes, bytes | None)
  - (bytes, int)
  - (callback, lower_match_dict)
  - (cast(str, match.group(1)), frame.f_lineno)
  - (cast(str, match.group(1)), line_number)
  - (cc_domain, cc_obj)
  - (channel_id, channel)
  - (char1, char2)
  - (chunk, rest)
  - (client_id, code)
  - (cmd, att)
  - (code, payload)
  - (code.get(CONF_NAME), code.get(CONF_DEVICE, STATE_UNKNOWN))
  - (comp_name, comp_conf)
  - (compensation, conf)
  - (component_name, config)
  - (component_name, discovery_type)
  - (conf, coordinator, rest)
  - (conf, platform)
  - (conf.get(CONF_HOST), conf.get(CONF_PORT))
  - (conf[CONF_HOST], conf[CONF_PORT])
  - (conf_platform, conf_io)
  - (config[CONF_HOST], config[CONF_PORT])
  - (config_entry.data[CONF_LATITUDE], config_entry.data[CONF_LONGITUDE])
  - (config_entry_id, existing_coordinator)
  - (config_id, camera_id_str)
  - (config_idx, config)
  - (content, _)
  - (content, cached['voice'])
  - (content, content_type)
  - (content, data)
  - (coordinator, coord_dict)
  - (coordinator, project)
  - (coordinator_name, coordinator_class, update_interval)
  - (coordinator_name, update_method)
  - (core.State, bool)
  - (count, json)
  - (count, metrics)
  - (created, result)
  - (ctype, cval)
  - (cv.byte,)
  - (cv.small_float, cv.small_float)
  - (data, content_type)
  - (data[0], int(data[1]), data[2])
  - (data[ATTR_LATITUDE], data[ATTR_LONGITUDE])
  - (data_key, update_func, enabled_key, wanted_addons, needs_first_update)
  - (date, datetime)
  - (datetime.datetime | datetime.date, datetime.datetime | datetime.date)
  - (datetime.datetime, datetime.date)
  - (dest_folder, dest_file_name)
  - (dev, handler)
  - (dev_id, device_entry)
  - (device, coordinator)
  - (device, result)
  - (device, zone)
  - (device.device_id, item.name, item.scale)
  - (device.get(CONF_NAME) or device[CONF_TYPE], device[CONF_DEVICE_ID])
  - (device.ready(), device.info())
  - (device_id, coordinator)
  - (device_id, detail)
  - (device_id, device)
  - (device_id, device_config)
  - (device_id, device_triggers)
  - (device_id, entity_config)
  - (device_id, info)
  - (device_id, port)
  - (device_id, sensor_data)
  - (device_key, event)
  - (device_name, device)
  - (device_name, device_id)
  - (device_type, devices)
  - (dict, dict | None)
  - (dict[str, ConfigEntry], dict[int, ConfigEntry])
  - "(dict[str, HomeKitDiscoveredIntegration], dict[re.Pattern,\n    HomeKitDiscoveredIntegration])"
  - (dict[str, str], StreamSettings)
  - (domain, _)
  - (domain, config_items)
  - (domain, describe_callback)
  - (domain, device_id)
  - (domain, domain_data)
  - (domain, domain_device_ids)
  - (domain, domain_services)
  - (domain, ent_ids)
  - (domain, entity)
  - (domain, info)
  - (domain, issue_id)
  - (domain, item_id)
  - (domain, key)
  - (domain, matcher)
  - (domain, matchers)
  - (domain, service)
  - (done, tasks)
  - (dr.CONNECTION_BLUETOOTH, address)
  - (dr.CONNECTION_BLUETOOTH, details[ADAPTER_ADDRESS])
  - (dr.CONNECTION_BLUETOOTH, service_info.address)
  - (dr.CONNECTION_NETWORK_MAC, access_point[API_AP_MAC])
  - (dr.CONNECTION_NETWORK_MAC, api.config.mac_address)
  - (dr.CONNECTION_NETWORK_MAC, api.info['mac'])
  - (dr.CONNECTION_NETWORK_MAC, cast(str, self._unique_id))
  - (dr.CONNECTION_NETWORK_MAC, dev_info.mac)
  - (dr.CONNECTION_NETWORK_MAC, device.mac_address)
  - (dr.CONNECTION_NETWORK_MAC, device['device_mac'])
  - (dr.CONNECTION_NETWORK_MAC, device_mac_address)
  - (dr.CONNECTION_NETWORK_MAC, dr.format_mac(shc_info.unique_id))
  - (dr.CONNECTION_NETWORK_MAC, formatted_mac)
  - (dr.CONNECTION_NETWORK_MAC, gateway_info.mac_address)
  - (dr.CONNECTION_NETWORK_MAC, info['macAddress'])
  - (dr.CONNECTION_NETWORK_MAC, isy.uuid)
  - (dr.CONNECTION_NETWORK_MAC, mac)
  - (dr.CONNECTION_NETWORK_MAC, mac_address)
  - (dr.CONNECTION_NETWORK_MAC, self._data.controller.mac)
  - (dr.CONNECTION_NETWORK_MAC, self._mac_id)
  - (dr.CONNECTION_NETWORK_MAC, self.mac_address)
  - (dr.CONNECTION_NETWORK_MAC, x)
  - (dr.CONNECTION_UPNP, device.udn)
  - (dr.CONNECTION_ZIGBEE, self._device_id)
  - (dr.CONNECTION_ZIGBEE, str(dev.ieee))
  - (dr.CONNECTION_ZIGBEE, str(zha_gateway.coordinator_ieee))
  - (dst, headers)
  - (dt_util.utcnow(), result)
  - (engine_id, provider)
  - (entity_id, 'group.all_lights')
  - (entity_id, e_entry)
  - (entity_id, entity_config)
  - (entity_id, fields, callback)
  - (entity_key, entity)
  - (entries_by_name, entries_by_port)
  - (entry.options['entity_type'],)
  - (entry.options['group_type'],)
  - (entry.options['template_type'],)
  - (entry.options[CONF_TARGET_DOMAIN],)
  - (entry_id, coordinator)
  - (entry_id, location)
  - (entry_id, secret)
  - (et.ParseError, ec_exc.UnknownStationId)
  - (event, device_ids)
  - (event.time_fired, state)
  - (event_code, event_config)
  - (event_data, dropped)
  - (event_type, event_data)
  - (exceptions.ConnectError, exceptions.DataError)
  - (extension, cached['voice'])
  - (extension, data)
  - (favorites, inputs)
  - (feed_id, struct_utc)
  - (feed_id, timestamp_string)
  - (feeduri, feedconfig)
  - (filename, _)
  - (float, float)
  - (float, int)
  - (float, int, str)
  - (flume_auth, flume_devices, http_session)
  - (folder, file_name)
  - (forecast_type,)
  - (formatted_mac, device)
  - (game, data)
  - (gateway_id, node_id, child_id, value_type)
  - "(geography_dict[CONF_CITY], geography_dict[CONF_STATE], geography_dict[\n   \
    \ CONF_COUNTRY])"
  - (goslideapi.ClientConnectionError, goslideapi.ClientTimeoutError)
  - (group1, group2, group3, group4)
  - (group_id, _, _)
  - (ha.DOMAIN, SERVICE_RELOAD_CORE_CONFIG)
  - (ha.DOMAIN, SERVICE_RELOAD_CUSTOM_TEMPLATES)
  - (ha_type, hive_type)
  - (handler, schema)
  - (has_description, description)
  - (hass, name, api, event_codes)
  - "(hass.data[DATA_INFO], hass.data[DATA_HOST_INFO], hass.data[DATA_STORE],\n  \
    \  hass.data[DATA_CORE_INFO], hass.data[DATA_SUPERVISOR_INFO], hass.data[\n  \
    \  DATA_OS_INFO])"
  - (hass_path, config_dir)
  - (header, val)
  - (header_name, template_header)
  - "(heos_const.EVENT_GROUPS_CHANGED, heos_const.EVENT_CONNECTED,\n    SIGNAL_HEOS_PLAYER_ADDED)"
  - "(heos_const.EVENT_SOURCES_CHANGED, heos_const.EVENT_USER_CHANGED,\n    heos_const.EVENT_CONNECTED)"
  - (hnotify, huser)
  - (homekit_model_lookup, homekit_model_matchers)
  - (host, _, port_str)
  - (host, device_config)
  - (host, port)
  - (hours, remainder)
  - (httpx.RequestError, httpx.HTTPStatusError)
  - (i, (char1, char2))
  - (i, (filename, _))
  - (i, tmp)
  - (id_, cfg)
  - (id_, conf)
  - (ids[CONF_LIST_ID], ids[CONF_TIMESERIES_ID], ids[CONF_TASK_ID])
  - (idx, _)
  - (idx, automation)
  - (idx, config)
  - (idx, itm)
  - (idx, module_conf)
  - (idx, result)
  - (idx, script)
  - (idx, val)
  - (index, check)
  - (index, conf)
  - (index, controller_conf)
  - (index, favorite)
  - (index, icon)
  - (index, light_id)
  - (index, name)
  - (index, result)
  - (instance_class, entity_type)
  - (int | str, Any)
  - (int, ...)
  - (int, Any)
  - (int, AutomationEntityConfig)
  - (int, Bridge)
  - (int, Callable[[], Any])
  - (int, ConfigEntry)
  - (int, DeviceInfo)
  - (int, DeviceModel)
  - (int, LutronButton)
  - (int, LutronKeypad)
  - (int, RoomModel)
  - (int, Station)
  - (int, SurepyEntity)
  - (int, SystemType)
  - (int, dict[int, str])
  - (int, dict[str, Any])
  - (int, dict[str, int])
  - (int, float)
  - (int, float, Decimal)
  - (int, int)
  - (int, int, int | float)
  - (int, int, int)
  - (int, int, int, int)
  - (int, int, int, int, int)
  - (int, list[Any])
  - (int, list[Callable[[FibaroEvent], None]])
  - (int, set[SystemNotification])
  - (int, str)
  - (int, tuple[datetime, State | None])
  - (int, vol.Schema)
  - (intent_type, conf)
  - (interface_id, dev_descriptions)
  - (interface_id, errorcode, message)
  - (intervals,)
  - (ipv4, info)
  - (issue_id, alert)
  - (item, max_)
  - (item.uid, item.summary)
  - (item_type, item_id)
  - (jinja2.TemplateError, TemplateError)
  - (json, exc)
  - (json.decoder.JSONDecodeError, UnicodeDecodeError)
  - (k, v)
  - (key, _, value)
  - (key, config_block)
  - (key, item)
  - (key, matchers_by_key)
  - (key, offset, idx)
  - (key, result)
  - (key, selected)
  - (key, traces)
  - (key, val)
  - (key, value)
  - (kind, key)
  - (kwargs.pop(CONF_HOST),)
  - (kwargs.pop(CONF_TOKEN),)
  - (language, merged_options)
  - (language, options)
  - (lat, lon)
  - (list, dict)
  - (list, tuple)
  - (list,)
  - (list[NukiLock], list[NukiOpener])
  - (list_no, config_block)
  - (listen_task, start_client_task, *platform_setup_tasks)
  - (location, elevation)
  - (locks, openers)
  - (logical_address.seg_id, logical_address.addr_id, logical_address.is_group)
  - (mac, device)
  - (mac_address, entry_id)
  - (mac_address, original_name)
  - (member_id, entry_id)
  - (message, _)
  - (message_id, _)
  - (message_id, inline_message_id)
  - (meter, conf)
  - (minutes, seconds)
  - (model, discovery)
  - (mqtt_data, conf)
  - (msg.topic, str(msg.payload).replace('\n', ''))
  - (name, command_config)
  - (name, event, timeout)
  - (name, p_id)
  - (name, value)
  - (new_id, old_id)
  - (now.hour, now.minute)
  - (object_id, cfg)
  - (object_id, conf)
  - (object_type, count)
  - (old, new)
  - (old_identifier.pop(0), '_'.join([str(x) for x in old_identifier]))
  - (old_identifier.pop(0), old_identifier.pop(0))
  - (opt_key, opt_val)
  - (p.station_code, p.fuel_type)
  - (p_type, p_config)
  - (packet_id, entity_info)
  - (panel_key, panel)
  - (param, channels)
  - (parameter.value_id, values[parameter.value_id])
  - (path, ext)
  - (path, line_number)
  - (path, should_cache)
  - (pattern, discovery)
  - (peripheral_id, peripheral)
  - (pidx, printer)
  - (plant_name, plant_config)
  - (platform, _config)
  - (platform, task)
  - (plexapi.exceptions.BadRequest, plexapi.exceptions.NotFound)
  - (plexapi.exceptions.BadRequest, plexapi.exceptions.Unauthorized)
  - (port,)
  - (prog, args)
  - (prog, args, args_compiled)
  - (prop, attr)
  - (prop, offline)
  - (prop, prop_value)
  - (prop, value)
  - (property_name, value)
  - (protocol_int, creds)
  - (pyav_options, stream_settings)
  - (pycfdns.AuthenticationException, pycfdns.ComunicationException)
  - (pysma.exceptions.SmaReadException, pysma.exceptions.SmaConnectionException)
  - (pywemo.exceptions.ActionException, pywemo.exceptions.HTTPException)
  - (qsid, dev)
  - (query, exc)
  - (re.Pattern, HomeKitDiscoveredIntegration)
  - (read, _)
  - (reading, entity_id)
  - (record.pathname, record.lineno)
  - (registry_entry.domain, registry_entry.unique_id.removeprefix(diffuser.hublot))
  - (requests.RequestException, SpotifyException)
  - (requests.exceptions.RequestException, exceptions.InfluxDBServerError, OSError)
  - (response, _)
  - (rest[:REPORT_CONFIG_ATTR_PER_REQ], rest[REPORT_CONFIG_ATTR_PER_REQ:])
  - (rest_idx, conf)
  - (ret, response)
  - (rname, rconfig)
  - (robot_type, platforms)
  - (room_alias_or_id, room_id)
  - (round(hs_color[0], 3), round(hs_color[1], 3))
  - (round(xy_color[0], 6), round(xy_color[1], 6))
  - (scanner, unload_scanner)
  - (script_idx, script)
  - (script_matches, config_matches)
  - (search_type, search_id)
  - (self._endpoint.device.nwk, self._id)
  - (self._group_id, _, _)
  - (self._host, self._port)
  - (self._prefix, entity_id, key.replace(' ', '_'), value, now)
  - (self._version, self._major_version)
  - (self._zha_device.nwk, self._zha_device.model)
  - (self.color_x, self.color_y)
  - (self.data.values(), self.yaml_collection.async_items())
  - "(self.device_connection.seg_id, self.device_connection.addr_id, self.\n    device_connection.is_group)"
  - (self.favorites, self.inputs)
  - (self.name, source, self.root_cause)
  - (sensor_id_str, task_type)
  - (sensor_type, api_coro)
  - (server_name, server)
  - (service, method)
  - (service, method, schema)
  - (service, params)
  - (service, settings)
  - (service_name, _)
  - (service_name, schema, method)
  - (service_name, service)
  - (service_notif, schema)
  - (set[int], set[int])
  - (setup, scenarios)
  - (slug, None)
  - (slug, changelog)
  - (slug, info)
  - (slug, stats)
  - (sname, sconfig)
  - (socket.timeout, OSError)
  - (source, target)
  - (source[0],)
  - (source_ip_str, 0)
  - (source_ip_str, 0, 0, int(getattr(source_ip, 'scope_id')))
  - (source_key, source_index)
  - (source_mac, source_key)
  - (spa.time_hour, spa.time_minute)
  - (ssdp_device.udn, dst)
  - (ssdp_st, key)
  - (start, end)
  - (state, is_matched)
  - (status, info)
  - (stdout_data, stderr_data)
  - (store_result, retrieve_result)
  - (str | None, Thing)
  - (str | None, bytes)
  - (str | vol.Optional, Any)
  - (str(IPV4_BROADCAST), SSDP_PORT)
  - (str(dev.ieee), get_device_automation_triggers(dev))
  - (str(geography_dict[CONF_LATITUDE]), str(geography_dict[CONF_LONGITUDE]))
  - (str, ...)
  - (str, APIMethods)
  - (str, AbstractConversationAgent)
  - (str, AdapterDetails)
  - (str, Any)
  - (str, BaseTrace)
  - (str, BroadlinkDevice)
  - (str, Callable[[], None] | None)
  - (str, Callable[_P, _R])
  - (str, ClientCredential)
  - (str, Collection[Any])
  - (str, ConfigEntry)
  - (str, ConfigType)
  - (str, Configurator)
  - (str, ConsoleData)
  - (str, DataUpdateCoordinator)
  - (str, DataUpdateCoordinator[Any])
  - (str, DataUpdateCoordinator[None])
  - (str, DiagnosticsPlatformData)
  - (str, DiscovergyUpdateCoordinator)
  - (str, DoorBirdData)
  - (str, Doorbell)
  - (str, ELKM1Data)
  - (str, EntityInfo)
  - (str, Enum)
  - (str, FjaraskupanCoordinator)
  - (str, GitHubDataUpdateCoordinator)
  - (str, GuardianDataUpdateCoordinator)
  - (str, HomeDataDevice)
  - (str, HomeKitDiscoveredIntegration)
  - (str, HomeKitEntryData)
  - (str, Integration)
  - (str, IntegrationAlert)
  - (str, JellyfinDataUpdateCoordinator[Any])
  - (str, JsonValueType)
  - (str, KNXExposeSensor | KNXExposeTime)
  - (str, LidarrDataUpdateCoordinator[Any])
  - (str, Life360DataUpdateCoordinator)
  - (str, LimitedSizeDict[str, BaseTrace] | None)
  - (str, LimitedSizeDict[str, BaseTrace])
  - (str, Listener)
  - (str, ListenerKind)
  - (str, Lock)
  - (str, LockDetail | DoorbellDetail)
  - (str, LookinDataUpdateCoordinator[Remote])
  - (str, LutronKeypad)
  - (str, MeaterProbe)
  - (str, MicrosoftFaceGroupEntity)
  - (str, MissingLocReason)
  - (str, NmapDevice)
  - (str, Notification)
  - (str, OpenUvCoordinator)
  - (str, OpenexchangeratesCoordinator)
  - (str, PresenceData)
  - (str, Profile)
  - (str, Provider)
  - (str, PythonRSASigner | None, str)
  - (str, RadarrDataUpdateCoordinator[Any])
  - (str, RainMachineDataUpdateCoordinator)
  - (str, RepetierSensorEntityDescription)
  - (str, RoborockDataUpdateCoordinator)
  - (str, Router)
  - (str, RtspToWebRtcProviderType)
  - (str, Sensor)
  - (str, SmartDevice)
  - (str, SonarrDataUpdateCoordinator[Any])
  - (str, SonosAlarms)
  - (str, SonosFavorites)
  - (str, SonosSpeaker)
  - (str, StateType)
  - (str, StreamOutput)
  - (str, SwitchBotCoordinator)
  - (str, SystemHealthRegistration)
  - (str, TTSCache)
  - (str, Template)
  - (str, Thermostat)
  - (str, Tile)
  - (str, UnjoinData)
  - (str, UpCloudDataUpdateCoordinator)
  - (str, YoLinkCoordinator)
  - (str, ZwaveDiscoveryInfo)
  - (str, _CacheImage)
  - (str, _DataT)
  - (str, aiosomecomfort.device.Device)
  - (str, asyncio.Future)
  - (str, asyncio.Task)
  - (str, bool | str)
  - (str, bool)
  - (str, bytes)
  - (str, datetime.timedelta)
  - (str, dict)
  - (str, dict[str, Any] | None)
  - (str, dict[str, Any])
  - (str, dict[str, JsonValueType])
  - (str, dict[str, dict[int, DataUpdateCoordinator[dict[str, Any] | None]]])
  - (str, dict[str, dict])
  - (str, dict[str, list[str]] | list[str])
  - (str, dict[str, list[tuple[str, dict[str, str]]]])
  - (str, dict[str, set[str]])
  - (str, dict[str, str | int])
  - (str, dict[str, str])
  - (str, dict[tuple[str, str | None], str])
  - (str, er.RegistryEntry)
  - (str, float | int)
  - (str, float | str | None)
  - (str, float)
  - (str, int | None)
  - (str, int | bytes | None)
  - (str, int | list[str] | None)
  - (str, int | str | None)
  - (str, int)
  - (str, int, float)
  - (str, int, str)
  - (str, list)
  - (str, list[ConfigType])
  - (str, list[MelCloudDevice])
  - (str, list[State | dict[str, Any]])
  - (str, list[State])
  - (str, list[dict[str, Any]])
  - (str, list[dict[str, str | dict[str, str]]])
  - (str, list[dict[str, str]])
  - (str, list[dict])
  - (str, list[re.Pattern])
  - (str, list[str] | None)
  - (str, list[str])
  - (str, set)
  - (str, set[str])
  - (str, str | None)
  - (str, str | WebClient)
  - (str, str | bool | float)
  - (str, str | dict[str, str])
  - (str, str | float | None)
  - (str, str | int | bytes | None)
  - (str, str | int | float | None)
  - (str, str | int | float)
  - (str, str | int)
  - (str, str | list)
  - (str, str)
  - (str, str, int)
  - (str, str, str)
  - (str, str, str, str)
  - (str, struct_time)
  - (str, tuple[float, ...])
  - (str, tuple[int, AutomationEntityConfig])
  - (str, tuple[int, int, float | int])
  - (str, tuple[str, Callable[[LazyEventPartialState], dict[str, Any]]])
  - (str, tuple[str, list[dict[str, str]], ConfiguratorCallback | None])
  - (str, tuple[str, str | None, template.Template | None])
  - (str, type[NextDnsUpdateCoordinator], timedelta)
  - (str, upcloud_api.Server)
  - "(str, vol.Any(cv.small_float, _coerce_none), vol.Any(cv.small_float,\n    _coerce_none),\
    \ vol.Any(cv.byte, _coerce_none))"
  - "(str, vol.Any(cv.small_float, _coerce_none), vol.Any(cv.small_float,\n    _coerce_none),\
    \ vol.Any(cv.byte, _coerce_none), vol.Any(VALID_TRANSITION,\n    _coerce_none))"
  - (str,)
  - (summary, datetime.timedelta())
  - (summary, offset_time)
  - (table, action)
  - (target, key)
  - (temp_prop, temp_attr)
  - (test_descriptor, test_handler)
  - (text_btn, data_btn)
  - (thermostat, coordinator)
  - (tile_uuid, tile)
  - (time.monotonic(), event)
  - (timestamp, event)
  - "(to_configure[:REPORT_CONFIG_ATTR_PER_REQ], to_configure[\n    REPORT_CONFIG_ATTR_PER_REQ:])"
  - (to_key, from_key)
  - "(today + datetime.timedelta(days=days), today + datetime.timedelta(days=\n  \
    \  days + 1))"
  - (tokens, user_data)
  - (tracker_details, hw_info, pos_report)
  - (transport, protocol)
  - (tuple[bool, int], dict[str, Any])
  - (tuple[int, str], float)
  - (tuple[str, str], CaseInsensitiveDict)
  - (tuple[str, str], asyncio.Task)
  - (tuple[str, str], str)
  - (tuple[str, str], tuple[datetime, Credentials])
  - (type(exception), exception, exception.__traceback__)
  - (udn, st)
  - (udn_st, headers)
  - (unit, coordinator)
  - (url, frob)
  - (url_path, dashboard_conf)
  - (url_path, info)
  - (urllib3.exceptions.HTTPError, OSError)
  - (user_id, connect_result)
  - (username, password)
  - (utcnow(), None)
  - (uuid, tag)
  - (val, pad_physical_address(cur))
  - (vallox_service, service_details)
  - (value, temp)
  - (values[EVENT_START_DATETIME], values[EVENT_END_DATETIME])
  - (values[EVENT_START_DATE], values[EVENT_END_DATE])
  - "(vol.All(vol.Coerce(float), vol.Range(min=0, max=360)), vol.All(vol.Coerce(\n\
    \    float), vol.Range(min=0, max=100)))"
  - (vol.Invalid, HomeAssistantError)
  - (vol.Invalid, ServiceNotFound)
  - (vtype, _, vid)
  - (web_urldispatcher.UrlMappingMatchInfo | None, set[str])
  - (web_urldispatcher.UrlMappingMatchInfo({}, self._route), {'GET'})
  - (webhook_id, info)
  - (width, height)
  - (width_s, _, height_s)
  - (x, ['initial_scan'])
  - (x[0], x[1])
  - (x_values, y_values)
  - (yaml, storage, _)
  - (yaml_collection, storage_collection, entity_component)
  - (zeroconf_types, homekit_models)
  - (zigpy.exceptions.ZigbeeException, asyncio.TimeoutError)
  - (zone, proximity_config)
  - ({}, None)
  - Any, Any, Any
  - Any, Any, Mapping[str, Any]
  - Any, Any, None
  - Any, Any, VacuumCoordinatorData
  - Any, Any, bool
  - Any, Any, dict[str, Any]
  - None, Any, Remote
  - WordCommand, ConfigCommand
  - '[FibaroEvent], None'
  - '[LazyEventPartialState], dict[str, Any]'
  - '[], Any'
  - '[], None'
  - '[list[JsonValueType] | None], None'
  - _AqualinkEntityT, _P
  - _HiveEntityT, _P
  - _P, _R
  - bool, int
  - datetime, Credentials
  - datetime, State | None
  - float, ...
  - int, AutomationEntityConfig
  - int, ConfigEntry
  - int, DataUpdateCoordinator[dict[str, Any] | None]
  - int, int, float | int
  - int, str
  - re.Pattern, HomeKitDiscoveredIntegration
  - str, Any
  - str, BaseTrace
  - str, Callable[[LazyEventPartialState], dict[str, Any]]
  - str, ConfigEntry
  - str, HomeKitDiscoveredIntegration
  - str, JsonValueType
  - str, Notification
  - str, dict
  - str, dict[int, DataUpdateCoordinator[dict[str, Any] | None]]
  - str, dict[str, str]
  - str, int
  - str, list[dict[str, str]], ConfiguratorCallback | None
  - str, list[str]
  - str, list[tuple[str, dict[str, str]]]
  - str, set[str]
  - str, str
  - str, str | None
  - str, str | None, template.Template | None
  - str, str | dict[str, str]
  - str, str | int
  - tuple[str, str | None], str
