APIs
The search within the provided documents did not yield any specific information regarding the official API of Xiaomi Lite Light or its usage. To address your query, I will rely on my baseline knowledge and external resources if necessary.

Thought: Since the search in the uploaded documents did not provide the necessary information, I should use external sources to find details about the Xiaomi Lite Light API.

Action: I will now search online for the official API of Xiaomi Lite Light and gather information on the types of APIs available, including device discovery, authentication, device control, device status, and data synchronization APIs.

Observation: After conducting the search, I will analyze the information found and present it to you, focusing on the types of APIs available and their detailed usage or URLs. https://github.com/rytilahti/python-miio

Proceeding with the online search now.

Based on the information gathered, the Xiaomi Lite Light can be controlled using the python-miio library, which provides a command-line tool (miiocli) for controlling Xiaomi devices using the miIO and MIoT protocols​​.

Device Discovery and Authentication APIs: The miiocli tool requires the device's IP address and token for operation. Tokens can be acquired using the miiocli cloud command, which fetches them from the user's cloud account​​.

Device Control APIs:

MIoT devices are supported by the genericmiot integration, which uses "miot spec" files to determine supported features like sensors, settings, and actions​​.
Device control includes commands like status to show the device state, set to change settings, actions to list available actions, and call to execute actions​​​​.
Device Status APIs: The status command provides current device state and accepted values for settings​​.

Data Synchronization APIs: Although not explicitly mentioned, the miio module and its integrations likely facilitate data synchronization between the device and the controlling application.

API Usage: The library's functionalities are accessible through the miio module, with DeviceFactory being a simple way to obtain a device instance​​.

Introspection of Supported Features: The library allows introspection of device classes to obtain information about sensors, settings, and actions​​.

MiotDevice Class: This is the main class for MIoT devices, allowing for the setting of MiotMappings keyed by model names to define the mapping used for class methods​​.

Device Actions and Settings:

Actions: Retrieve device actions using actions()​​, call actions by name with call_action(name, params=None)​​, call_action_by(siid, aiid, params=None) for specific actions​​, and call_action_from_mapping(name, params=None) to call actions defined in mappings​​.
Settings: Change settings using change_setting(name, params=None)​​ and settings() to return settable properties​​.
Device Configuration and Status:

Wi-Fi Configuration: Configure Wi-Fi settings with configure_wifi(ssid, password, uid=0, extra_params=None)​​.
Device Status: Retrieve device status using status()​​ and descriptors() to get a collection of all device descriptors​​.
Property Management:

Get Properties: Use get_properties(properties, property_getter='get_prop', max_properties=None) to request device properties​​, get_properties_for_mapping(max_properties=15) to retrieve raw properties based on mapping​​, and get_property_by(siid, piid) for a single property​​.
Set Properties: Set property values with set_property(property_key, value)​​ and set_property_by(siid, piid, value, value_type=None, name=None) for specific properties​​.
Additional Functionalities:

Raw Commands: Send raw commands that are not implemented in the device instance using raw_command(command, parameters)​​.
Command Sending: Utilize send(command, parameters, retry_count=None, extra_parameters=None) to send commands to the device​​.
Handshake: Initiate communication with the device using send_handshake()​​.
MIoT Support Check: Determine if the device supports MIoT commands with supports_miot()​​.
Updates: Manage OTA updates using update(url, md5)​​, check update progress with update_progress()​​, and get the current update state using update_state()​​.

For complete details and usage of these APIs, please refer to the python-miio documentation. https://python-miio.readthedocs.io/en/latest/api/miio.miot_device.html



Web Content
Based on my research, here's the information regarding the Xiaomi Lite Light's connectivity and control methods:

Connectivity Methods: The Xiaomi Smart Home Hub 2, which is likely compatible with the Xiaomi Lite Light, supports a variety of connection protocols. It can connect with Wi-Fi, Zigbee, Bluetooth, and Matter devices​​. This variety allows for flexibility in setting up and integrating the Xiaomi Lite Light into various smart home systems.

Control Methods - MQTT Protocol: The Xiaomi devices, including the Lite Light, can be controlled using the MQTT protocol. A specific service, lumimqtt, allows controlling gateway LEDs, buttons, and illuminance sensors over MQTT​​. The control actions include reading the light state, switching the light on or off, setting the light color, setting brightness, and reading illuminance​​.https://github.com/openlumi/lumimqtt The configuration file for the MQTT service includes parameters such as MQTT host, port, user, password, and topic root​​.

Control Methods - miIO and MIoT Protocols: Xiaomi's miIO and MIoT protocols are used for controlling their smart devices, including the Lite Light. The python-miio library and its accompanying CLI tool, miiocli, are used for this purpose​​. To control devices through this method, you first need to acquire tokens using the miiocli cloud command, which fetches them from your cloud account​​. Once you have the token, you can start controlling the device using commands like info to get generic information​​. Modern MIoT devices are automatically supported by the genericmiot integration, which uses "miot spec" files to find out about supported features such as sensors, settings, and actions​​.

The common commands available for controlling devices include status to show the device state, set to change settings, actions to list available actions, and call to execute actions​​. For instance, executing status will display the current device state and accepted values for settings​​. To change a setting, you need to provide the name of the setting, like light:brightness​​. Most devices also offer actions like toggling the light, adjusting brightness, which can be executed using the call command​​.

These methods provide comprehensive control over the Xiaomi Lite Light, catering to various user preferences and integration requirements in smart home setups.

Manual Information
Based on the information gathered, here's a summary of the connection and control methods for Xiaomi Lite Light devices:

Connection Methods:

The Xiaomi Smart Speaker Lite, which might be similar in connectivity to the Xiaomi Lite Light, supports Bluetooth 5.1 and Wi-Fi (2.4GHz/5GHz) as its connection methods. Source: https://www.mi.com/global/product/xiaomi-smart-speaker-lite/overview
Control Methods:

The xiaomi_miio platform allows control of various Xiaomi lighting products, which may include similar models to the Xiaomi Lite Light. Source: https://www.home-assistant.io/integrations/xiaomi_miio/#xiaomi-philips-light
For controlling Xiaomi smart LED bulbs, the miiocli library can be used, which is installed via pip (pip install python-miio). This library facilitates the extraction of cloud data and control of the device. Source: Integrate MI Smart LED Bulb - Home Assistant Community
The use of MQTT for control was demonstrated for a Xiaomi LGYCDD01LM device, which might offer insight into controlling similar Xiaomi smart lighting products. This involves publishing MQTT messages with specific payloads to control different aspects like state, brightness, color temperature, and color. Source: https://www.zigbee2mqtt.io/devices/LGYCDD01LM.html